<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>积分及其基本定理</title>
      <link href="/post/783c1e535b27.html"/>
      <url>/post/783c1e535b27.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>微积分学习笔记 - 08 积分及其基本定理</p><p>进入 <a href="/categories/微积分学习笔记/">传送门</a>，阅读刊载在专栏《微积分学习笔记》下的全部文章。</p></blockquote><h2 id="十三、定积分与不定积分"><a href="#十三、定积分与不定积分" class="headerlink" title="十三、定积分与不定积分"></a>十三、定积分与不定积分</h2><h2 id="13-1-emsp-定积分的定义及性质"><a href="#13-1-emsp-定积分的定义及性质" class="headerlink" title="13.1 &emsp; 定积分的定义及性质"></a>13.1 &emsp; 定积分的定义及性质</h2><p>对于函数 $f(x)$ 和区间 $[a,b]$，定义定积分</p><script type="math/tex; mode=display">\int_a^b f(x)\mathrm{d}x=\lim\limits_{\mathrm{mesh}\to 0}\sum\limits_{j=1}^n f(c_j)(x_j-x_{j-1})</script><p>其中 $a=x_0&lt;x_1&lt;\cdots&lt;x_{n-1}&lt;x_n=b$ 并且对于每一个 $j=1,\cdots,n$ 都有 $c_j$ 在 $[x_{j-1},x_j]$ 内。</p><p>对于和式 $\sum\limits_{j=1}^n f(c_j)(x_j-x_{j-1})$ 称之为<strong>黎曼和</strong>。</p><p><strong>几何意义</strong>：函数图像在区间 $[a,b]$ 内与 $x$ 轴、$x=a$、$x=b$ 围成的区域的有向面积。</p><p><strong>性质一</strong></p><script type="math/tex; mode=display">\int_a^b f(x)\mathrm{d}x=-\int_b^a f(x)\mathrm{d}x</script><p><strong>性质二</strong></p><script type="math/tex; mode=display">\int _a^a f(x)\mathrm{d}x=0</script><p><strong>性质三</strong></p><script type="math/tex; mode=display">\int _a^b f(x)\mathrm{d}x=\int _a^c f(x)\mathrm{d}x+\int _c^b f(x)\mathrm{d}x</script><p><strong>性质四</strong></p><script type="math/tex; mode=display">\int _a^b Cf(x)\mathrm{d}x=C\int _a^b f(x)\mathrm{d}x</script><p><strong>性质五</strong></p><script type="math/tex; mode=display">\int _a^b(f(x)+g(x))\mathrm{d}x=\int _a^bf(x)\mathrm{d}x+\int _a^b g(x)\mathrm{d}x</script><p><strong>推论</strong> &emsp; 在函数 $f$ 和 $g$ 之间的面积为 $\int _a^b |f(x)-g(x)|\mathrm{d}x$。</p><h2 id="13-2-emsp-不定积分的定义及性质"><a href="#13-2-emsp-不定积分的定义及性质" class="headerlink" title="13.2 &emsp; 不定积分的定义及性质"></a>13.2 &emsp; 不定积分的定义及性质</h2><p>称 $F(x)$ 为函数 $f(x)$ 的<strong>原函数</strong>，则 $\dfrac {\mathrm{d}}{\mathrm{d}x} F(x)=f(x)$。</p><p>使用不定积分</p><script type="math/tex; mode=display">\int f(x)\mathrm{d}x</script><p>表示<strong>函数 $f(x)$ 的原函数的集合</strong>。</p><p><strong>性质一</strong></p><script type="math/tex; mode=display">\int (f(x)+g(x))\mathrm{d}x=\int f(x)\mathrm{d}x+\int g(x)\mathrm{d}x</script><p><strong>性质二</strong></p><script type="math/tex; mode=display">\int Cf(x)\mathrm{d}x=C\int f(x)\mathrm{d}x</script><h2 id="13-3-emsp-估算定积分"><a href="#13-3-emsp-估算定积分" class="headerlink" title="13.3 &emsp; 估算定积分"></a>13.3 &emsp; 估算定积分</h2><p><strong>定理</strong> &emsp; 如果对于在去建 $[a,b]$ 内的所有 $x$ 都有 $f(x)\le g(x)$，那么就有</p><script type="math/tex; mode=display">\int _a^b f(x)\mathrm{d}x\le \int_a^b g(x)\mathrm{d}x</script><p><strong>定理</strong> &emsp; 如果对于在 $[a,b]$ 区间内的所有 $x$ 有 $m\le f(x)\le M$，那么</p><script type="math/tex; mode=display">m(b-a)\le \int _a^b f(x)\mathrm{d}x\le M(b-a)</script><h2 id="13-4-emsp-积分的平均值和中值定理"><a href="#13-4-emsp-积分的平均值和中值定理" class="headerlink" title="13.4 &emsp; 积分的平均值和中值定理"></a>13.4 &emsp; 积分的平均值和中值定理</h2><p>函数 $f$ 在区间 $[a,b]$ 内的平均值为</p><script type="math/tex; mode=display">\dfrac 1 {b-a}\int _a^b f(x)\mathrm{d}x</script><p><strong>积分中值定理</strong> &emsp; 如果函数 $f$ 在闭区间 $[a,b]$ 上连续，则 $\exist c\in (a,b)$，满足</p><script type="math/tex; mode=display">f(c)=\dfrac 1 {b-a} \int _a^b f(x)\mathrm{d}x</script><h1 id="十四、微积分基本定理"><a href="#十四、微积分基本定理" class="headerlink" title="十四、微积分基本定理"></a>十四、微积分基本定理</h1><h2 id="14-1-emsp-微积分第一基本定理"><a href="#14-1-emsp-微积分第一基本定理" class="headerlink" title="14.1 &emsp; 微积分第一基本定理"></a>14.1 &emsp; 微积分第一基本定理</h2><p>对于一类形如 $F(x)=\int _a^x f(t)\mathrm{d}t$ 的函数 $F$，称其为<strong>积分上限函数</strong>。</p><p><strong>微积分第一基本定理</strong> &emsp; 如果函数 $f$ 在区间 $[a,b]$ 上连续，定义 $F$ 为</p><script type="math/tex; mode=display">F(x)=\int _a^x f(t)\mathrm{d}t \, , \, x\in [a,b]</script><p>则 $F$ 在区间 $(a,b)$ 是可导函数，并且</p><script type="math/tex; mode=display">F'(x)=f(x)</script><p>简而言之，可以总结为</p><script type="math/tex; mode=display">\boxed{\dfrac {\mathrm{d}}{\mathrm{d}x} \int _a^x f(t)\mathrm{d}t=f(x)}</script><h2 id="14-2-emsp-微积分第二基本定理"><a href="#14-2-emsp-微积分第二基本定理" class="headerlink" title="14.2 &emsp; 微积分第二基本定理"></a>14.2 &emsp; 微积分第二基本定理</h2><p><strong>牛顿 - 莱布尼茨公式</strong> &emsp; 如果函数 $f$ 在区间 $[a,b]$ 上连续，$F$ 是 $f$ 的任意一个原函数，那么</p><script type="math/tex; mode=display">\int _a^b f(x)\mathrm{d}x=F(b)-F(a)</script><p>通常，我们写作</p><script type="math/tex; mode=display">\left.\int _a^b f(x)\mathrm{d}x=F(x)\right| _a^b</script><h2 id="14-3-emsp-积分公式"><a href="#14-3-emsp-积分公式" class="headerlink" title="14.3 &emsp; 积分公式"></a>14.3 &emsp; 积分公式</h2><script type="math/tex; mode=display">\begin{aligned}&\int x^a \mathrm{d}x=\dfrac {x^{a+1}}{a+1}+C \, , \, a\not=-1 \\&\int \dfrac 1 x \mathrm{d} x=\ln |x| +C \\&\int \mathrm{e}^x \mathrm{d}x=\mathrm{e}^x+C \\&\int b^x\mathrm{d}x=\dfrac {b^x}{\ln b}+C \\&\int \cos x \mathrm{d}x =\sin x+C \\&\int \sin x \mathrm{d}x =-\cos x+C \\&\int \sec^2 x \mathrm{d}x=\tan x+C \\&\int \sec x \tan x \mathrm{d}x=\sec x +C \\&\int \csc^2 x \mathrm{d}x=-\cot x +C \\&\int \csc x\cot x \mathrm{d}x=-\csc x +C \\&\int \dfrac 1 {\sqrt{1-x^2}}\mathrm{d}x=\arcsin x +C \\&\int \dfrac 1 {1+x^2}\mathrm{d}x=\arctan x+C \\&\int \dfrac 1 {|x|\sqrt{x^2-1}}\mathrm{d}x=\arcsec x +C \\&\int \cosh x \mathrm{d}x=\sinh x +C \\&\int \sinh x \mathrm{d}x=\cosh x +C \\&\int \dfrac {f'(x)}{f(x)}\mathrm{d}x=\ln |f(x)|+C\\&\int \dfrac 1 {x^2+a^2}\mathrm{d}x=\dfrac 1 a \arctan \dfrac x a +C\end{aligned}</script>]]></content>
      
      
      <categories>
          
          <category> 微积分学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛必达法则及其应用</title>
      <link href="/post/e947ed10e5d3.html"/>
      <url>/post/e947ed10e5d3.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>微积分学习笔记 - 07 洛必达法则及其应用 </p><p>进入 <a href="/categories/微积分学习笔记/">传送门</a>，阅读刊载在专栏《微积分学习笔记》下的全部文章。</p></blockquote><h1 id="十二、洛必达法则"><a href="#十二、洛必达法则" class="headerlink" title="十二、洛必达法则"></a>十二、洛必达法则</h1><p>当函数极限呈现以下形式时，称为<strong>不定型极限</strong>：</p><ul><li><p><strong>$\frac{0}{0}$ 型</strong>：$\lim\limits_{x \to a} f(x)=0$ 且 $\lim\limits_{x \to a} g(x)=0$  </p></li><li><p><strong>$\frac{\infty}{\infty}$ 型</strong>：$\lim\limits_{x \to a} f(x)=\infty$ 且 $\lim\limits_{x \to a} g(x)=\infty$  </p></li><li><p><strong>其他形式</strong>：$0 \cdot \infty$, $\infty - \infty$, $0^0$, $1^\infty$ 等（需转化为前两种形式处理）</p></li></ul><h2 id="12-1-emsp-洛必达法则"><a href="#12-1-emsp-洛必达法则" class="headerlink" title="12.1 &emsp; 洛必达法则"></a>12.1 &emsp; 洛必达法则</h2><p><strong>洛必达法则</strong> &emsp; 若 $f(x)$ 和 $g(x)$ 满足：</p><ol><li>在 $x=a$ 的某去心邻域内可导（$a$ 可为有限数或 $\pm\infty$）；</li><li>$\lim\limits_{x \to a} f(x)$ 和 $\lim\limits_{x \to a} g(x)$ 均为 $0$ 或 $\infty$；</li><li>$\lim\limits_{x \to a} \frac{f’(x)}{g’(x)}$ 存在。</li></ol><p>则：</p><script type="math/tex; mode=display">\boxed{ \lim\limits_{x \to a} \frac{f(x)}{g(x)} = \lim\limits_{x \to a} \frac{f'(x)}{g'(x)} }</script><p><strong>几何直观</strong>：导数反映了函数的局部变化率，洛必达法则通过比较分子分母的<strong>相对增长率</strong>来简化极限计算。</p><h2 id="12-2-emsp-洛必达法则的应用"><a href="#12-2-emsp-洛必达法则的应用" class="headerlink" title="12.2 &emsp; 洛必达法则的应用"></a>12.2 &emsp; 洛必达法则的应用</h2><p>步骤总结：</p><ol><li><strong>验证不定型</strong>：确认极限为 $\frac{0}{0}$ 或 $\frac{\infty}{\infty}$；</li><li><strong>求导分子分母</strong>：分别对 $f(x)$ 和 $g(x)$ 求导；</li><li><strong>计算新极限</strong>：若结果确定或为 $\infty$，则原极限与之相等；</li><li><strong>重复应用</strong>：若结果仍为不定型，可多次使用洛必达法则。</li></ol><h3 id="12-2-1-emsp-frac-0-0-型极限"><a href="#12-2-1-emsp-frac-0-0-型极限" class="headerlink" title="12.2.1 &emsp; $\frac{0}{0}$ 型极限"></a>12.2.1 &emsp; $\frac{0}{0}$ 型极限</h3><blockquote><p>  <strong>例</strong> &emsp; 求 $\lim\limits_{x \to 0} \dfrac{e^x - 1 - x}{x^2}$。</p><p>  <strong>解</strong> </p><script type="math/tex; mode=display">  \begin{aligned}  \lim\limits_{x \to 0} \dfrac{e^x - 1 - x}{x^2}&=\lim\limits_{x\to 0} \dfrac{e^x-1}{2x} \\  &= \lim \limits_{x\to 0}\dfrac{e^x}{2} \\  &=\dfrac 1 2  \end{aligned}</script></blockquote><h3 id="12-2-2-emsp-frac-infty-infty-型极限"><a href="#12-2-2-emsp-frac-infty-infty-型极限" class="headerlink" title="12.2.2 &emsp; $\frac{\infty}{\infty}$ 型极限"></a>12.2.2 &emsp; $\frac{\infty}{\infty}$ 型极限</h3><blockquote><p>  <strong>例</strong> &emsp; 求 $\lim\limits_{x\to \infty}\dfrac{\ln x}{x}$。</p><p>  <strong>解</strong></p><script type="math/tex; mode=display">  \begin{aligned}  \lim\limits_{x\to \infty} \dfrac{\ln x}{x}&=\lim\limits_{x\to \infty}\dfrac{\frac 1 x}{1}=0  \end{aligned}</script></blockquote><h3 id="12-2-3-emsp-0-cdot-infty-型极限"><a href="#12-2-3-emsp-0-cdot-infty-型极限" class="headerlink" title="12.2.3&emsp; $0\cdot \infty$ 型极限"></a>12.2.3&emsp; $0\cdot \infty$ 型极限</h3><p><strong>方法</strong>：改写为 $\dfrac{0}{1/\infty}$。</p><blockquote><p>  <strong>例</strong> &emsp; 求 $\lim\limits_{x \to 0^+} x \ln x$。</p><p>  <strong>解</strong></p><script type="math/tex; mode=display">  \lim\limits_{x \to 0^+} x \ln x=\lim\limits_{x \to 0^+} \dfrac{\dfrac{1}{x}}{-\dfrac{1}{x^2}} = \lim\limits_{x \to 0^+} (-x) = 0</script></blockquote><h3 id="12-2-4-emsp-infty-infty-型极限"><a href="#12-2-4-emsp-infty-infty-型极限" class="headerlink" title="12.2.4&emsp; $\infty - \infty$ 型极限"></a>12.2.4&emsp; $\infty - \infty$ 型极限</h3><p><strong>方法</strong>：通分或提取公因式。</p><blockquote><p>  <strong>例</strong> &emsp; 求 $\lim\limits_{x\to 0}(\dfrac 1 {\sin{x}}-\dfrac 1 x)$。</p><p>  <strong>解</strong></p><script type="math/tex; mode=display">  \begin{aligned}  \lim\limits_{x\to 0}(\dfrac 1 {\sin{x}}-\dfrac 1 x)&=\lim\limits_{x\to 0}\dfrac{x-\sin x}{x\sin x} \\  &= \lim\limits_{x\to 0}\dfrac{1-\cos x}{\sin x+x\cos x} \\  &= \lim \limits_{x\to 0}\dfrac{\sin x}{\cos x-\sin x+\cos x} \\  &= 0  \end{aligned}</script></blockquote><h3 id="12-2-5-emsp-1-infty-型极限"><a href="#12-2-5-emsp-1-infty-型极限" class="headerlink" title="12.2.5&emsp; $1^ \infty$ 型极限"></a>12.2.5&emsp; $1^ \infty$ 型极限</h3><p><strong>方法</strong>：取对数转化为 $0 \cdot \infty$。</p><blockquote><p>  <strong>例</strong> &emsp; 求 $\lim\limits_{x \to \infty} \left(1 + \frac{1}{x}\right)^x$。</p><p>  <strong>解</strong> &emsp; 令 $y = \left(1 + \frac{1}{x}\right)^x$，取对数得 $\ln y = x \ln\left(1 + \frac{1}{x}\right)$。</p><script type="math/tex; mode=display">  \begin{aligned}  \lim \limits_{x\to \infty} x\ln(1+\dfrac 1 x)&= \lim\limits_{x\to \infty} \dfrac{\ln(1+1/x)}{1/x} \\  &=\lim\limits_{x \to \infty} \frac{\dfrac{-1/x^2}{1 + 1/x}}{-1/x^2} \\  &= \lim\limits_{x \to \infty} \frac{1}{1 + 1/x} \\  &= 1  \end{aligned}</script><p>所以 $\lim\limits_{x\to \infty} y=e^1=e$。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 微积分学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 WSL 中安装 Linux 子系统</title>
      <link href="/post/df01879e5e08.html"/>
      <url>/post/df01879e5e08.html</url>
      
        <content type="html"><![CDATA[<p><strong>注意：本文方法须在 win10 或 win11 环境下运行，其他环境可能无配置。</strong></p><h1 id="一、安装-Linux-子系统"><a href="#一、安装-Linux-子系统" class="headerlink" title="一、安装 Linux 子系统"></a>一、安装 Linux 子系统</h1><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1."></a>Step 1.</h2><p>依次输入如下命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl --update</span><br><span class="line">wsl --<span class="built_in">set</span>-default-version <span class="number">2</span></span><br></pre></td></tr></table></figure><p>对于第一个命令，如果速度较慢，可以更换为</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --update --web-download </span><br></pre></td></tr></table></figure><p><strong>随后重新启动电脑。</strong></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2."></a>Step 2.</h2><p>输入如下命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l -o</span><br></pre></td></tr></table></figure><p>可以看到如下反馈即为正常</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">以下是可安装的有效分发的列表。</span><br><span class="line">使用 &#x27;wsl.exe --install &lt;Distro&gt;&#x27; 安装。</span><br><span class="line"></span><br><span class="line">NAME                            FRIENDLY NAME</span><br><span class="line">Ubuntu                          Ubuntu</span><br><span class="line">Debian                          Debian GNU/Linux</span><br><span class="line">kali-linux                      Kali Linux Rolling</span><br><span class="line">Ubuntu-18.04                    Ubuntu 18.04 LTS</span><br><span class="line">Ubuntu-20.04                    Ubuntu 20.04 LTS</span><br><span class="line">Ubuntu-22.04                    Ubuntu 22.04 LTS</span><br><span class="line">Ubuntu-24.04                    Ubuntu 24.04 LTS</span><br><span class="line">OracleLinux_7_9                 Oracle Linux 7.9</span><br><span class="line">OracleLinux_8_7                 Oracle Linux 8.7</span><br><span class="line">OracleLinux_9_1                 Oracle Linux 9.1</span><br><span class="line">openSUSE-Leap-15.6              openSUSE Leap 15.6</span><br><span class="line">SUSE-Linux-Enterprise-15-SP5    SUSE Linux Enterprise 15 SP5</span><br><span class="line">SUSE-Linux-Enterprise-15-SP6    SUSE Linux Enterprise 15 SP6</span><br><span class="line">openSUSE-Tumbleweed             openSUSE Tumbleweed</span><br></pre></td></tr></table></figure><p>如果出现反馈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">无法从“https://raw.githubusercontent.com/microsoft/WSL/master/distributions/DistributionInfo.json”中提取列表分发。无法与服务器建立连接</span><br><span class="line">Error code: Wsl/WININET_E_CANNOT_CONNECT</span><br></pre></td></tr></table></figure><p>或错误代码，则网络联通不畅，需要加速器连接或准备梯子。</p><p>这一步也许不是必要的，笔者已经提供了足够的安装信息以供下文使用。</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3."></a>Step 3.</h2><p>在上面的反馈中可以看到名称和发行版名称，在终端中运行如下命令安装发行版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl.exe --install &lt;NAME&gt;</span><br></pre></td></tr></table></figure><p>如果网路连接不畅，可以运行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl.exe --install &lt;NAME&gt; --web-download </span><br></pre></td></tr></table></figure><p>安装完成后按照提示设置用户名和密码即可。</p><p>子系统安装成功。</p><h1 id="二、使用-VS-Code-在-子系统中工作"><a href="#二、使用-VS-Code-在-子系统中工作" class="headerlink" title="二、使用 VS Code 在 子系统中工作"></a>二、使用 VS Code 在 子系统中工作</h1><h2 id="Step-1-1"><a href="#Step-1-1" class="headerlink" title="Step 1."></a>Step 1.</h2><p>在 Windows 下找到子系统应用，其名字就是上面信息中的 <code>&lt;NAME&gt;</code>。如果使用 Windows11，可以在终端中任务栏的加号处找到。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=7C4HCEDZ" style="zoom: 80%;" /></p><p>之后进入 Bash。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home</span><br><span class="line">sudo <span class="built_in">mkdir</span> workspace</span><br><span class="line"><span class="built_in">cd</span> workspace</span><br></pre></td></tr></table></figure><p>创建工作文件夹。</p><p>接下来为当前文件夹设置根权限。<strong>这一步很重要，如果不进行会导致在 VS Code 中无法编辑文件。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R &lt;usrname&gt; /home/workspace/</span><br></pre></td></tr></table></figure><h2 id="Step-2-1"><a href="#Step-2-1" class="headerlink" title="Step 2."></a>Step 2.</h2><p>在 Windows 下启动 Visual Studio Code，添加扩展 <code>WSL</code>。</p><p>返回 Bash 终端中，运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure><p>即可在当前位置打开终端。</p><p>第一次需要在 VS Code 中配置相关扩展，初次编写代码后在右下角跟随提示选择安装编译器即可。</p><p>之后可以在 Windows 下 VS Code 软件中 左侧 “远程资源管理器” 栏目内快速进入 WSL。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微分中值定理与线性化</title>
      <link href="/post/e99cd501ec6c.html"/>
      <url>/post/e99cd501ec6c.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>  微积分学习笔记 - 06 微分中值定理与线性化</p><p>  进入 <a href="https://aiopr-2378.github.io/categories/微积分学习笔记/">传送门</a>，阅读刊载在专栏《微积分学习笔记》下的全部文章。</p></blockquote><h1 id="十、微分中值定理"><a href="#十、微分中值定理" class="headerlink" title="十、微分中值定理"></a>十、微分中值定理</h1><p>微分中的中值定理主要有以下三个。</p><h2 id="10-1-罗尔定理"><a href="#10-1-罗尔定理" class="headerlink" title="10.1   罗尔定理"></a>10.1   罗尔定理</h2><p><strong>罗尔定理</strong>  对于函数 $f(x)$，若满足以下条件：</p><ol><li>在 $[a,b]$ 内连续；</li><li>在 $(a,b)$ 内可导；</li><li>$f(a)=f(b)$。</li></ol><p>则在 $(a,b)$ 内至少存在一点 $\xi$，使得 $f’(\xi)=0$。</p><p><a href="https://sy.hhwdd.com/RequireFile.do?fid=9292po5N"><img src="https://sy.hhwdd.com/RequireFile.do?fid=9292po5n" alt="img"></a></p><h2 id="10-2-拉格朗日中值定理"><a href="#10-2-拉格朗日中值定理" class="headerlink" title="10.2   拉格朗日中值定理"></a>10.2   拉格朗日中值定理</h2><p><strong>拉格朗日中值定理</strong>  对于函数 $f(x)$，若满足以下条件：</p><ol><li>在 $[a,b]$ 内连续；</li><li>在 $(a,b)$ 内可导。</li></ol><p>则在 $(a,b)$ 内至少存在一点 $\xi$，使得</p><script type="math/tex; mode=display">f'(\xi)=\dfrac{f(b)-f(a)}{b-a}</script><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=KviccHwl" alt="无标题.png"></p><h2 id="10-3-柯西中值定理"><a href="#10-3-柯西中值定理" class="headerlink" title="10.3   柯西中值定理"></a>10.3   柯西中值定理</h2><p><strong>柯西中值定理</strong>  对于函数 $f(x)$ 和函数 $F(x)$，若均满足以下条件：</p><ol><li>在 $[a,b]$ 内连续；</li><li>在 $(a,b)$ 内可导；</li><li>$\forall x\in (a,b),F’(x)\not=0$。</li></ol><p>则在 $(a,b)$ 内至少存在一点 $\xi$，使得</p><script type="math/tex; mode=display">\dfrac{f(b)-f(a)}{F(b)-F(a)}=\dfrac{f'(\xi)}{F'(\xi)}</script><h1 id="十一、线性化与牛顿迭代法"><a href="#十一、线性化与牛顿迭代法" class="headerlink" title="十一、线性化与牛顿迭代法"></a>十一、线性化与牛顿迭代法</h1><h2 id="11-1-线性化"><a href="#11-1-线性化" class="headerlink" title="11.1   线性化"></a>11.1   线性化</h2><p>对于函数 $f(x)$，取定义域内一点 $a$，定义</p><script type="math/tex; mode=display">L(x)=f(a)+f'(a)(x-a)</script><p>为 $f$ 在 $x=a$ 处的<strong>线性化</strong>。它的意义是</p><script type="math/tex; mode=display">f(x)\approx L(x)</script><p>可以用这个式子借助相邻点 $a$ 的函数值估算 $x$ 处的函数值。</p><p>线性化是泰勒展开在多项式次数等于 $1$ 时的特殊形式，一般可以达到粗略估算效果。</p><p><a href="https://sy.hhwdd.com/RequireFile.do?fid=dmX96Gg5"><img src="https://sy.hhwdd.com/RequireFile.do?fid=dmX96Gg5" alt="img"></a></p><h2 id="11-2-牛顿迭代法"><a href="#11-2-牛顿迭代法" class="headerlink" title="11.2   牛顿迭代法"></a>11.2   牛顿迭代法</h2><p>发现对函数的某个位置仅使用一次线性化可能产生的误差相对较大，此时可以考虑多次迭代使用线性化。</p><p>牛顿迭代法用于利用线性化估算函数零点。</p><p>假设 $a$ 是对方程 $f(x)=0$ 的解的一个近似，令</p><script type="math/tex; mode=display">b=a-\dfrac{f(a)}{f'(a)}</script><p>则在大多情况下，$b$ 是一个比 $a$ 更好的近似。</p><p>这个式子本质上实在 $x=a$ 的位置做了第二次线性化，得到 $b$。</p><p>但牛顿法不一定广泛使用，可能出现以下情况：</p><ul><li>若 $f’(a)$ 接近于 $0$，那么估算出的 $b$ 将可能比 $a$ 更劣；</li><li>若 $f(x)=0$ 不止有一个解，那么可能得到的不是所需解；</li><li>近似情况可能陷入循环或变得更加糟糕。</li></ul><p>一般情况下，可以随机在定义域内多次取点开始第一次线性化，划定迭代次数上限等限制可以辅助此方法。</p>]]></content>
      
      
      <categories>
          
          <category> 微积分学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波那契数列的重要性质</title>
      <link href="/post/f23d9ce1afcb.html"/>
      <url>/post/f23d9ce1afcb.html</url>
      
        <content type="html"><![CDATA[<p>斐波那契数列的重要性质</p><p>对于斐波那契数列 $f$，有如下定义：</p><script type="math/tex; mode=display">f_n=\begin{cases}0 & n=0 \\1 & n=1 \\f_{n-1}+f_{n-2} &n>1\end{cases}</script><p>其有如下重要性质。</p><hr><p><strong>性质一</strong> &emsp; 对于 $\forall n\ge 1$，有</p><script type="math/tex; mode=display">\boxed{f_{n-1}f_{n+1}-f_n^2=(-1)^n}</script><p><strong>证明</strong> &emsp; 根据定义，有</p><script type="math/tex; mode=display">\begin{aligned}f_{n-1}f_{n+1}-f_n^2&=f_{n-1}(f_{n-1}f_n)-f_n^2 \\ &= f_{n-1}^2-f_n(f_{n-1}-f_n) \\ &=f_{n-1}^2-f_nf_{n-2} \\ &=f_{n-1}f_{n-3}-f_{n-2}^2 \\ &=\cdots \\ &=(-1)^{n-1}(f_0f_2-f_1^2) \\ &=(-1)^n \end{aligned}</script><p>证毕。</p><hr><p><strong>性质二</strong> &emsp; 对于 $\forall n\ge 0,k\ge 1$，有</p><script type="math/tex; mode=display">\boxed{f_{n+k}=f_{k-1}f_n+f_kf_{n+1}}</script><p><strong>证明</strong> &emsp; 设 $f_n=a,f_{n+1}=b$，则有</p><script type="math/tex; mode=display">\begin{aligned}f_{n+1}&=a+b \\f_{n+2}&=a+2b \\f_{n+3}&=2a+3b \\\cdots \\f_{n+k}&=f_{k-1}a+f_kb \\&= f_{k-1}f_n+f_kf_{n+1}\end{aligned}</script><p>上述规律可以表述为 $a,b$ 的系数均为相邻两项斐波那契数列且与 $k$ 相关。</p><p>证毕。</p><p>上述结论也可表示为 $f_m=f_{m-n-1}f_n+f_{m-n}f_{n+1}$，其中 $m&gt;n\ge 0$。</p><p><strong>性质二 &emsp; 推论一</strong> &emsp; 若取 $k=n$，则有</p><script type="math/tex; mode=display">f_{2n}=f_n(f_{n-1}+f_{n+1})</script><p><strong>性质二 &emsp; 推论二</strong> &emsp; 由推论一可以归纳证明</p><script type="math/tex; mode=display">\forall k\in \mathbb N\,,\,f_n\mid f_{nk}</script><p><strong>性质二 &emsp; 推论三</strong> &emsp; 推论二可逆，即</p><script type="math/tex; mode=display">f_a\mid f_b\Leftrightarrow a\mid b</script><hr><p><strong>性质三</strong> &emsp; 对于 $\forall n\ge 0$，有</p><script type="math/tex; mode=display">\boxed{(f_n,f_{n+1})=1}</script><p>其中，$(x,y)$ 表示 $x$ 与 $y$ 的最大公约数。</p><p><strong>证明</strong> &emsp; 施更相减损术，有</p><script type="math/tex; mode=display">\begin{aligned}(f_n,f_n+1)&=(f_n,f_{n+1}-f_n) \\&=(f_n,f_{n-1}) \\&=\cdots \\&=(f_1,f_2) \\&=1\end{aligned}</script><p>证毕。</p><hr><p><strong>性质四</strong> &emsp; 对于 $\forall n,m\ge 0$，有</p><script type="math/tex; mode=display">\boxed{(f_n,f_m)=f_{(n,m)}}</script><p>其中，$(x,y)$ 表示 $x$ 与 $y$ 的最大公约数。</p><p><strong>证明</strong> &emsp; 根据性质二，有</p><script type="math/tex; mode=display">\begin{aligned}(f_n,f_m)=(f_n,f_{m-n-1}f_n+f_{m-n}f_{n+1})\end{aligned}</script><p>因为 $f_n\mid f_{m-n-1}f_n$，$(f_n,f_{n+1})=1$，所以</p><script type="math/tex; mode=display">(f_n,f_m)=(f_n,f_{m-n})</script><p>发现上述等式等价于对下标进行更相减损术，故有</p><script type="math/tex; mode=display">(f_n,f_m)=(f_0,f_{(n,m)})=f_{(n,m)}</script><p>证毕。</p><p>应用此性质，可以完成例题：<a href="https://www.luogu.com.cn/problem/P1306">洛谷 P1306 斐波那契公约数</a>。</p><p>这个性质对于广义斐波那契数列也同样成立。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有上下界的网络流</title>
      <link href="/post/20e971a77f0b.html"/>
      <url>/post/20e971a77f0b.html</url>
      
        <content type="html"><![CDATA[<p>有上下界的网络流</p><h1 id="一、无源汇上下界网络可行流"><a href="#一、无源汇上下界网络可行流" class="headerlink" title="一、无源汇上下界网络可行流"></a>一、无源汇上下界网络可行流</h1><blockquote><p>   <strong>无源汇上下界网络可行流</strong>&emsp; 给定 $n$ 个点，$m$ 条边，每条边 $e$ 有一个流量下界 $l_e$ 和流量上界 $r_e$，求一种可行方案使得在所有点满足流量平衡条件的前提下，所有边满足流量限制。</p></blockquote><p>这是一个判定。不同于一般的网络流，这个模型中没有源点与汇点，而且增加了每条边的流量限制 $[l_e,r_e]$，而一般的网络流只有最大流量限制，可以视为特殊的上下界网络流（$l_e=0$）。</p><p>首先考虑消除下界流量带来的影响。因为下界流量是必须流到的，不妨先强制流满下界流量。而这也带来了影响——这样操作之后每个点的初始含流量不再为 $0$，可以理解成，操作之后，每个节点多余若干流量或缺少若干流量，<strong>这是由于强制流满下界而未保证流量守恒导致的</strong>。</p><p>这样，记 $left_i$ 表示节点 $i$ 经过上述操作所剩余（用正表示） / 缺少（用负表示）的流量，并建立超级源点 $s$ 与超级汇点 $t$：</p><ul><li>若 $left_i&gt;0$，即该节点流满下界时剩余 $left_i$ 单位流量，应多补给 $left_i$ 单位流量才能保证流满边的下界并流量守恒，所以需要<strong>从源点 $s$ 向 $i$ 连流量为 $left_i$ 的边</strong>；</li><li>若 $left_i&lt;0$，即该节点流满下界时缺少 $left_i$ 单位流量，应少供给 $left_i$ 单位流量才能保证流满边的下界并流量守恒，所以需要<strong>从 $i$ 向汇点 $t$ 连流量为 $-left_i$ 的边</strong>。</li></ul><p>上面两个连边方式容易记混淆，务必深刻理解。</p><p>然后正常从超级源点 $s$ 到超级汇点 $t$ 跑网络流。<strong>网络有可行流当且仅当从超级源点流出的边均流满。</strong></p><p>下面是算法流程：</p><ol><li>强制流满每条边的下界 $l_e$，并根据流量记录每个点应剩余 / 缺少的流量值 $left_i$。</li><li>建立超级源点 $s$ 与超级汇点 $t$，按上述方式进行连边。</li><li>从 $s$ 到 $t$ 进行常规网络流算法。</li><li>检验网络流量是否与超级源点 $s$ 的出边流量和相等，相等则有可行流，否则没有。</li></ol><p>模板题 <a href="https://loj.ac/p/115">LOJ #155. 无源汇有上下界可行流</a>，参考代码如下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 50005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="type">int</span> n,m,lft[MAXN],s,t,total,ans,idx[MAXN];</span><br><span class="line"><span class="type">int</span> head[MAXN],to[MAXN],nxt[MAXN],edge[MAXN],tot=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> now[MAXN],dep[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v,l,r;</span><br><span class="line">&#125;a[MAXN];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    to[++tot]=y,edge[tot]=c,nxt[tot]=head[x],head[x]=tot;</span><br><span class="line">    to[++tot]=x,edge[tot]=<span class="number">0</span>,nxt[tot]=head[y],head[y]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="built_in">sizeof</span>(dep));</span><br><span class="line">    dep[s]=<span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    now[s]=head[s];</span><br><span class="line">    <span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">            <span class="type">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span>(edge[i]&amp;&amp;!dep[v])&#123;</span><br><span class="line">                dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">                now[v]=head[v];</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">                <span class="keyword">if</span>(v==t) flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t) <span class="keyword">return</span> flow;</span><br><span class="line">    <span class="type">int</span> rest=flow;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=now[u];i;i=nxt[i],now[u]=i)&#123;</span><br><span class="line">        <span class="type">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(edge[i]&amp;&amp;dep[v]==dep[u]+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="built_in">dinic</span>(v,<span class="built_in">min</span>(edge[i],rest));</span><br><span class="line">            <span class="keyword">if</span>(!k) dep[v]=<span class="number">0</span>;</span><br><span class="line">            edge[i]-=k;</span><br><span class="line">            edge[i^<span class="number">1</span>]+=k;</span><br><span class="line">            rest-=k;</span><br><span class="line">            <span class="keyword">if</span>(!rest) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow-rest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    s=n+<span class="number">1</span>,t=n+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i].u&gt;&gt;a[i].v&gt;&gt;a[i].l&gt;&gt;a[i].r;</span><br><span class="line">        lft[a[i].u]-=a[i].l;</span><br><span class="line">        lft[a[i].v]+=a[i].l;</span><br><span class="line">        idx[i]=tot+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">add</span>(a[i].u,a[i].v,a[i].r-a[i].l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(lft[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">add</span>(s,i,lft[i]);</span><br><span class="line">            total+=lft[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">add</span>(i,t,-lft[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> flow;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>())&#123;</span><br><span class="line">        <span class="keyword">while</span>(flow=<span class="built_in">dinic</span>(s,inf)) ans+=flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans==total)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) cout&lt;&lt;a[i].r-edge[idx[i]]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、有源汇上下界网络可行流"><a href="#二、有源汇上下界网络可行流" class="headerlink" title="二、有源汇上下界网络可行流"></a>二、有源汇上下界网络可行流</h1><blockquote><p><strong>有源汇上下界网络可行流</strong>&emsp; 给定 $n$ 个点，$m$ 条边，每条边 $e$ 有一个流量下界 $l_e$ 和流量上界 $r_e$，给定源点 $s$ 和汇点 $t$，求一种可行方案使得在所有点满足流量平衡条件的前提下，所有边满足流量限制。</p></blockquote><p>加入一条从汇点 $t$ 连向源点 $s$ 的流量上下界为 $[0,+\infty)$ 的边，转化成无源汇上下界网络可行流。之后新建超级源点 $S$ 与超级汇点 $T$，按上节方式连边进行网络最大流算法进行判定即可。</p><p>另外，我们还可以根据残量网图中 $t\rightarrow s$ 的边的剩余流量计算出网络可行流的大小。</p><h1 id="三、有源汇上下界网络最大流"><a href="#三、有源汇上下界网络最大流" class="headerlink" title="三、有源汇上下界网络最大流"></a>三、有源汇上下界网络最大流</h1><blockquote><p>   <strong>有源汇上下界网络最大流</strong>&emsp; 给定 $n$ 个点，$m$ 条边，每条边 $e$ 有一个流量下界 $l_e$ 和流量上界 $r_e$，给定源点 $s$ 和汇点 $t$，求网络中的最大流，使得在所有点满足流量平衡条件的前提下，所有边满足流量限制。</p></blockquote><p>先进行有源汇上下界网络可行流算法，之后得到残量网图与可行流大小。删除额外建立的 $t\rightarrow s$ 边，重新在<strong>残量网图</strong>上以 $s$ 为源点，$t$ 为汇点进行最大流算法。</p><p>则网络中的最大流为可行流与残量网图最大流之和。</p><p>模板题 <a href="https://loj.ac/p/116">LOJ #116. 有源汇有上下界最大流</a>，参考代码如下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 50005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="type">int</span> n,m,s,t,res[MAXN],ans;</span><br><span class="line"><span class="type">int</span> head[MAXN],nxt[MAXN],to[MAXN],edge[MAXN],tot=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> now[MAXN],d[MAXN];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y,l,r;</span><br><span class="line">&#125;e[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">    to[++tot]=y,edge[tot]=w,nxt[tot]=head[x],head[x]=tot;</span><br><span class="line">    to[++tot]=x,edge[tot]=<span class="number">0</span>,nxt[tot]=head[y],head[y]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="built_in">sizeof</span>(d));</span><br><span class="line">    d[s]=<span class="number">1</span>;</span><br><span class="line">    now[s]=head[s];</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">            <span class="type">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span>(edge[i]&amp;&amp;!d[v])&#123;</span><br><span class="line">                d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">                now[v]=head[v];</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">                <span class="keyword">if</span>(v==t) flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t) <span class="keyword">return</span> flow;</span><br><span class="line">    <span class="type">int</span> rest=flow;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=now[u];i;i=nxt[i],now[u]=i)&#123;</span><br><span class="line">        <span class="type">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(edge[i]&amp;&amp;d[v]==d[u]+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="built_in">dinic</span>(v,<span class="built_in">min</span>(edge[i],rest));</span><br><span class="line">            <span class="keyword">if</span>(!k) d[v]=<span class="number">0</span>;</span><br><span class="line">            edge[i]-=k;</span><br><span class="line">            edge[i^<span class="number">1</span>]+=k;</span><br><span class="line">            rest-=k;</span><br><span class="line">            <span class="keyword">if</span>(!rest) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow-rest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> s0,t0;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s0&gt;&gt;t0;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;e[i].x&gt;&gt;e[i].y&gt;&gt;e[i].l&gt;&gt;e[i].r;</span><br><span class="line">        res[e[i].x]-=e[i].l;</span><br><span class="line">        res[e[i].y]+=e[i].l;</span><br><span class="line">        <span class="built_in">add</span>(e[i].x,e[i].y,e[i].r-e[i].l);</span><br><span class="line">    &#125;</span><br><span class="line">    s=n+<span class="number">1</span>,t=n+<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(res[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">add</span>(s,i,res[i]);</span><br><span class="line">            num+=res[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">add</span>(i,t,-res[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">add</span>(t0,s0,inf);</span><br><span class="line">    <span class="type">int</span> flow,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>())&#123;</span><br><span class="line">        <span class="keyword">while</span>(flow=<span class="built_in">dinic</span>(s,inf)) cnt+=flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt!=num)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;please go home to sleep&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s=s0,t=t0;</span><br><span class="line">    ans=edge[tot];</span><br><span class="line">    edge[tot]=edge[tot<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>())&#123;</span><br><span class="line">        <span class="keyword">while</span>(flow=<span class="built_in">dinic</span>(s,inf)) ans+=flow;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、有源汇上下界网络最小流"><a href="#四、有源汇上下界网络最小流" class="headerlink" title="四、有源汇上下界网络最小流"></a>四、有源汇上下界网络最小流</h1><blockquote><p>   <strong>有源汇上下界网络最小流</strong>&emsp; 给定 $n$ 个点，$m$ 条边，每条边 $e$ 有一个流量下界 $l_e$ 和流量上界 $r_e$，给定源点 $s$ 和汇点 $t$，求网络中的最小流，使得在所有点满足流量平衡条件的前提下，所有边满足流量限制。</p></blockquote><p>与一般网络流不同，因为每条边添加了下界限制，所以网络最小流不一定为 $0$，另需算法计算。</p><p>这个算法与上节大致类似，唯一不同在于：在残量网图中，进行源点为 $t$，汇点为 $s$ 的最大流算法。答案就是可行流大小减去上述计算的最大流大小。</p><p>这个操作实际上是通过反向网络的最大值尽可能大地消去网络可行流，求出最小流。</p><p>模板题 <a href="https://loj.ac/p/117">LOJ #117. 有源汇有上下界最小流</a>，参考代码如下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 500005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="type">int</span> n,m,s,t,res[MAXN],ans;</span><br><span class="line"><span class="type">int</span> head[MAXN],nxt[MAXN],to[MAXN],edge[MAXN],tot=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> now[MAXN],d[MAXN];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y,l,r;</span><br><span class="line">&#125;e[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">    to[++tot]=y,edge[tot]=w,nxt[tot]=head[x],head[x]=tot;</span><br><span class="line">    to[++tot]=x,edge[tot]=<span class="number">0</span>,nxt[tot]=head[y],head[y]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="built_in">sizeof</span>(d));</span><br><span class="line">    d[s]=<span class="number">1</span>;</span><br><span class="line">    now[s]=head[s];</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">            <span class="type">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span>(edge[i]&amp;&amp;!d[v])&#123;</span><br><span class="line">                d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">                now[v]=head[v];</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">                <span class="keyword">if</span>(v==t) flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t) <span class="keyword">return</span> flow;</span><br><span class="line">    <span class="type">int</span> rest=flow;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=now[u];i;i=nxt[i],now[u]=i)&#123;</span><br><span class="line">        <span class="type">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(edge[i]&amp;&amp;d[v]==d[u]+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="built_in">dinic</span>(v,<span class="built_in">min</span>(edge[i],rest));</span><br><span class="line">            <span class="keyword">if</span>(!k) d[v]=<span class="number">0</span>;</span><br><span class="line">            edge[i]-=k;</span><br><span class="line">            edge[i^<span class="number">1</span>]+=k;</span><br><span class="line">            rest-=k;</span><br><span class="line">            <span class="keyword">if</span>(!rest) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow-rest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> s0,t0;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s0&gt;&gt;t0;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;e[i].x&gt;&gt;e[i].y&gt;&gt;e[i].l&gt;&gt;e[i].r;</span><br><span class="line">        res[e[i].x]-=e[i].l;</span><br><span class="line">        res[e[i].y]+=e[i].l;</span><br><span class="line">        <span class="built_in">add</span>(e[i].x,e[i].y,e[i].r-e[i].l);</span><br><span class="line">    &#125;</span><br><span class="line">    s=n+<span class="number">1</span>,t=n+<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(res[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">add</span>(s,i,res[i]);</span><br><span class="line">            num+=res[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">add</span>(i,t,-res[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">add</span>(t0,s0,inf);</span><br><span class="line">    <span class="type">int</span> flow,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>())&#123;</span><br><span class="line">        <span class="keyword">while</span>(flow=<span class="built_in">dinic</span>(s,inf)) cnt+=flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt!=num)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;please go home to sleep&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s=t0,t=s0;</span><br><span class="line">    ans=edge[tot];</span><br><span class="line">    edge[tot]=edge[tot<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>())&#123;</span><br><span class="line">        <span class="keyword">while</span>(flow=<span class="built_in">dinic</span>(s,inf)) ans-=flow;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、无源汇上下界网络最小费用可行流"><a href="#五、无源汇上下界网络最小费用可行流" class="headerlink" title="五、无源汇上下界网络最小费用可行流"></a>五、无源汇上下界网络最小费用可行流</h1><blockquote><p>   <strong>无源汇上下界网络最小费用可行流</strong>&emsp; 给定 $n$ 个点，$m$ 条边，每条边 $e$ 有一个流量下界 $l_e$ 、流量上界 $r_e$，和单位流量花费 $c_e$，求一种花费最小的可行方案使得在所有点满足流量平衡条件的前提下，所有边满足流量限制。</p></blockquote><p>与无源汇上下界网络可行流算法类似。唯一不同点在于将最大流算法替换为费用流算法。</p><p>需要注意的是，与超级源点与超级汇点连的边的费用为 $0$。</p>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多项式乘法与快速傅里叶变换(FFT)</title>
      <link href="/post/a12cc0ec4a59.html"/>
      <url>/post/a12cc0ec4a59.html</url>
      
        <content type="html"><![CDATA[<p>多项式乘法与快速傅里叶变换(FFT)</p><h1 id="一、前置知识"><a href="#一、前置知识" class="headerlink" title="一、前置知识"></a>一、前置知识</h1><p>本节介绍多项式前置知识、复数及单位根的相关内容。</p><h2 id="1-1-emsp-多项式"><a href="#1-1-emsp-多项式" class="headerlink" title="1.1 &emsp; 多项式"></a>1.1 &emsp; 多项式</h2><p>设 $A(x)$ 为一个 $n$ 次多项式，则可以表示为</p><script type="math/tex; mode=display">A(x)=\sum\limits_{i=0}^n a_ix^i</script><p>其中，$a_i$ 为多项式第 $i$ 项的系数。</p><p>一个多项式在 $x_0$ 处的取值 $A(x_0)$ 为其在 $x_0$ 上的一个<strong>点值</strong>。</p><p>一个 $n$ 次多项式可以用 $n+1$ 个点值表示出来。由 $n+1$ 个对应位置上的点值能<strong>唯一表示一个多项式</strong>。</p><p>形式化地，一个多项式可以由 $n+1$ 个点 $(x_i,y_i)$ 唯一确定，其中，$y_i=\sum\limits_{j=0}^n a_jx_i^j$。</p><h2 id="1-2-emsp-复数"><a href="#1-2-emsp-复数" class="headerlink" title="1.2 &emsp; 复数"></a>1.2 &emsp; 复数</h2><p>设 $a,b\in \mathbf R$，令 $i^2=-1$，称形如 $a+bi$ 的数为<strong>复数</strong>。其中，称 $a$ 为复数的<strong>实部</strong>，$b$ 为复数的<strong>虚部</strong>。$a=0$ 的数称为<strong>纯虚数</strong>。</p><p>在二维平面中，用横坐标表示实部，用纵坐标表示虚部，这样的平面为<strong>复平面</strong>。在复平面中，对于复数 $a+bi$，令其坐标为 $(a,b)$，定义其<strong>模长</strong>为 $r=\sqrt{a^2+b^2}$，即该点到坐标原点的距离。称 $\theta$ 表示该连线与 $x$ 轴非负半轴的正夹角为<strong>辐角</strong>，不难发现，一个复数可以用有序数对 $(\theta,r)$ 唯一表示。</p><p>称圆心在原点，半径为 $1$ 的圆为<strong>单位圆</strong>，则单位圆上的复数可以唯一表示为 $(\cos\theta,\sin\theta)$，其中 $\theta$ 为辐角。</p><p><strong>复数的加法</strong> &emsp; 对于两个复数 $x=a+bi$ 与 $y=c+di$，定义 $x+y=(a+c)+(b+d)i$。</p><p><strong>复数的乘法</strong> &emsp; 对于两个复数 $x=a+bi$ 与 $y=c+di$，定义 $xy=(a+bi)(c+di)=(ac-bd)+(bc+ad)i$。其几何意义为辐角相加，模长相乘。</p><p>在 C++ 中给出了复数的标准库 <code>&lt;complex&gt;</code>，通过声明 <code>#include&lt;complex&gt;</code> 引入头文件，通过 <code>complex&lt;_type&gt; a;</code> 声明一个实部虚部为 <code>_type</code> 类型的复数。该元素分别有两个值，即 <code>a=&#123;_real,_imag&#125;</code>。其中，<code>_real</code> 值为该复数的<strong>实部</strong>，<code>_imag</code> 值为复数的<strong>虚部</strong>。通过调用 <code>a.real()</code> 与 <code>a.imag()</code> 分别访问该复数的实部与虚部。</p><h2 id="1-3-emsp-单位根"><a href="#1-3-emsp-单位根" class="headerlink" title="1.3 &emsp; 单位根"></a>1.3 &emsp; 单位根</h2><p>对于是 $2$ 的正整数幂次的整数 $n$，记单位辐角为 $\frac{2\pi} n$，定义 $\omega_n^k$ 表示一个模长为 $1$，辐角为 $\frac{2k\pi}n$ 的复数，其坐标为 $(\cos\frac{2k\pi}n,\sin\frac{2k\pi}n)$​。</p><p>单位根有以下性质：</p><ul><li>$\omega_{n}^{k}=\cos\frac{2k\pi}n+i\sin\frac{2k\pi}n$。根据定义可知。</li><li>$\omega_{n}^{k+n}=\omega_{n}^{k}$。相当于辐角多转 $2\pi$，根据诱导公式可知三角函数值相等。</li><li>$\omega_{2n}^{2k}=\omega_{n}^{k}$。根据定义可知。</li><li>$\omega_{n}^{k+\frac n2}=-\omega_{n}^{k}$，相当于辐角多转 $\pi$​，根据诱导公式可知三角函数值为相反数。</li><li>$(\omega_{n}^{k})^m=\omega_{n}^{mk}$，可以由复数乘法的几何意义推得。</li></ul><h1 id="二、快速傅里叶变换-FFT"><a href="#二、快速傅里叶变换-FFT" class="headerlink" title="二、快速傅里叶变换(FFT)"></a>二、快速傅里叶变换(FFT)</h1><p><strong>接下来只讨论多项式项数 $n$ 为 $2$ 的正整数幂次的多项式函数。</strong></p><p>对于 $n$ 项多项式函数 $A(x)=\sum\limits_{i=0}^{n-1} a_ix^i$，定义向量 $(a_0,a_1,\cdots,a_{n-1})$ 为其系数。按照每项次数进行奇偶分类，有</p><script type="math/tex; mode=display">A(x)=(a_0+a_2x^2+a_4x^4+\cdots+a_{n-2}x^{n-2})+x(a_1+a_3x^3+\cdots+a_{n-1}x^{n-1})</script><p>分别定义</p><script type="math/tex; mode=display">\begin{aligned}A_1(x)&=a_0+a_2x+a_4x^2+\cdots+a_{n-2}x^{\frac n 2 -1} \\A_2(x)&=a_1+a_3x+a_5x^2+\cdots+a_{n-1}x^{\frac n 2 -1}\end{aligned}</script><p>不难有</p><script type="math/tex; mode=display">A(x)=A_1(x^2)+xA_2(x^2)</script><p>分别求其在 $\omega_{n}^{k}(0\le k &lt;\frac n2)$ 上的点值，有</p><script type="math/tex; mode=display">\begin{aligned}A(\omega_{n}^{k})&=A_1(\omega_{n}^{2k})+\omega_{n}^{k}A_2(\omega_{n}^{2k}) \\&=A_1(\omega_{n/2}^{k})+\omega_{n}^{k}A_2(\omega_{n/2}^{k})\end{aligned}\tag 1</script><p>与</p><script type="math/tex; mode=display">\begin{aligned}A(\omega_{n}^{k+n/2})&=A_1(\omega_{n}^{2k+n})+\omega_{n}^{k+n/2}A_2(\omega_{n}^{2k+n}) \\&=A_1(\omega_{n/2}^{k})-\omega_{n}^{k}A_2(\omega_{n/2}^{k})\end{aligned}\tag 2</script><p>发现上两式的形式类似，而我们将问题从 $n$ 的范围递归地划分到 $\frac n 2$ 的范围内。这帮助我们在 $O(n\log n)$ 的时间复杂度内求出 $n$ 个点的点值，这 $n$ 个点为 $\omega_{n-1}^{0}\sim \omega_{n-1}^{n-1}$。</p><p>上述过程称为<strong>快速傅里叶变换</strong>。</p><p>这时候我们已经可以通过递归的办法实现，但由于递归实现常数较大，下面介绍迭代实现的办法。</p><p>因为每一次递归都要奇偶分组，下图展示的原始系数数列下标与分组后的序列下标的关系。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=TZWVkjBu" alt="1101696-20180212074250859-1560811086.png" style="zoom: 80%;" /></p><p>发现后序列的二进制表示是原序列的二进制表示的反串（高低位颠倒）。我们可以按照这个性质对系数数列重新排序后迭代地计算。</p><p>即 $trans_i$ 表示后序列第 $i$ 个位置上对应的原序列下标，可以通过 $trans_i=trans_{\lfloor n/2\rfloor}\times 2+(i\bmod 2)^{n-1}$ 得到。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typedef complex&lt;double&gt; cd;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FFT</span><span class="params">(cd *a)</span></span>&#123; <span class="comment">// a为多项式的系数向量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;i++) <span class="keyword">if</span>(i&lt;trans[i]) <span class="built_in">swap</span>(a[i],a[trans[i]]); <span class="comment">//下标置换</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;lim;k&lt;&lt;=<span class="number">1</span>)&#123; <span class="comment">//枚举段长，合并两个 n&#x27;=k 的区间</span></span><br><span class="line">        cd e=&#123;<span class="built_in">cos</span>(pi/k),<span class="built_in">sin</span>(pi/k)&#125;; <span class="comment">//定义单位根</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;i+=k*<span class="number">2</span>)&#123;</span><br><span class="line">            cd w=&#123;<span class="number">1</span>,<span class="number">0</span>&#125;; <span class="comment">//当前的复数幂</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">                cd x=a[i+j],y=w*a[i+j+k];</span><br><span class="line">                a[i+j]=x+y;</span><br><span class="line">                a[i+j+k]=x-y;</span><br><span class="line">                w*=e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、快速傅里叶逆变换-IFFT"><a href="#三、快速傅里叶逆变换-IFFT" class="headerlink" title="三、快速傅里叶逆变换(IFFT)"></a>三、快速傅里叶逆变换(IFFT)</h1><p>对于多项式 $A(x)=\sum\limits_{i=0}^{n-1}a_ix^i$，其中 $(a_0,a_1,\cdots,a_{n-1})$ 为其系数向量。对其进行快速傅里叶变换后得到 $(y_0,y_1,y_2,\cdots,y_{n-1})$，称为其 FFT 向量。通过 FFT 向量反解出系数向量的过程是<strong>快速傅里叶逆变换(IFFT)</strong>。</p><p>考虑多项式 $B(x)=\sum\limits_{i=0}^{n-1}y_ix^i$，即系数为 FFT 向量的新多项式。对于其在 $\omega_{n}^{-k}$ 处的点值</p><script type="math/tex; mode=display">c_k=\sum\limits_{i=0}^{n-1}y_i(\omega_{n}^{-k})^i</script><p>我们试图找到 $c_k$ 与 $a_k$ 之间的关系，则可反解出 $a_k$。对上面式子进行求解：</p><script type="math/tex; mode=display">\begin{aligned}c_k&=\sum_{i=0}^{n-1}y_i\left(\omega_{n}^{-k} \right)^i \\&=\sum_{i=0}^{n-1}\left(\sum_{j=0}^{n-1}a_j(\omega_{n}^{i})^j \right)\left(\omega_{n}^{-k} \right)^i \\&=\sum_{i=0}^{n-1}\sum_{j=0}^{n-1}a_j\left(\omega_{n}^{j} \right)^i\left(\omega_{n}^{-k} \right)^i \\&=\sum_{i=0}^{n-1}\sum_{j=0}^{n-1}a_j\left(\omega_{n}^{j-k} \right)^i \\&=\sum_{j=0}^{n-1}a_j\left(\sum_{i=0}^{n-1}\left(\omega_{n}^{j-k} \right)^i \right)\end{aligned}\tag 3</script><p>令 $S(x)=\sum\limits_{i=0}^{n-1}x^i$，有</p><script type="math/tex; mode=display">\begin{aligned}S(\omega_{n}^{k})&=1+\omega_{n}^{k}+(\omega_{n}^{k})^2+\cdots+(\omega_{n}^{k})^{n-1} \\\omega_{n}^{k}S(\omega_{n}^{k})&=\omega_{n}^{k}+(\omega_{n}^{k})^2+(\omega_{n}^{k})^2+\cdots+(\omega_{n}^{k})^n\end{aligned}</script><p>两式相减得到</p><script type="math/tex; mode=display">S(\omega_{n}^{k})=\dfrac{(\omega_{n}^{k})^n-1}{\omega_{n}^{k}-1}=\dfrac{1-1}{\omega_{n}^{k}-1}</script><p>当 $\omega_{n}^{k}\not=1$，即 $k\not=0$ 时，$S(\omega_{n}^{k})=0$；</p><p>当 $\omega_{n}^{k}=1$，即 $k=0$ 时，根据定义有 $S(\omega_{n}^{k})=n$。</p><p>对于 $(3)$ 式，用 $S(\omega_{n}^{j-k})$ 表示 $\sum\limits_{i=0}^{n-1}(\omega_{n}^{j-k})^i$，因为其在 $\omega_{n}^{0}$ 处才有值，所以</p><script type="math/tex; mode=display">\begin{aligned}c_k&=\sum_{j=0}^{n-1}a_jS(\omega_{n}^{j-k}) \\&=na_k\end{aligned}</script><p>即</p><script type="math/tex; mode=display">a_k=\dfrac {c_k} n\tag 4</script><p>这样，我们再次利用 FFT 求出多项式 $B(x)$ 在 $\omega_{n}^{-k}$ 上的点值 $c_k$，可以反解出 $a_k$，时间复杂度 $O(n\log n)$。</p><p>不难发现 IFFT 与 FFT 有许多相同之处，并且需要利用 FFT 求出点值 $c_k$，于是求解 IFFT 的时候直接更改 $\omega_{n}^{k}$ 为 $\omega_{n}^{-k}$ 即可利用 FFT 求解出 $c_k$，再除以 $n$ 得到 $a_k$。</p><h1 id="四、多项式乘法"><a href="#四、多项式乘法" class="headerlink" title="四、多项式乘法"></a>四、多项式乘法</h1><p>对于两个多项式 $A(x)=\sum\limits_{i=0}^n a_ix^i$ 和 $B(x)=\sum\limits_{i=0}^m b_ix^i$，定义<strong>多项式乘法</strong> $C(x)=A(x)\times B(x)$ 为</p><script type="math/tex; mode=display">c_{i}=\sum_{j=0}^{i}a_jb_{i-j}</script><p>其中 $c_i$ 为多项式 $C(x)$ 的第 $i$ 项系数。所得的多项式 $C(x)$ 是一个 $n+m$ 次多项式，共有 $n+m+1$ 项。</p><p>朴素的多项式乘法时间复杂度为 $O(n^2)$ 级别，利用 FFT 可以在 $O(n\log n)$ 的复杂度内求解，大致思路如下图所示。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=QFtPBYKS" alt=""></p><p>算法流程如下：</p><ol><li>分别对 $A(x),B(x)$ 多项式求出其在 $\omega_{n}^{k}$ 处的点值，利用 FFT 做到时间复杂度 $O(n\log n)$；</li><li>每个位置上的点值对应相乘，所得点值就是多项式 $C(x)$ 在对应位置上的点值；</li><li>根据点值利用 IFFT 反解出 $c_k$，时间复杂度 $O(n\log n)$。</li></ol><p>关键点在于将系数表示转换为点值表示，这样在对应位置上的点值只与当前位置有关，做到了位置分离，进而便于求解。</p><p>需要注意的是，在求解 FFT 与 IFFT 中，多项式项数 $n$ 需要是 $2$ 的<strong>正整数次幂</strong>，这要求我们在计算的时候需要将下标上届扩展到大于 $n+m$ 的 $2$ 的幂次。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Luogu P3803 【模板】多项式乘法（FFT）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 4000005</span></span><br><span class="line"><span class="keyword">typedef</span> complex&lt;<span class="type">double</span>&gt; cd;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.</span>);</span><br><span class="line"><span class="type">int</span> n,m,lim,trans[MAXN];</span><br><span class="line">cd a[MAXN],b[MAXN],c[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FFT</span><span class="params">(cd *a,<span class="type">int</span> op)</span></span>&#123; <span class="comment">//通过添加系数 op 将 FFT 与 IFFT 的前半部分合二为一</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;i++) <span class="keyword">if</span>(i&lt;trans[i]) <span class="built_in">swap</span>(a[i],a[trans[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;lim;k&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        cd e=&#123;<span class="built_in">cos</span>(pi/k),<span class="built_in">sin</span>(pi/k)*op&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;i+=k*<span class="number">2</span>)&#123;</span><br><span class="line">            cd w=&#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">                cd x=a[i+j],y=w*a[i+j+k];</span><br><span class="line">                a[i+j]=x+y;</span><br><span class="line">                a[i+j+k]=x-y;</span><br><span class="line">                w*=e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> w=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)) ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;</span><br><span class="line">        w=w*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=m;i++) cin&gt;&gt;b[i];</span><br><span class="line">    <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">    lim=<span class="number">1</span>;<span class="keyword">while</span>(lim&lt;=n+m) lim&lt;&lt;=<span class="number">1</span>,len++; <span class="comment">//扩展 lim 到 2 的幂次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;i++) trans[i]=((trans[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(len<span class="number">-1</span>)));</span><br><span class="line">    <span class="built_in">FFT</span>(a,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">FFT</span>(b,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;i++) c[i]=a[i]*b[i];</span><br><span class="line">    <span class="built_in">FFT</span>(c,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;i++) c[i]/=lim; <span class="comment">// IFFT 的最后一步</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n+m;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,<span class="built_in">int</span>(c[i].<span class="built_in">real</span>()+<span class="number">0.5</span>)); <span class="comment">// 避免精度误差</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三角恒等变换</title>
      <link href="/post/b58f72002ca0.html"/>
      <url>/post/b58f72002ca0.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>微积分学习笔记 - 05 三角恒等变换</p><p>进入 <a href="/categories/微积分学习笔记/">传送门</a>，阅读刊载在专栏《微积分学习笔记》下的全部文章。</p></blockquote><h1 id="九、三角恒等变换"><a href="#九、三角恒等变换" class="headerlink" title="九、三角恒等变换"></a>九、三角恒等变换</h1><p>本节作为数学基础，为后面章节做铺垫且<strong>与微积分暂时无关</strong>。三角公式只涉及三个三角函数 $\sin,\cos,\tan$，剩余三个三角函数 $\cot,\sec,\csc$ 的公式可自行扩展，因不常用而略去。</p><p>本节公式大多为高一内容，稍作补充完善。基本公式不作证明，拓展内容部分有公式证明。</p><h2 id="9-1-emsp-和角公式"><a href="#9-1-emsp-和角公式" class="headerlink" title="9.1 &emsp; 和角公式"></a>9.1 &emsp; 和角公式</h2><p>下面给出三角函数的和角公式。</p><p><strong>和角公式</strong> &emsp; 给定两角 $A,B$，则有：</p><script type="math/tex; mode=display">\begin{aligned}\sin(A+B)&=\sin(A)\cos(B)+\cos(A)\sin(B)\\\cos(A+B)&=\cos(A)\cos(B)-\sin(A)\sin(B)\\\tan(A+B)&=\dfrac{\tan(A)+\tan(B)}{1-\tan(A)\tan(B)}\end{aligned}</script><h2 id="9-2-emsp-差角公式"><a href="#9-2-emsp-差角公式" class="headerlink" title="9.2 &emsp; 差角公式"></a>9.2 &emsp; 差角公式</h2><p>下面给出三角函数的差角公式。</p><p><strong>差角公式</strong> &emsp; 给定两角 $A,B$，则有：</p><script type="math/tex; mode=display">\begin{aligned}\sin(A-B)&=\sin(A)\cos(B)-\cos(A)\sin(B)\\\cos(A-B)&=\cos(A)\cos(B)+\sin(A)\sin(B)\\\tan(A-B)&=\dfrac{\tan(A)-\tan(B)}{1+\tan(A)\tan(B)}\end{aligned}</script><h2 id="9-3-emsp-倍角公式"><a href="#9-3-emsp-倍角公式" class="headerlink" title="9.3 &emsp; 倍角公式"></a>9.3 &emsp; 倍角公式</h2><p>下面给出三角函数的倍角公式。</p><p><strong>倍角公式</strong> &emsp; 给定角 $A$，则有：</p><script type="math/tex; mode=display">\begin{aligned}\sin(2A)&=2\sin(A)\cos(A) \\\cos(2A)&=\cos^2(A)-\sin^2(A)=2\cos^2(A)-1=1-2\sin^2(A) \\\tan(2A)&=\dfrac{2\tan(A)}{1-\tan^2(A)}\end{aligned}</script><p>上述公式可直接由和角公式推得。</p><h2 id="9-4-emsp-降幂公式"><a href="#9-4-emsp-降幂公式" class="headerlink" title="9.4 &emsp; 降幂公式"></a>9.4 &emsp; 降幂公式</h2><p>下面给出三角函数的降幂公式。</p><p><strong>降幂公式</strong> &emsp; 给定角 $A$，则有：</p><script type="math/tex; mode=display">\begin{aligned}    \sin(A)\cos(A)&=\dfrac12\sin(2A)\\    \sin^2(A)&=\dfrac{1-\cos(2A)}{2} \\    \cos^2(A)&=\dfrac{1+\cos(2A)}{2}\end{aligned}</script><p>降幂公式由正弦函数和余弦函数的倍角公式推得。</p><h2 id="9-5-emsp-辅助角公式"><a href="#9-5-emsp-辅助角公式" class="headerlink" title="9.5 &emsp; 辅助角公式"></a>9.5 &emsp; 辅助角公式</h2><p>下面给出三角函数的辅助角公式。</p><p><strong>辅助角公式</strong> &emsp; 给定角 $\alpha$，实数 $a,b$ 为常数，则有：</p><script type="math/tex; mode=display">a\sin\alpha+b\cos\alpha=\sqrt{a^2+b^2}\sin(\alpha+\varphi)</script><p>其中，$\tan\varphi=\dfrac b a$。</p><blockquote><p>  <strong>证明</strong> &emsp; 将原式进行如下变形：</p><script type="math/tex; mode=display">  \begin{aligned}  a\sin\alpha+b\cos\alpha&=\sqrt{a^2+b^2}(\sin\alpha \cdot\dfrac{a}{\sqrt{a^2+b^2}}+\cos\alpha\cdot\dfrac{b}{\sqrt{a^2+b^2}}) \\  &=\sqrt{a^2+b^2}(\sin \alpha \cdot \cos \varphi+\cos\alpha\cdot \sin\varphi) \\  &=\sqrt{a^2+b^2}\sin(\alpha+\varphi)  \end{aligned}</script><p>  其中 $\varphi$ 满足 $\tan\varphi=\dfrac b a,\varphi\in[-\pi,\pi)$。</p><p>  <strong>证毕。</strong></p></blockquote><h2 id="9-6-emsp-万能公式"><a href="#9-6-emsp-万能公式" class="headerlink" title="9.6 &emsp; 万能公式"></a>9.6 &emsp; 万能公式</h2><p>下面给出三角函数万能公式，<del>很遗憾没有找到更加文雅一点的名字</del>。</p><p><strong>万能公式</strong> &emsp; 给定角 $\alpha$，记 $t=\tan \dfrac{\alpha}2$，则有：</p><script type="math/tex; mode=display">\begin{aligned}\sin\alpha &=\dfrac{2t}{1+t^2}\\\cos\alpha &=\dfrac{1-t^2}{1+t^2}\\\tan\alpha &=\dfrac{2t}{1-t^2}\end{aligned}</script><blockquote><p>  <strong>证明</strong> &emsp; 令 $t=\tan \dfrac \alpha 2$，则根据二倍角公式有</p><script type="math/tex; mode=display">  \tan \alpha = \dfrac{2\tan \dfrac \alpha 2}{1-\tan ^2 \dfrac \alpha 2}=\dfrac {2t}{1-t^2}</script><p>  根据三角函数几何意义，令一点坐标为 $(1-t^2,2t)$，则该点到原点的距离 $r=1+t^2$，显然有</p><script type="math/tex; mode=display">  \sin \alpha =\dfrac{2t}{1+t^2}\quad ,\quad \cos \alpha =\dfrac{1-t^2}{1+t^2}</script><p>  <strong>证毕</strong>。</p></blockquote><h2 id="9-7-emsp-和差化积公式"><a href="#9-7-emsp-和差化积公式" class="headerlink" title="9.7 &emsp; 和差化积公式"></a>9.7 &emsp; 和差化积公式</h2><p>下面给出三角函数的和差化积公式。</p><p><strong>和差化积公式</strong> &emsp; 给定角 $\alpha$ 与 $\beta$，则有：</p><script type="math/tex; mode=display">\begin{aligned}\sin\alpha +\sin\beta&=2\sin\dfrac{\alpha +\beta} 2\cos \dfrac{\alpha -\beta} 2 \\\sin\alpha -\sin\beta&=2\cos\dfrac{\alpha +\beta} 2\sin \dfrac{\alpha -\beta} 2 \\\cos\alpha +\cos\beta&=2\cos\dfrac{\alpha +\beta} 2\cos \dfrac{\alpha -\beta} 2 \\\cos\alpha -\cos\beta&=-2\sin\dfrac{\alpha+\beta} 2\sin \dfrac{\alpha -\beta} 2\end{aligned}</script><p>上面四个公式可以由倍角公式推得，证明不再赘述。</p><h2 id="9-8-emsp-积化和差公式"><a href="#9-8-emsp-积化和差公式" class="headerlink" title="9.8 &emsp; 积化和差公式"></a>9.8 &emsp; 积化和差公式</h2><p>下面给出三角函数的积化和差公式。</p><p><strong>积化和差公式</strong> &emsp; 给定角 $\alpha$ 与 $\beta$，则有：</p><script type="math/tex; mode=display">\begin{aligned}\sin\alpha\cos\beta&=\dfrac 1 2[\sin(\alpha+\beta)+\sin(\alpha-\beta)] \\\cos\alpha\sin\beta&=\dfrac 1 2[\sin(\alpha+\beta)-\sin(\alpha-\beta)] \\\cos\alpha\cos\beta&=\dfrac 1 2[\cos(\alpha+\beta)+\cos(\alpha-\beta)] \\\sin\alpha\cos\beta&=-\dfrac 1 2[\cos(\alpha+\beta)-\cos(\alpha-\beta)] \\\end{aligned}</script><p>上面四个公式可以由和角公式与差角公式推得，证明不再赘述。</p>]]></content>
      
      
      <categories>
          
          <category> 微积分学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二项式反演</title>
      <link href="/post/169f0aee837e.html"/>
      <url>/post/169f0aee837e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>  组合数学学习笔记 02 二项式反演</p><p>  进入<a href="/categories/组合数学学习笔记/">分类索引</a>，阅读该专题下的往期笔记。</p></blockquote><h1 id="二、二项式反演"><a href="#二、二项式反演" class="headerlink" title="二、二项式反演"></a>二、二项式反演</h1><h2 id="2-1-emsp-基本形式"><a href="#2-1-emsp-基本形式" class="headerlink" title="2.1 &emsp; 基本形式"></a>2.1 &emsp; 基本形式</h2><p>对于定义在域 $X$ 上的实值函数 $F(n)$ 与 $G(n)$，若由如下递推关系</p><script type="math/tex; mode=display">G(n)=\sum\limits_{i=0}^n\binom n i F(i) \tag{1}</script><p>得到 $G(n)$ 关于 $F(i)$ 的表达式，则可以通过如下的递推关系通过 $G(i)$ 反解 $F(n)$：</p><script type="math/tex; mode=display">\boxed{F(n)=\sum\limits_{i=0}^n\binom n i (-1)^{n-i} G(i) \tag{2}}</script><p>上述通过 $G$ 反解 $F$ 的过程称为<strong>二项式反演</strong>。</p><p>要证明二项式反演，下面引入两个二项式系数引理。</p><p><strong>引理 1</strong> &emsp; $\dbinom n i\dbinom i k=\dbinom n k \dbinom {n-k} {i-k}$。</p><blockquote><p>  <strong>证明</strong> &emsp; 考虑组合意义：在 $n$ 个元素中先取出 $i$ 个元素，再在 $i$ 个元素中取出 $k$ 个元素的方案数，显然等价于，在 $n$ 个元素中直接取出 $k$ 个元素，而后在剩下 $n-k$ 个元素中再选出来 $i-k$ 个元素的方案数。</p></blockquote><p><strong>引理 2</strong> &emsp; $\sum\limits_{i=0}^n(-1)^{i}\dbinom n k=[n=0]$。</p><blockquote><p>  <strong>证明</strong> &emsp; 考虑二项式定理在 $x=1,y=-1$​ 时的特殊情况，有 $\sum\limits_{i=0}^n\dbinom n i (-1)^i1^{n-i}=0^n=[n=0]$。</p></blockquote><p>下面给出二项式反演的证明。</p><p><strong>证明</strong> &emsp; 将 $(1)$ 式直接代入 $(2)$式，应用引理 1，有</p><script type="math/tex; mode=display">\begin{aligned}F(n)&=\sum\limits_{i=0}^n\binom n i (-1)^{n-i}\sum\limits_{j=0}^i\binom i j F(j) \\&=\sum\limits_{i=0}^n\sum\limits_{j=0}^i\binom n i \binom i j (-1)^{n-i}F(j)\\&=\sum\limits_{i=0}^n\sum\limits_{j=0}^i\binom n j \binom {n-j} {i-j} (-1)^{n-i}F(j)\\&=\sum\limits_{j=0}^n\binom n j F(j)\sum_{i=j}^n(-1)^{n-i}\binom {n-j} {i-j}\end{aligned}</script><p>令 $t=i-j$，则 $i=t+j$，应用引理 2，继续推上面的式子，有</p><script type="math/tex; mode=display">\begin{aligned}F(n)&=\sum\limits_{j=0}^n\binom n j F(j)\sum_{i=j}^n(-1)^{n-i}\binom {n-j} {i-j} \\&=\sum\limits_{j=0}^n\binom n j F(j)\sum\limits_{t=0}^{n-j}(-1)^{n-t-j}\binom {n-j}{t} \\&=\sum\limits_{j=0}^n\binom n j F(j)[n-j=0] \\&=\binom n n F(n) \\&=F(n)\end{aligned}</script><p><strong>证毕</strong>。</p><h2 id="2-2-emsp-第二种形式"><a href="#2-2-emsp-第二种形式" class="headerlink" title="2.2 &emsp; 第二种形式"></a>2.2 &emsp; 第二种形式</h2><p>还是对于定义在域 $X$ 上的实值函数 $F(n)$ 与 $G(n)$，若由如下递推关系</p><script type="math/tex; mode=display">G(n)=\sum\limits_{i=n}^m\binom i n F(i) \tag{3}</script><p>则可以通过下面的递推关系利用 $G(i)$ 反解 $F(n)$：</p><script type="math/tex; mode=display">\boxed{F(n)=\sum\limits_{i=n}^m\binom i n (-1)^{i-n}G(i) \tag{4}}</script><p>下面给出这种形式的证明。</p><p><strong>证明</strong> &emsp; 将 $(3)$ 式直接代入 $(4)$ 式，再次利用上述引理，有</p><script type="math/tex; mode=display">\begin{aligned}F(n)&=\sum\limits_{i=n}^m\binom i n (-1)^{i-n}\sum\limits_{j=i}^m\binom j iF(j) \\&=\sum\limits_{i=n}^m\sum\limits_{j=i}^m\binom j i \binom i n (-1)^{i-n}F(j) \\&=\sum\limits_{i=n}^m\sum\limits_{j=i}^m\binom j n \binom {j-n} {i-n} (-1)^{i-n}F(j) \\&=\sum\limits_{j=n}^m\binom j n F(j)\sum\limits_{i=n}^j\binom {j-n}{i-n}(-1)^{i-n}\end{aligned}</script><p>令 $t=i-n$，则 $i=t+n$，继续推上面的式子，有</p><script type="math/tex; mode=display">\begin{aligned}F(n)&=\sum\limits_{j=n}^m\binom j n F(j)\sum\limits_{i=n}^j\binom {j-n}{i-n}(-1)^{i-n} \\&=\sum\limits_{j=n}^m\binom j n F(j)\sum\limits_{t=0}^{j-n}(-1)^{t} \binom {j-n}{t} \\&=\sum\limits_{j=n}^m\binom j n F(j) [j-n=0] \\&=\binom n n F(n) \\&=F(n)\end{aligned}</script><p><strong>证毕</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二项式定理与二项式系数</title>
      <link href="/post/25bc084a1f5a.html"/>
      <url>/post/25bc084a1f5a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>   组合数学学习笔记 01 二项式定理与二项式系数</p><p>  进入<a href="/categories/组合数学学习笔记/">分类索引</a>，阅读该专题下的往期笔记。</p></blockquote><p>本章节介绍二项式定理与相关推论定理，在组合数学中有重要作用。</p><h1 id="一、二项式定理与二项式系数"><a href="#一、二项式定理与二项式系数" class="headerlink" title="一、二项式定理与二项式系数"></a>一、二项式定理与二项式系数</h1><h2 id="1-1-emsp-二项式定理"><a href="#1-1-emsp-二项式定理" class="headerlink" title="1.1 &emsp; 二项式定理"></a>1.1 &emsp; 二项式定理</h2><p><strong>定理 1（二项式定理）</strong> &emsp; 设 $n$ 是正整数。对所有的 $x$ 和 $y$，有</p><script type="math/tex; mode=display">(x+y)^n=\sum\limits_{k=0}^n\binom nk x^{n-k}y^k\tag 1</script><blockquote><p><strong>证明</strong> &emsp; 考虑把 $(x+y)^n$ 展开，结果有 $2^n$ 项，每一项都可以写成 $x^{n-k}y^k$ 的形式。对于每个形式，相当于在 $n$ 个因子中选择 $k$ 个选择 $x$，故其系数为 $\binom n k$​。</p></blockquote><h2 id="1-2-emsp-组合相关推论"><a href="#1-2-emsp-组合相关推论" class="headerlink" title="1.2 &emsp; 组合相关推论"></a>1.2 &emsp; 组合相关推论</h2><p>如果对于二项式定理，取 $y=1$，则有如下特殊形式。</p><p><strong>定理 2</strong> &emsp; 设 $n$ 为正整数。对于所有的 $x$，有</p><script type="math/tex; mode=display">(1+x)^n=\sum\limits_{k=0}^n \binom n k x^k\tag{2}</script><p>证明略去。</p><p><strong>定理 3</strong> &emsp; 对于正整数 $n,k$，有</p><script type="math/tex; mode=display">k\binom n k =n\binom {n-1}{k-1}\tag{3}</script><blockquote><p><strong>证明</strong> &emsp; 如果 $k&gt;n$，则 $\binom n k=0$。否则，有</p><script type="math/tex; mode=display">k\binom n k =\dfrac{n(n-1)\cdots (n-k+1)}{k(k-1)\cdots 1}\times k=\dfrac{n(n-1)\cdots (n-k+1)}{(k-1)(k-2)\cdots 1}</script><p>而又有</p><script type="math/tex; mode=display">n\binom {n-1}{k-1}=\dfrac{(n-1)(n-2)\cdots (n-k+1)}{(k-1)(k-2)\cdots 1}\times n=\dfrac{n(n-1)\cdots (n-k+1)}{(k-1)(k-2)\cdots 1}=k\binom n k</script><p>得证。</p></blockquote><p>显然根据组合意义，有</p><script type="math/tex; mode=display">\sum\limits_{k=0}^n\binom n k=2^n\tag{4}</script><p>下面给出另一有关定理。</p><p><strong>定理 4</strong> &emsp; 对于正整数 $n&gt;1$，有如下二式成立</p><script type="math/tex; mode=display">\begin{aligned}\binom n 0 +\binom n 2 +\binom n 4 + \cdots &= 2^{n-1} \\\binom n 1 +\binom n 3 +\binom n 5 + \cdots &= 2^{n-1}\end{aligned}\tag{5}</script><blockquote><p><strong>证明</strong> &emsp; 对于二项式定理 $\sum\limits_{k=0}^n\binom n k x^{n-k}y^k$，取 $x=1,y=-1$ 时可以得到</p><script type="math/tex; mode=display">\binom n 0 -\binom n 1+\binom n 2-\cdots +(-1)^n\binom n n =0</script><p>移项可得</p><script type="math/tex; mode=display">\binom n 0+\binom n 2+\cdots =\binom n 1+\binom n 3+\cdots\</script><p>根据 $(4)$ 式可以得到上式左右两边加和为 $2^n$，故可知左右两边分别等于 $2^{n-1}$。</p><p>得证。</p></blockquote><p><strong>定理 5</strong> &emsp; 对于任意正整数 $n$，有</p><script type="math/tex; mode=display">nx(1+x)^{n-1}=\sum\limits_{k=1}^n k\binom n k x^k\tag 6</script><blockquote><p><strong>证明</strong> &emsp; 对 $(2)$ 式两边关于 $x$ 求导，得到</p><script type="math/tex; mode=display">n(1+x)^{n-1}=\sum\limits_{k=1}^nk\binom n k x^{k-1}</script><p>两边同乘 $x$ 即可得证。</p></blockquote><p>对于上述定理还有一个特殊形式，当 $x=1$ 时，有</p><script type="math/tex; mode=display">n2^{n-1}=\sum\limits_{k=1}^nk\binom nk \tag 7</script><p>如果对上述定理再同时关于 $x$ 求导，可以得到</p><script type="math/tex; mode=display">n(n+1)2^{n-2}=\sum\limits_{k=1}^n k^2\binom nk\tag 8</script><p><strong>定理 6</strong> &emsp; 关于帕斯卡三角形各行上的数字的平方和，有如下等式</p><script type="math/tex; mode=display">\sum\limits_{k=0}^n \binom nk^2=\binom {2n} n\tag 9</script><blockquote><p><strong>证明</strong> &emsp; 设 $S$ 为一个大小为 $2n$ 的集合，将其分为 $A,B$ 两个大小均为 $n$ 的不交集合。考虑选出 $S$ 的每一个 $n$ 子集，设其中元素在 $A$ 集合中的有 $k$ 个，则在 $B$ 集合中的有 $n-k$ 个，其中 $0\le k\le n$。</p><p>按照 $k$ 的大小建立 $k+1$ 个集合 $\mathscr{C}_k$，表示由包含 $k$ 个 $A$ 集合中的元素与 $n-k$ 个 $B$ 集合组成的 $n$ 子集的集合。显然有</p><script type="math/tex; mode=display">\binom {2n} n=\sum\limits_{i=0}^n | \mathscr C_i|</script><p>考虑每一个 $\mathscr C_i$ 的元素个数，其中每个 $n$ 子集包含的 $k$ 个 $A$ 中元素有 $\binom n k$ 种，$B$ 中元素有 $\binom n {n-k}$ 中，故有</p><script type="math/tex; mode=display">\sum\limits_{i=0}^n |\mathscr C_i|=\sum\limits_{i=0}^n \binom n k\binom n {n-k}=\sum\limits _{i=0}^n \binom n k^2=\binom {2n} n</script><p>得证。</p></blockquote><p><strong>定理 7</strong> &emsp; 对于正整数 $n,k$，有</p><script type="math/tex; mode=display">\binom {n+1}{k+1}=\sum\limits_{i=0}^n\binom i k</script><blockquote><p><strong>证明</strong> &emsp; 对于二项式 $\binom n k$ 不断应用基本公式 $\binom n k=\binom {n-1} k+\binom {n-1}{k-1}$，可以得到</p><script type="math/tex; mode=display">\binom nk=\binom 0k+\binom 0{k-1}+\cdots +\binom {n-2}{k-1}+\binom {n-1}{k-1}</script><p>根据 $\binom 0k=0$ 消去该项，并用 $n+1$ 取代 $n$，用 $k+1$ 取代 $k$ 得证。</p></blockquote><h2 id="1-3-emsp-二项式系数的单峰性"><a href="#1-3-emsp-二项式系数的单峰性" class="headerlink" title="1.3 &emsp; 二项式系数的单峰性"></a>1.3 &emsp; 二项式系数的单峰性</h2><p>通过考察帕斯卡三角的某一行，不难发现单峰性</p><script type="math/tex; mode=display">\binom n1<\binom n2<\cdots <\binom nt,\binom nt>\binom n{t+1}>\cdots>\binom nn</script><p>当 $n$ 为奇数时，最大值点 $t=\lfloor\dfrac n2\rfloor$。</p><p>当 $n$ 为偶数时，有两个最大值点 $\dfrac n2$ 和 $\dfrac n2+1$。</p><h2 id="1-4-emsp-Sperner-定理"><a href="#1-4-emsp-Sperner-定理" class="headerlink" title="1.4 &emsp; Sperner 定理"></a>1.4 &emsp; Sperner 定理</h2><p>对于一个 $n$ 元素集合 $S$，定义 $S$ 的子集的集合 $\mathscr C$ 是一条<strong>链</strong>，当且仅当对于 $\mathscr C$​​ 的每一对子集，总有包含与被包含关系。</p><p>定义 $S$ 的一条<strong>最大链</strong>为元素个数最多的子集集合 $\mathscr C$。</p><p>定义 $S$ 的子集的集合 $\mathscr C$ 是一条<strong>反链</strong>，当且仅当 $\mathscr C$ 的每对元素都没有包含与被包含关系。</p><p><strong>定理 8（Sperner 定理）</strong> &emsp; 设 $S$ 为 $n$ 元素集合，则 $S$ 的一个反链上至多包含 $\dbinom n{\lfloor\frac n2\rfloor}$ 个集合。</p><blockquote><p><strong>证明</strong> &emsp; 考虑什么样的集合 $\mathscr C$ 会成为<strong>最大链</strong>。不难发现，当形如 $\mathscr C=\{\{a_1\},\{a_1,a_2\},\cdots,\{a_1,a_2,\cdots a_n\}\}$ 的时候会成为最大链，最大链长度为 $n$，其中 $a_1,a_2\cdots a_n$ 为一个 $1\sim n$ 的<strong>排列</strong>，最大链个数为 $n!$。</p><p>当我们考虑一个 $S$ 的子集 $A$ 的时候，固定 $|A|=k$ 时，发现<strong>包含集合 $A$ 的最大链的个数</strong>为</p><script type="math/tex; mode=display">k!(n-k)!</script><p>在构成的最大链中，其中有 $k!$ 个是包含于 $A$ 的集合数目，$(n-k)!$ 是包含 $A$​ 的集合数目。</p><p>同时不难发现：<strong>每条链至多能包含任意一个反链的一个成员</strong>，反证不难。</p><p>现在要求反链的最大长度，根据上述引理，可以唯一转化为求包含反链成员的不同最大链长度。</p><p>设 $\mathscr A$ 是反链，$A$ 是反链中的一个元素，$\mathscr C$ 是包含 $A$ 的最大链。设 $\beta=|\mathscr A|$ 同时等于合法的最大链 $\mathscr C$ 的个数。根据上述论证，有 $\beta\le n!$。如果 $|A|=k$，则有 $k!(n-k)!$ 个包含 $A$ 的最大链 $\mathscr C$。</p><p>设 $\alpha _k$ 是反链 $\mathscr A$ 中大小为 $k$ 的元素个数，有 $|\mathscr A|=\sum\limits_{k=0}^n \alpha_k$，于是</p><script type="math/tex; mode=display">\beta=\sum\limits_{k=0}^n \alpha_k k!(n-k)!\le n!</script><p>通过化简得到</p><script type="math/tex; mode=display">\sum\limits_{k=0}^n\dfrac{\alpha_k}{\dbinom nk}\le 1</script><p>根据二项式系数的单峰性，当 $k=\lfloor \dfrac n2 \rfloor$ 的时候 $\dbinom nk$ 最大，于是有</p><script type="math/tex; mode=display">|\mathscr A|\le \sum\limits_{k=0}^n\alpha _k\le \binom n {\lfloor \dfrac n2 \rfloor}</script><p>得证。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指数、对数、双曲函数的导数与极限</title>
      <link href="/post/cb74d1c1ba84.html"/>
      <url>/post/cb74d1c1ba84.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>微积分学习笔记 - 04 指数、对数、双曲函数的导数与极限</p><p>进入 <a href="/categories/微积分学习笔记/">传送门</a>，阅读刊载在专栏《微积分阅读笔记》下的全部文章。</p></blockquote><h1 id="六、指数函数与对数函数的导数"><a href="#六、指数函数与对数函数的导数" class="headerlink" title="六、指数函数与对数函数的导数"></a>六、指数函数与对数函数的导数</h1><p>本节通过对自然常数 $\mathrm{e}$ 的探究推出指数与对数函数的导数。请务必在阅读本节前了解指数与对数的基本运算性质。</p><h2 id="6-1-emsp-mathrm-e-的定义与相关极限"><a href="#6-1-emsp-mathrm-e-的定义与相关极限" class="headerlink" title="6.1 &emsp; $\mathrm{e}$ 的定义与相关极限"></a>6.1 &emsp; $\mathrm{e}$ 的定义与相关极限</h2><p><strong>$\mathrm{e}$ 的定义</strong> &emsp; 对于极限，定义</p><script type="math/tex; mode=display">\mathrm{e}=\lim\limits_{h\to 0^+}(1+h)^{\frac1h}</script><p>关于它的求解与证明暂时略去。通过上述极限可以推出许多性质。</p><p>考虑极限</p><script type="math/tex; mode=display">L=\lim\limits_{n\to \infty}(1+\dfrac rn)^n</script><p>令 $h=\dfrac rn$，这样 $n=\dfrac rh$，对上述极限变形，有</p><script type="math/tex; mode=display">L=\lim\limits_{h\to 0^+}(1+h)^{\frac rh}=\lim\limits_{h\to 0^+}((1+h)^{\frac 1h})^r=\mathrm{e}^r</script><p>注意此时变成了 $h\to 0^+$ 处的极限。这样，就有重要极限</p><script type="math/tex; mode=display">\boxed{\lim\limits_{n\to \infty}(1+\dfrac xn)^n=\mathrm{e}^x}\tag{1}</script><p>特殊地，当 $x=1$ 时，有</p><script type="math/tex; mode=display">\boxed{\lim\limits_{n\to \infty}(1+\dfrac 1n)^n=\mathrm{e}}</script><p>对于极限 $(1)$，令 $h=\dfrac 1n$，有</p><script type="math/tex; mode=display">\lim\limits_{h\to 0^+}(1+rh)^{\frac 1h}=\mathrm{e}^r</script><p>注意极限位置。得出另一个重要极限</p><script type="math/tex; mode=display">\boxed{\lim\limits_{h\to 0^+}(1+xh)^{\frac 1h}=\mathrm{e}^x}</script><p>特殊地，当 $x=1$ 时，有</p><script type="math/tex; mode=display">\boxed{\lim\limits_{h\to 0^+}(1+h)^{\frac 1h}=\mathrm{e}}</script><h2 id="6-2-emsp-对数函数与指数函数的导数"><a href="#6-2-emsp-对数函数与指数函数的导数" class="headerlink" title="6.2 &emsp; 对数函数与指数函数的导数"></a>6.2 &emsp; 对数函数与指数函数的导数</h2><p>使用导数的定义，令 $f(x)=\log_bx$，则有</p><script type="math/tex; mode=display">\begin{aligned}f'(x)&=\lim\limits_{h\to 0}\dfrac{f(x+h)-f(x)}{h}=\lim\limits_{h\to 0}\dfrac{\log_b(x+h)-\log _bx}h\\&=\lim\limits_{h\to 0}\dfrac 1h\log_b(\dfrac{x+h}x)\\&=\lim\limits_{h\to 0}\log_b(1+\dfrac hx)^{\frac 1h}\end{aligned}</script><p>上一节中，我们证明了</p><script type="math/tex; mode=display">\lim\limits_{h\to 0^+}(1+rh)^{\frac 1h}=\mathrm{e}^r</script><p>不妨令 $r=\dfrac 1x$，则有</p><script type="math/tex; mode=display">\begin{aligned}f'(x)&=\lim\limits_{h\to 0}\log_b(1+\dfrac hx)^{\frac 1h}=\log_b(\mathrm{e}^\frac1x)\\&=\dfrac{\ln \mathrm{e}^\frac 1x}{\ln b}\\&=\dfrac 1{x\ln b}\end{aligned}</script><p>这就证明了<strong>对数函数的导数</strong>为</p><script type="math/tex; mode=display">\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\log_bx=\dfrac 1{x\ln b}}</script><p>特殊地，自然对数的导数为</p><script type="math/tex; mode=display">\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\ln x=\dfrac 1x}</script><p>接下来推导指数函数的导数。对于指数函数 $y=a^x$，等价于 $x=\log_ay$。现在关于 $y$ 求导，有：</p><script type="math/tex; mode=display">\dfrac{\mathrm{d}x}{\mathrm{d}y}=\dfrac1{x\ln a}</script><p>根据链式求导法则，$\dfrac{\mathrm{d}x}{\mathrm{d}x}=\dfrac{\mathrm{d}y}{\mathrm{d}x}\dfrac{\mathrm{d}x}{\mathrm{d}y}=1$，可以上下颠倒得到：</p><script type="math/tex; mode=display">\dfrac{\mathrm{d}y}{\mathrm{d}x}=y\ln a=a^x\ln a</script><p>这就证明了<strong>指数函数的导数</strong>为</p><script type="math/tex; mode=display">\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}a^x=a^x\ln a}</script><p>特殊地，以自然常数为底数的指数，导数为</p><script type="math/tex; mode=display">\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\mathrm{e}^x=\mathrm{e}^x}</script><p>这是一个独特的公式。发现它的导数还是它自己。</p><h2 id="6-3-emsp-伸缩函数的导数"><a href="#6-3-emsp-伸缩函数的导数" class="headerlink" title="6.3 &emsp; 伸缩函数的导数"></a>6.3 &emsp; 伸缩函数的导数</h2><p>这里的<strong>伸缩函数</strong>，定义为：对于函数 $y=f(x)$，则其伸缩函数为 $y’=f(ax)$，其中，$a$ 为常数。</p><p>对伸缩函数求导，即 $\dfrac{\mathrm{d}}{\mathrm{d}x} f(ax)$，根据链式求导法则，令 $u=ax$，则 $y=f(u)$，有</p><script type="math/tex; mode=display">\dfrac{\mathrm{d}y}{\mathrm{d}x}=\dfrac{\mathrm{d}y}{\mathrm{d}u}\dfrac{\mathrm{d}u}{\mathrm{d}x}=af'(u)=af'(ax)</script><p>可以发现，伸缩函数的导数与原本函数的导数相比，前面多了 $a$ 的常数。</p><p>这个规律对指数对数函数、三角函数同样适用，例如，$y=\mathrm{e}^{-3x}$，则其导数为 $\dfrac{\mathrm{d}y}{\mathrm{d}x}=-3\mathrm{e}^{-3x}$。</p><h2 id="6-4-emsp-取对数求导法"><a href="#6-4-emsp-取对数求导法" class="headerlink" title="6.4 &emsp; 取对数求导法"></a>6.4 &emsp; 取对数求导法</h2><p>对于类似 $y=f(x)^{g(x)}$ 一类指数与底数均为 $x$ 的函数的导数问题，通常使用取对数求导法，具体地：</p><ul><li>对等号两边取自然对数，使指数移下来成为系数得到类似 $\ln y=g(x)\ln f(x)$ 的式子；</li><li>对等号两边进行隐函数求导，有 $\dfrac 1y\dfrac{\mathrm{d}y}{\mathrm{d}x}=\dfrac{\mathrm{d}}{\mathrm{d}x}g(x)\ln f(x)$；</li><li>对等式化简，完成求解。</li></ul><blockquote><p><strong>例子</strong> &emsp; 求解导数 $\dfrac{\mathrm{d}}{\mathrm{d}x}x^{\sin(x)}$。</p></blockquote><p>令 $y=x^{\sin(x)}$，对等式两边取对数得到 $\ln y=\sin(x)\ln x$，对隐函数求导有</p><script type="math/tex; mode=display">\dfrac 1y \dfrac{\mathrm{d}y}{\mathrm{d}x}=\cos(x)\ln x+\dfrac {\sin(x)}x</script><p>化简得到</p><script type="math/tex; mode=display">\dfrac{\mathrm{d}y}{\mathrm{d}x}x^{\sin(x)}=(\cos(x)\ln x+\dfrac {\sin(x)}x)x^{\sin(x)}</script><h1 id="七、指数函数与对数函数的极限"><a href="#七、指数函数与对数函数的极限" class="headerlink" title="七、指数函数与对数函数的极限"></a>七、指数函数与对数函数的极限</h1><p>本节将借助指数函数与对数函数的导数，求解二者在特殊位置的极限与变化率。将其变化率与其他初等函数比较，会有重要的性质。</p><h2 id="7-1-emsp-涉及-mathrm-e-的极限"><a href="#7-1-emsp-涉及-mathrm-e-的极限" class="headerlink" title="7.1 &emsp; 涉及 $\mathrm e$ 的极限"></a>7.1 &emsp; 涉及 $\mathrm e$ 的极限</h2><p>涉及 $\mathrm e$ 的极限，通常借助重要结论求解：</p><script type="math/tex; mode=display">\lim\limits_{h\to 0^+}(1+h)^{\frac 1h}=\mathrm{e}\tag{2}</script><blockquote><p><strong>例子</strong> &emsp; 求解极限 $\lim\limits_{h\to 0}(1+h^2)^{\frac1{3h^2}}$。</p></blockquote><p>容易发现，这个式子形式很像 $(2)$ 式，不妨就通过这个突破点思考。令 $x=h^2$，则原极限等价于</p><script type="math/tex; mode=display">\lim\limits_{x\to 0}(1+x^2)^{\frac 1{x}\cdot \frac 13}=\mathrm e ^{\frac 13}</script><p>便可求解。</p><h2 id="7-2-emsp-指数函数的行为"><a href="#7-2-emsp-指数函数的行为" class="headerlink" title="7.2 &emsp; 指数函数的行为"></a>7.2 &emsp; 指数函数的行为</h2><p>下面是指数函数 $y=\mathrm e^x$ 的图像。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=OEon7oi0" style="zoom:67%;" /></p><p>根据指数函数图像，不难发现指数函数 $y=a^x(a&gt;1)$ 有两个重要极限</p><script type="math/tex; mode=display">\lim\limits_{x\to \infty}a^x=\infty\quad,\quad \lim\limits_{x\to -\infty}a^x=0</script><p>当 $0&lt;a&lt;1$ 是有相反的性质</p><script type="math/tex; mode=display">\lim\limits_{x\to \infty}a^x=0\quad,\quad \lim\limits_{x\to -\infty}a^x=\infty</script><p><strong>指数函数增长迅速</strong>：对于任意多项式函数 $f(x)$，都有 $\boxed{\lim\limits_{x\to \infty}\dfrac{f(x)}{\mathrm e^x}=0}$。</p><p>下面分析指数函数在 $0$ 附近的行为。</p><p>根据函数过定点，显然有 $\lim\limits_{x\to 0}\mathrm e^x=1$。</p><p>设 $f(x)=\mathrm e^x$，其导数为 $\mathrm e^x$，在 $x=0$ 时为 $1$。换一种方式分析，根据导数定义有：</p><script type="math/tex; mode=display">\begin{aligned}\lim\limits_{h\to 0}\dfrac{\mathrm e^{x+h}+\mathrm e^x}h=\mathrm e^x\end{aligned}</script><p>在 $x\to 0$ 时有</p><script type="math/tex; mode=display">\lim\limits_{h\to 0}\dfrac{\mathrm e^h-1}h=1</script><h2 id="7-3-emsp-对数函数的行为"><a href="#7-3-emsp-对数函数的行为" class="headerlink" title="7.3 &emsp; 对数函数的行为"></a>7.3 &emsp; 对数函数的行为</h2><p>下面是对数函数 $y=\ln x$ 的图像。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=wRfD30Hf" style="zoom: 67%;" /></p><p>根据指数函数图像，不难发现指数函数 $y=\log _ax(a&gt;1)$ 有两个重要极限</p><script type="math/tex; mode=display">\lim\limits_{x\to 0^+}\log_ax=-\infty\quad,\quad \lim\limits_{x\to \infty}\log_ax=\infty</script><p>当 $0&lt;a&lt;1$ 是有相反的性质</p><script type="math/tex; mode=display">\lim\limits_{x\to 0^+}a^x=\infty\quad,\quad \lim\limits_{x\to -\infty}\log_ax=-\infty</script><p><strong>对数函数增长缓慢</strong>：对于任意多项式函数 $f(x)$，都有 $\boxed{\lim\limits_{x\to \infty}\dfrac{\ln x}{f(x)}=0}$</p><p>对于极限 $\lim\limits_{x\to 0^+}x\ln x$，令 $t=\dfrac 1x$，则有：</p><script type="math/tex; mode=display">\lim\limits_{x\to 0^+}x\ln x=\lim\limits_{t\to \infty}\dfrac 1t\ln \dfrac 1t=\lim\limits_{t\to \infty}\dfrac{-\ln t}t=0</script><p>得到结论，<strong>对数函数在 $0$ 附近增长缓慢</strong>：$\forall a&gt;0,\boxed{\lim\limits_{x\to 0^+}x^a\ln x=0}$。</p><h1 id="八、双曲函数的导数"><a href="#八、双曲函数的导数" class="headerlink" title="八、双曲函数的导数"></a>八、双曲函数的导数</h1><p>下面探究一下<strong>双曲函数</strong>。双曲函数与三角函数有比较相似的性质。</p><h2 id="8-1-emsp-双曲正弦函数与双曲余弦函数"><a href="#8-1-emsp-双曲正弦函数与双曲余弦函数" class="headerlink" title="8.1 &emsp; 双曲正弦函数与双曲余弦函数"></a>8.1 &emsp; 双曲正弦函数与双曲余弦函数</h2><p>下面给出定义：</p><ul><li><strong>双曲正弦函数</strong>：$\sinh(x)=\dfrac{\mathrm e^x-\mathrm e^{-x}}2$；</li><li><strong>双曲余弦函数</strong>：$\cosh(x)=\dfrac{\mathrm e^x+\mathrm e^{-x}}2$。</li></ul><p>会发现，$\cosh^2(x)-\sinh^2(x)=\dfrac{\mathrm e^{2x}+\mathrm e^{-2x}+2}4-\dfrac{\mathrm e^{2x}+\mathrm e^{-2x}2}4=1$，得出与三角函数很像的结论：</p><script type="math/tex; mode=display">\cosh^2(x)-\sinh^2(x)=1</script><p>接下来对两式求导：</p><script type="math/tex; mode=display">\dfrac{\mathrm{d}}{\mathrm{d}x}\sinh(x)=\dfrac{\mathrm{d}}{\mathrm{d}x}(\dfrac{\mathrm e^x-\mathrm e^{-x}}2)=\dfrac{\mathrm e^x+\mathrm e^{-x}}2=\cosh(x)</script><script type="math/tex; mode=display">\dfrac{\mathrm{d}}{\mathrm{d}x}\cosh(x)=\dfrac{\mathrm{d}}{\mathrm{d}x}(\dfrac{\mathrm e^x+\mathrm e^{-x}}2)=\dfrac{\mathrm e^x-\mathrm e^{-x}}2=\sinh(x)</script><p>发现二者互为导数，即：</p><script type="math/tex; mode=display">\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\sinh(x)=\cosh(x)}\quad,\quad \boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\cosh(x)=\sinh(x)}</script><p>下面是两函数的图像。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=kC7j0DFk" style="zoom:67%;" /></p><h2 id="8-2-emsp-其他双曲函数"><a href="#8-2-emsp-其他双曲函数" class="headerlink" title="8.2 &emsp; 其他双曲函数"></a>8.2 &emsp; 其他双曲函数</h2><p>借助双曲正弦与双曲余弦函数的定义，推出下面四种双曲函数的定义与导数：</p><ul><li><strong>双曲正切函数</strong>：$\tanh(x)=\dfrac{\sinh(x)}{\cosh(x)}=\dfrac{\mathrm e^x-\mathrm e^{-x}}{\mathrm e^x+\mathrm e^{-x}}$；</li><li><strong>双曲余切函数</strong>：$\coth(x)=\dfrac{\cosh(x)}{\sinh(x)}=\dfrac{\mathrm e^x+\mathrm e^{-x}}{\mathrm e^x-\mathrm e^{-x}}$；</li><li><strong>双曲正割函数</strong>：$\text{sech}(x)=\dfrac1{\cosh(x)}=\dfrac2{\mathrm e^x+\mathrm e^{-x}}$；</li><li><strong>双曲余割函数</strong>：$\text{csch}(x)=\dfrac1{\sinh(x)}=\dfrac2{\mathrm e^x-\mathrm e^{-x}}$。</li></ul><p>从 $\cosh^2(x)-\sinh^2(x)=1$ 可以推出：</p><script type="math/tex; mode=display">1-\tanh^2(x)=\text{sech}^2(x)</script><p>与双曲正弦与双曲正切函数类似，它们的导数为：</p><script type="math/tex; mode=display">\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\tanh(x)=\text{sech}^2(x)}\quad,\quad \boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\coth(x)=-\text{csch}^2(x)}</script><script type="math/tex; mode=display">\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\text{sech}(x)=-\text{sech}(x)\tanh(x)}\quad,\quad \boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\text{csch}(x)=-\text{csch}(x)\coth(x)}</script><p>下面是这四个函数的图像。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=O08RO95A" style="zoom:67%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 微积分学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隐函数求导</title>
      <link href="/post/daf7d27a167b.html"/>
      <url>/post/daf7d27a167b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>微积分学习笔记 - 03 隐函数求导</p><p>进入 <a href="/categories/微积分学习笔记/">传送门</a>，阅读刊载在专栏《微积分阅读笔记》下的全部文章。</p></blockquote><h1 id="五、隐函数求导"><a href="#五、隐函数求导" class="headerlink" title="五、隐函数求导"></a>五、隐函数求导</h1><p>这一节与其他节相关很少，但后面也要经常用到，所以只好单拎出来。</p><h2 id="5-1-emsp-隐函数求导"><a href="#5-1-emsp-隐函数求导" class="headerlink" title="5.1 &emsp; 隐函数求导"></a>5.1 &emsp; 隐函数求导</h2><p>考虑两个导数</p><script type="math/tex; mode=display">\dfrac{\mathrm{d}}{\mathrm{d}x}(x^2) \quad,\quad \dfrac{\mathrm{d}}{\mathrm{d}x}(y^2)</script><p>前者显然为 $2x$，但后者却不一定。这主要取决于变量 $y$ 与变量 $x$ 间的变化关系。</p><p>那怎样求它的导数呢？参考链式求导法则，变量 $x$ 的改变会导致变量 $y$ 的改变，而变量 $y$ 的改变又会导致 $y^2$ 的改变。</p><p>令 $u=y^2$，则 $\dfrac{\mathrm{d}u}{\mathrm{d}y}=2y$，则：</p><script type="math/tex; mode=display">\dfrac{\mathrm{d}}{\mathrm{d}x}(y^2)=\dfrac{\mathrm{d}u}{\mathrm{d}y}\dfrac{\mathrm{d}y}{\mathrm{d}x}=2y\dfrac{\mathrm{d}y}{\mathrm{d}x}</script><p>这就求出了它的导数。显然，若 $x$ 与 $y$ 毫不相干的时候，导数就为 $0$。</p><blockquote><p><strong>例子</strong> &emsp; 对于圆的方程 $x^2+y^2=4$，求圆上各点的切线的斜率。</p></blockquote><p>对于这个例子，因为 $y$ 并不是 $x$ 的函数，并不能直接求导，可以通过在等式两边同时加上 $\dfrac{\mathrm{d}}{\mathrm{d}x}$ 对隐函数求导，即：</p><script type="math/tex; mode=display">\begin{aligned}\dfrac{\mathrm{d}}{\mathrm{d}x}(x^2+y^2)&=\dfrac{\mathrm{d}}{\mathrm{d}x}4\\\dfrac{\mathrm{d}}{\mathrm{d}x}(x^2)+\dfrac{\mathrm{d}}{\mathrm{d}x}(y^2)&=0\\2x+2y\dfrac{\mathrm{d}y}{\mathrm{d}x}&=0\\\dfrac{\mathrm{d}y}{\mathrm{d}x}&=-\dfrac xy\end{aligned}</script><p>只需要对圆上的每个点 $(x,y)$ 对应求导即可。</p><p>对于求隐函数导数的问题，通常采用以下方法：</p><ul><li>对原方程进行简化；</li><li>对等式两边同时对一个变量求导，即同时乘上 $\dfrac{\mathrm{d}}{\mathrm{d}x}$，并化简；</li><li>若需求出曲线上某点的切线方程，则需代入对应 $x,y$ 求解。</li></ul><h2 id="5-2-emsp-隐函数求二阶导"><a href="#5-2-emsp-隐函数求二阶导" class="headerlink" title="5.2 &emsp; 隐函数求二阶导"></a>5.2 &emsp; 隐函数求二阶导</h2><p>隐函数求二阶导的方法和普通函数类似——在一阶导的基础上求导。</p><blockquote><p><strong>例子</strong> &emsp; 求函数 $2y+\sin(y)=\dfrac{x^2}\pi +1$ 的二阶导 $\dfrac{\mathrm{d}^2y}{\mathrm{d}x^2}$。</p></blockquote><p>对隐函数先求一阶导，有：</p><script type="math/tex; mode=display">2\dfrac{\mathrm{d}y}{\mathrm{d}x}+\cos(y)\dfrac{\mathrm{d}y}{\mathrm{d}x}=\dfrac{2x}\pi\tag{1}</script><p>在 $(1)$ 上进而对其求二阶导：</p><script type="math/tex; mode=display">\begin{aligned}\dfrac{\mathrm{d}}{\mathrm{d}x}(2\dfrac{\mathrm{d}y}{\mathrm{d}x})+\dfrac{\mathrm{d}}{\mathrm{d}x}(\cos(y)\dfrac{\mathrm{d}y}{\mathrm{d}x})&=\dfrac{\mathrm{d}}{\mathrm{d}x}(\dfrac{2x}\pi)\\2\dfrac{\mathrm{d}^2y}{\mathrm{d}x^2}-\sin(y)(\dfrac{\mathrm{d}y}{\mathrm{d}x})^2+\cos(y)\dfrac{\mathrm{d}^2y}{\mathrm{d}x^2}&=\dfrac2\pi\\\end{aligned}</script><p>化简得到</p><script type="math/tex; mode=display">2\dfrac{\mathrm{d}^2y}{\mathrm{d}x^2}=(\dfrac{\mathrm{d}y}{\mathrm{d}x})^2+\dfrac2\pi</script><p>下面解决 $\dfrac{\mathrm{d}y}{\mathrm{d}x}$ 的求解，根据 $(1)$ 得：</p><script type="math/tex; mode=display">\dfrac{\mathrm{d}y}{\mathrm{d}x}=\dfrac{2x}{\pi(2+\cos(y))}</script><p>代入得</p><script type="math/tex; mode=display">\begin{aligned}\dfrac{\mathrm{d}^2y}{\mathrm{d}x^2}&=\dfrac{(\dfrac{2x}{\pi(2+\cos(y))})^2+\dfrac2\pi}{2}\\&=\dfrac{2x^2}{\pi^2(2+\cos(y))^2}+\frac1\pi\end{aligned}</script>]]></content>
      
      
      <categories>
          
          <category> 微积分学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三角函数的极限和导数</title>
      <link href="/post/9b5899dde65e.html"/>
      <url>/post/9b5899dde65e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>  微积分学习笔记 - 02 三角函数的极限和导数</p><p>  进入 <a href="/categories/微积分学习笔记/">传送门</a>，阅读刊载在专栏《微积分阅读笔记》下的全部文章。</p></blockquote><h1 id="三、三角函数的极限"><a href="#三、三角函数的极限" class="headerlink" title="三、三角函数的极限"></a>三、三角函数的极限</h1><p>本节简短记录几个比较重要的三角函数极限，对后文推出三角函数的导数有重要作用。</p><h2 id="3-1-emsp-正弦函数的极限"><a href="#3-1-emsp-正弦函数的极限" class="headerlink" title="3.1 &emsp; 正弦函数的极限"></a>3.1 &emsp; 正弦函数的极限</h2><p>首先考虑一个重要极限</p><script type="math/tex; mode=display">\lim\limits_{x\to 0}\dfrac{\sin(x)}{x}</script><p>这个极限的求解将借助单位圆完成。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=4CRL3xmn" alt=""></p><p>三角形 OAC、扇形 OAB、三角形 ODB 的面积分别等于 $\dfrac{\sin(x)}{2}$，$\dfrac x 2$，$\dfrac{\tan(x)} 2$，有不等关系</p><script type="math/tex; mode=display">\sin(x)<x<\tan(x)</script><p>对于 $x&gt;0$ 的情况进一步转化可得</p><script type="math/tex; mode=display">\cos(x)<\dfrac{\sin(x)}x<1</script><p>使用三明治定理，在 $x=0$ 的位置，$\cos(x)=1$，所以得到右极限 </p><script type="math/tex; mode=display">\lim\limits_{x\to 0^+}\dfrac{\sin(x)}{x}=1</script><p>由于上述函数是奇函数，不难得到双侧极限</p><script type="math/tex; mode=display">\boxed{\lim\limits_{x\to 0}\dfrac{\sin(x)}{x}=1}</script><p>求解正弦函数的极限，通常利用正弦函数的值域特征 $-1\le \sin(x)\le 1$ 简化问题。</p><h2 id="3-2-emsp-余弦函数的极限"><a href="#3-2-emsp-余弦函数的极限" class="headerlink" title="3.2 &emsp; 余弦函数的极限"></a>3.2 &emsp; 余弦函数的极限</h2><p>显然，我们有极限</p><script type="math/tex; mode=display">\lim \limits_{x\to 0}\cos(x)=1</script><p>接下来考虑极限</p><script type="math/tex; mode=display">\lim \limits_{x\to 0}\dfrac{1-\cos(x)}{x}</script><p>尝试让分子出现 $1-\cos^2(x)$，从而出现 $\sin^2(x)$，借助正弦函数极限求解。</p><script type="math/tex; mode=display">\begin{aligned}\lim \limits_{x\to 0}\dfrac{1-\cos(x)}{x}&=\lim\limits_{x\to 0}\dfrac{1-\cos(x)}{x}\times \dfrac{1+\cos(x)}{1+\cos(x)} \\&=\lim \limits_{x\to 0}\dfrac{1-\cos^2(x)}{x(1+\cos(x))}\\&=\lim \limits_{x\to 0}\dfrac{\sin^2(x)}{x}\times \dfrac{1}{1+\cos(x)}\\&=\lim \limits_{x\to 0}\sin(x)\times \dfrac{\sin(x)}{x}\times \dfrac{1}{1+\cos(x)}\\&=0\times 1\times \dfrac{1}{1+1}\\&=0\end{aligned}</script><p>所以得到重要结论</p><script type="math/tex; mode=display">\boxed{\lim \limits_{x\to 0}\dfrac{1-\cos(x)}{x}=0}</script><p>考虑另一个极限</p><script type="math/tex; mode=display">\lim \limits_{x\to 0}\dfrac{1-\cos(x)}{x^2}</script><p>借助上面的思路，不难得到</p><script type="math/tex; mode=display">\begin{aligned}\lim \limits_{x\to 0}\dfrac{1-\cos(x)}{x^2}&=\lim \limits_{x\to 0}\dfrac{1-\cos(x)}{x^2}\times \dfrac{1+\cos(x)}{1+\cos(x)}\\&=\lim \limits_{x\to 0}\dfrac{1-\cos^2(x)}{x^2}\times \dfrac{1}{1+cos(x)}\\&=\lim \limits_{x\to 0}(\dfrac{\sin(x)}{x})^2\times \dfrac{1}{1+\cos(x)}\\&=1^2\times \dfrac{1}{1+1}\\&=\dfrac12\end{aligned}</script><h2 id="3-3-emsp-正切函数的极限"><a href="#3-3-emsp-正切函数的极限" class="headerlink" title="3.3 &emsp; 正切函数的极限"></a>3.3 &emsp; 正切函数的极限</h2><p>考虑极限</p><script type="math/tex; mode=display">\lim \limits_{x\to 0}\dfrac{\tan(x)}{x}</script><p>作变换 $\tan(x)=\dfrac{\sin(x)}{\cos(x)}$ 可得</p><script type="math/tex; mode=display">\begin{aligned}\lim \limits_{x\to 0}\dfrac{\tan(x)}{x}&=\lim \limits_{x\to 0}\dfrac{\dfrac{\sin(x)}{\cos(x)}}{x}\\&=\lim \limits_{x\to 0}\dfrac{sin(x)}{x}\times \dfrac1{cos(x)}\\&=1\times \dfrac11\\&=1\end{aligned}</script><p>这也就证明了</p><script type="math/tex; mode=display">\boxed{\lim \limits_{x\to 0}\dfrac{\tan(x)}{x}=1}</script><h1 id="四、三角函数的导数"><a href="#四、三角函数的导数" class="headerlink" title="四、三角函数的导数"></a>四、三角函数的导数</h1><p>借助第三节的推论，可以推出六种三角函数的导数。本节将对它们分别推出与证明。</p><p>下面是六种三角函数的导数对照表：</p><script type="math/tex; mode=display">\begin{array}{|c|c|}f(x)=&f'(x)=\\\sin(x)&\cos(x)\\\cos(x)&-\sin(x)\\\tan(x)&\sec^2(x)\\\cot(x)&-\csc^2(x)\\\sec(x)&\sec(x)\tan(x)\\\csc(x)&-\csc(x)\cot(x)\end{array}</script><h2 id="4-1-emsp-正弦函数的导数"><a href="#4-1-emsp-正弦函数的导数" class="headerlink" title="4.1 &emsp; 正弦函数的导数"></a>4.1 &emsp; 正弦函数的导数</h2><p>借助第三节中的两个极限</p><script type="math/tex; mode=display">\lim \limits_{h\to 0}\dfrac{\sin(h)}{h}=1\quad,\quad \lim \limits_{h\to 0}\dfrac{1-\cos(h)}{h}=0</script><p>直接使用导数定义与和角公式，令 $f(x)=\sin(x)$，推出：</p><script type="math/tex; mode=display">\begin{aligned}f'(x)&=\lim \limits_{h\to 0}\dfrac{f(x+h)-f(x)}{h}=\lim \limits_{h\to 0}\dfrac{\sin(x+h)-\sin(h)}{h}\\&=\lim \limits_{h\to 0}\dfrac{\sin(x)\cos(h)+\cos(x)\sin(h)-\sin(x)}h\\&=\lim \limits_{h\to 0}\dfrac{\sin(x)(\cos(h)-1)+\cos(x)\sin(h)}h\\&=\lim \limits_{h\to 0}(\sin(x)\times \dfrac{\cos(h)-1}h+\cos(x)\times \dfrac{\sin(h)}h)\\&=\sin(x)\times 0+\cos(x)\times 1\\&=\cos(x)\end{aligned}</script><p>得出其导数为</p><script type="math/tex; mode=display">\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\sin(x)=\cos(x)}</script><h2 id="4-2-emsp-余弦函数的导数"><a href="#4-2-emsp-余弦函数的导数" class="headerlink" title="4.2 &emsp; 余弦函数的导数"></a>4.2 &emsp; 余弦函数的导数</h2><p>令 $f(x)=\cos(x)$，借助和角公式可得得到：</p><script type="math/tex; mode=display">\begin{aligned}f'(x)&=\lim \limits_{h\to 0}\dfrac{f(x+h)-f(x)}h=\lim \limits_{h\to 0}\dfrac{\cos(x+h)-\cos(x)}h\\&=\lim \limits_{h\to 0}\dfrac{\cos(x)\cos(h)-\sin(x)\sin(h)-\cos(x)}h\\&=\lim \limits_{h\to 0}\cos(x)\times \dfrac{\cos(h)-1}h-\sin(x)\times \dfrac{\sin(h)}h\\&=\cos(x)\times 0-\sin(x)\times 1\\&=-\sin(x)\end{aligned}</script><p>得出其导数为</p><script type="math/tex; mode=display">\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\cos(x)=-\sin(x)}</script><h2 id="4-3-emsp-正切函数的导数"><a href="#4-3-emsp-正切函数的导数" class="headerlink" title="4.3 &emsp; 正切函数的导数"></a>4.3 &emsp; 正切函数的导数</h2><p>令 $y=\tan(x)=\dfrac{\sin(x)}{\cos(x)}$，再令 $u=\sin(x),v=\cos(x)$，使用商法则得到：</p><script type="math/tex; mode=display">\begin{aligned}\dfrac{\mathrm{d}y}{\mathrm{d}x}&=\dfrac{v\dfrac{\mathrm{d}u}{\mathrm{d}x}-u\dfrac{\mathrm{d}v}{\mathrm{d}x}}{v^2}=\dfrac{\cos(x)\cos(x)-\sin(x)(-\sin(x))}{\cos^2(x)}\\&=\dfrac{1}{\cos^2(x)}\\&=\sec^2(x)\end{aligned}</script><p>得出其导数为</p><script type="math/tex; mode=display">\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\tan(x)=\sec^2(x)}</script><h2 id="4-4-emsp-余切函数的导数"><a href="#4-4-emsp-余切函数的导数" class="headerlink" title="4.4 &emsp; 余切函数的导数"></a>4.4 &emsp; 余切函数的导数</h2><p>令 $y=\cot(x)=\dfrac{\cos(x)}{\sin(x)}$，再令 $u=\cos(x),v=\sin(x)$，使用商法则得到：</p><script type="math/tex; mode=display">\begin{aligned}\dfrac{\mathrm{d}y}{\mathrm{d}x}&=\dfrac{v\dfrac{\mathrm{d}u}{\mathrm{d}x}-u\dfrac{\mathrm{d}v}{\mathrm{d}x}}{v^2}=\dfrac{\sin(x)(-\sin(x))-\cos(x)\cos(x)}{\sin^2(x)}\\&=\dfrac{-1}{\sin^2(x)}\\&=-\csc^2(x)\end{aligned}</script><p>得到其导数为</p><script type="math/tex; mode=display">\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\cot(x)=\csc^2(x)}</script><h2 id="4-5-emsp-正割函数的导数"><a href="#4-5-emsp-正割函数的导数" class="headerlink" title="4.5 &emsp; 正割函数的导数"></a>4.5 &emsp; 正割函数的导数</h2><p>令 $y=\sec(x)=\dfrac1{\cos(x)}$，再令 $u=\cos(x)$，则 $y=\dfrac1{u}$，使用链式求导法则得到：</p><script type="math/tex; mode=display">\begin{aligned}\dfrac{\mathrm{d}y}{\mathrm{d}x}&=\dfrac{\mathrm{d}y}{\mathrm{d}u}\dfrac{\mathrm{d}u}{\mathrm{d}x}=-\dfrac1{\cos^2(x)}(-\sin(x))\\&=\dfrac1{\cos(x)}\times\dfrac{\sin(x)}{\cos(x)}\\&=\sec(x)\tan(x)\end{aligned}</script><p>得出其导数为</p><script type="math/tex; mode=display">\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\sec(x)=\sec(x)\tan(x)}</script><h2 id="4-6-emsp-余割函数的导数"><a href="#4-6-emsp-余割函数的导数" class="headerlink" title="4.6 &emsp; 余割函数的导数"></a>4.6 &emsp; 余割函数的导数</h2><p>令 $y=\csc(x)=\dfrac1{\sin(x)}$，再令 $u=\sin(x)$，则 $y=\dfrac1{u}$，使用链式求导法则得到：</p><script type="math/tex; mode=display">\begin{aligned}\dfrac{\mathrm{d}y}{\mathrm{d}x}&=\dfrac{\mathrm{d}y}{\mathrm{d}u}\dfrac{\mathrm{d}u}{\mathrm{d}x}=-\dfrac1{\sin^2(x)}\cos(x)\\&=-\dfrac1{\sin(x)}\times\dfrac{\cos(x)}{\sin(x)}\\&=-\csc(x)\cot(x)\end{aligned}</script><p>得出其导数为</p><script type="math/tex; mode=display">\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\csc(x)=-\csc(x)\cot(x)}</script>]]></content>
      
      
      <categories>
          
          <category> 微积分学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极限导论与微分</title>
      <link href="/post/449b1b41ce2d.html"/>
      <url>/post/449b1b41ce2d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>  微积分学习笔记 - 01 极限导论与微分</p><p>  进入 <a href="/categories/微积分学习笔记/">传送门</a>，阅读刊载在专栏《微积分阅读笔记》下的全部文章。</p></blockquote><h1 id="一、极限导论"><a href="#一、极限导论" class="headerlink" title="一、极限导论"></a>一、极限导论</h1><h2 id="1-1-emsp-极限的定义"><a href="#1-1-emsp-极限的定义" class="headerlink" title="1.1 &emsp; 极限的定义"></a>1.1 &emsp; 极限的定义</h2><p><strong>极限</strong>：对于函数 $f(x)$，任选 $\epsilon&gt;0$，可以任选 $\delta&gt;0$，使得：对于所有满足 $0&lt;|x-a|&lt;\delta$ 的 $x$，有 $|f(x)-L|&lt;\epsilon$，则称函数 $f(x)$ 在 $a$ 处的极限为 $L$，记作：</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow a}=L</script><p>上述定义可以简单理解成，在变量 $x$ 接近于 $a$ 时，函数值无限接近于 $L$。</p><p>例如，对于函数 $f(x)=x+1$，通过分析函数图像可知，有 $\lim\limits_{x\rightarrow 2}=3$。</p><p>再例如，对于函数 $g(x)=\begin{cases}x-1&amp;\text{如果}x\not=2\\3&amp;\text{如果}x=2\end{cases}$，事实上 $\lim\limits_{x\rightarrow 2}=1$。这是因为只有那些在 $x$ 接近于 $2$ 时的 $g(x)$ 的值，才是它的极限。</p><p><strong>左极限</strong>：与极限的定义类似地，只考虑 $x&lt;a$ 的部分，函数在这部分中，自变量接近于 $a$ 的时候，函数值的接近值，记作：</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow a^{-}} = L</script><p><strong>右极限</strong>：只考虑 $x&gt;a$ 的部分，函数在这部分中，之变量接近于 $a$ 的时候，函数值的接近值，记作：</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow a^{+}}=L</script><p>例如，函数 $f(x)=x^{-1}$ ，在 $0$ 附近的极限为：$\lim\limits_{x\rightarrow 0^{-}}=-\infty,\lim\limits_{x\rightarrow 0^{+}}=\infty$。发现 $0$ 附近的左极限和右极限不相等，所以 $f(x)$ 在 $0$ 附近的极限不存在。</p><p>通过总结发现，极限存在当且仅当此处的<strong>左极限和右极限存在且相等</strong>。也就是说，</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow a^{-}}=\lim\limits_{x\rightarrow a^{+}}=L</script><p>等价于</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow a}=L</script><p>相反的，<strong>极限不存在</strong>，记作</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow a}\text{DNE}</script><h2 id="1-2-emsp-三明治定理-夹逼定理"><a href="#1-2-emsp-三明治定理-夹逼定理" class="headerlink" title="1.2 &emsp; 三明治定理(夹逼定理)"></a>1.2 &emsp; 三明治定理(夹逼定理)</h2><p>如果对于所有在 $a$ 附近的 $x$ 都有 $g(x)\leq f(x)\leq h(x)$，且 $\lim\limits_{x\rightarrow a}g(x)=\lim\limits_{x\rightarrow a}h(x)=L$，则</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow a}f(x)=L</script><h2 id="1-3-emsp-求解-x-rightarrow-a-时多项式的极限问题"><a href="#1-3-emsp-求解-x-rightarrow-a-时多项式的极限问题" class="headerlink" title="1.3 &emsp; 求解 $x\rightarrow a$ 时多项式的极限问题"></a>1.3 &emsp; 求解 $x\rightarrow a$ 时多项式的极限问题</h2><p><strong>例题1</strong>：求解极限</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow -1}\frac{x^2-3x+2}{x-2}</script><p>因为函数定义域包含 $-1$，可以将 $x=-1$ 带入表达式中，得到这个极限为 $-2$。</p><p><strong>例题2</strong>：求解极限</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow 2}\frac{x^2-3x+2}{x-2}</script><p>我们发现直接将 $x=2$ 带入，分母为 $0$，不能这样求解。考虑对其因式分解，有</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow 2}\frac{x^2-3x+2}{x-2}=\lim\limits_{x\rightarrow 2}\frac{(x-2)(x-1)}{x-2}=\lim\limits_{x\rightarrow 2}(x-1)=1</script><p><strong>例题3</strong>：求解极限</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow 1}\frac{2x^2-x-6}{x(x-1)^3}</script><p>我们不能直接带入 $x=1$，尝试进行<strong>符号分析</strong>。其关键因子是 $(x-1)^3$，当 $x\rightarrow 1^+$ 时，其为正，并代入整个式子分析符号，有$\frac{(-)}{(+)(+)}=(-)$；当 $x\rightarrow 1^-$ 时，其为负，分析式子的符号，有$\frac{(-)}{(+)(-)}=(+)$。因此，这个极限<strong>不存在</strong>，但是存在左极限和右极限：</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow 1^-}\frac{2x^2-x-6}{x(x-1)^3}=-\infty \qquad \lim\limits_{x\rightarrow 1+}\frac{2x^2-x-6}{x(x-1)^3}=\infty</script><p><strong>例题4</strong>：求解极限</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow 5}\frac{\sqrt{x^2-9}-4}{x-5}</script><p>不能直接带入 $x=5$，考虑进行<strong>分子有理化</strong>，即分子分母共同乘上 $\sqrt{x^2-9}-4$ 的<strong>共轭表达式</strong>，有</p><script type="math/tex; mode=display">\begin{aligned}\lim\limits_{x\rightarrow 5}\frac{\sqrt{x^2-9}-4}{x-5}&=\lim\limits_{x\rightarrow 5}\frac{\sqrt{x^2-9}-4}{x-5}\times \frac{\sqrt{x^2-9}+4}{\sqrt{x^2-9}+4}\\&=\lim\limits_{x\rightarrow 5}\frac{x^2-25}{(x-5)(\sqrt{x^2-9}+4)}\\&=\lim\limits_{x\rightarrow 5}\frac{x+5}{\sqrt{x^2-9}+4}\\&=\frac{5}{4}\end{aligned}</script><h2 id="1-4-emsp-求解-x-rightarrow-infty-时多项式的极限问题"><a href="#1-4-emsp-求解-x-rightarrow-infty-时多项式的极限问题" class="headerlink" title="1.4 &emsp; 求解 $x\rightarrow \infty$ 时多项式的极限问题"></a>1.4 &emsp; 求解 $x\rightarrow \infty$ 时多项式的极限问题</h2><p>对于一个有理函数的极限</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow \infty}\frac{p(x)}{q(x)}</script><p>令 $p_L(x)$ 为函数 $p(x)$ 的最高次项，我们有</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow \infty}\frac{p(x)}{p_L(x)}=1</script><p>事实上，对于任意的 $n&gt;0$，$C$ 为常数，有</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow \infty}\frac{C}{x^n}=0</script><p><strong>例题5</strong>：求解极限</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow \infty}\frac{x-8x^4}{7x^4+5x^3+2000x^2-6}</script><p>我们找到分子的首项 $-8x^4$，分母的首项 $7x^4$，有</p><script type="math/tex; mode=display">\begin{aligned}\lim\limits_{x\rightarrow \infty}\frac{x-8x^4}{7x^4+5x^3+2000x^2-6}&=\lim\limits_{x\rightarrow \infty}\frac{\dfrac{x-8x^4}{-8x^4}\times (-8x^4)}{\dfrac{7x^4+5x^3+2000x^2-6}{7x^4}\times 7x^4}\\&=\lim\limits_{x\rightarrow \infty}\frac{-\dfrac{1}{8x^3}+1}{1+\dfrac{5}{7x}+\dfrac{2000}{7x^2}-\dfrac{6}{7x^4}}\times  \dfrac{-8x^4}{7x^4}\\&=\frac{0+1}{1+0+0-0}\times \frac{-8}{7}\\&=-\frac{8}{7}\end{aligned}</script><p>一般地，考虑极限</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow \infty}\frac{p(x)}{q(x)}</script><p>其中 $p,q$ 为多项式，我们有：</p><ol><li>如果 $p$ 的次数等于 $q$ 的次数，则极限是<strong>有限的且非零</strong>；</li><li>如果 $p$ 的次数大于 $q$ 的次数，则极限是 $\infty$ <strong>或</strong> $-\infty$；</li><li>如果 $p$ 的次数等于 $q$ 的次数，则极限是 $0$。</li></ol><h2 id="1-5-emsp-求解-x-rightarrow-infty-时多项式的极限问题"><a href="#1-5-emsp-求解-x-rightarrow-infty-时多项式的极限问题" class="headerlink" title="1.5 &emsp; 求解 $x\rightarrow -\infty$ 时多项式的极限问题"></a>1.5 &emsp; 求解 $x\rightarrow -\infty$ 时多项式的极限问题</h2><p>求解 $x\rightarrow -\infty$ 时的极限，答题思路和上面相仿，特殊地，需要考虑被开方数的<strong>正负性</strong>。</p><p><strong>例题6</strong>：求解极限</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow -\infty}\frac{\sqrt{4x^6+8}}{2x^3+6x+1}</script><p>可以找到分母的首项 $2x^3$，分子的首项 $\sqrt{4x^6}$，特别注意 $x&lt;0$ 时，$\sqrt{4x^6}=-2x^3$。有</p><script type="math/tex; mode=display">\begin{aligned}\lim\limits_{x\rightarrow -\infty}\frac{\sqrt{4x^6+8}}{2x^3+6x+1}&=\lim\limits_{x\rightarrow \infty}\frac{\dfrac{\sqrt{4x^6+8}}{\sqrt{4x^6}}\times \sqrt{4x^6}}{\dfrac{2x^3+6x+1}{2x^3}\times 2x^3}\\&=\lim\limits_{x\rightarrow \infty}\frac{\sqrt{\dfrac{4x^6+8}{4x^6}}}{\dfrac{2x^3+6x+1}{2x^3}}\times \frac{\sqrt{4x^6}}{2x^3}\\&=\lim\limits_{x\rightarrow \infty}\frac{\sqrt{1+\dfrac{8}{4x^6}}}{1+\dfrac{6x}{2x^3}+\dfrac{1}{2x^3}}\times \frac{-2x^3}{2x^3}\\&=\frac{\sqrt{1+0}}{1+0+0}\times (-1)\\&=-1\end{aligned}</script><h1 id="二、求解微分问题"><a href="#二、求解微分问题" class="headerlink" title="二、求解微分问题"></a>二、求解微分问题</h1><h2 id="2-1-emsp-幂函数的导数"><a href="#2-1-emsp-幂函数的导数" class="headerlink" title="2.1 &emsp; 幂函数的导数"></a>2.1 &emsp; 幂函数的导数</h2><p>事实上，当 $a$ 是任意实数时，</p><script type="math/tex; mode=display">\frac{\mathrm{d}}{\mathrm{d}x}(x^a)=ax^{a-1}</script><p>特殊地，如果 $C$ 是常数，那么 $\dfrac{\mathrm{d}}{\mathrm{d}x}(C)=0$。</p><p>如果 $a=1$，有 $\dfrac{\mathrm{d}}{\mathrm{d}x}(x)=1$。</p><p><strong>例子</strong> &emsp; $\dfrac{\mathrm{d}}{\mathrm{d}x}(x^\frac{1}{3})=\dfrac{1}{3}x^{-\frac{2}{3}}$。</p><h2 id="2-2-emsp-求导法则"><a href="#2-2-emsp-求导法则" class="headerlink" title="2.2 &emsp; 求导法则"></a>2.2 &emsp; 求导法则</h2><p>下面内容默认 $f’(x)$ 为函数 $f(x)$ 的导数，$a$ 为任意实数。</p><h3 id="2-2-1-emsp-函数的常数倍"><a href="#2-2-1-emsp-函数的常数倍" class="headerlink" title="2.2.1 &emsp; 函数的常数倍"></a>2.2.1 &emsp; 函数的常数倍</h3><p>若 $k$ 为任意实数，$f(x)=kx^a$，其导数为</p><script type="math/tex; mode=display">f'(x)=kax^{a-1}</script><h3 id="2-2-2-emsp-函数的和与差"><a href="#2-2-2-emsp-函数的和与差" class="headerlink" title="2.2.2 &emsp; 函数的和与差"></a>2.2.2 &emsp; 函数的和与差</h3><p>若 $f(x)=g(x)\pm h(x)$，其导数为</p><script type="math/tex; mode=display">f'(x)=g'(x)\pm h'(x)</script><h3 id="2-2-3-emsp-乘积法则"><a href="#2-2-3-emsp-乘积法则" class="headerlink" title="2.2.3 &emsp; 乘积法则"></a>2.2.3 &emsp; 乘积法则</h3><p><strong>乘积法则</strong> &emsp; 若 $h(x)=f(x)g(x)$，则其导数为</p><script type="math/tex; mode=display">h'(x)=f'(x)g(x)+f(x)g'(x)</script><p>用微分的形式表示，若 $y=uv$，则</p><script type="math/tex; mode=display">\dfrac{\mathrm{d}y}{\mathrm{d}x}=v\dfrac{\mathrm{d}u}{\mathrm{d}x}+u\dfrac{\mathrm{d}v}{\mathrm{d}x}</script><p>乘积法则可推广。若 $y=uvw$，则</p><script type="math/tex; mode=display">\dfrac{\mathrm{d}y}{\mathrm{d}x}=\dfrac{\mathrm{d}u}{\mathrm{d}x}vw+u\dfrac{\mathrm{d}v}{\mathrm{d}x}w+uv\dfrac{\mathrm{d}w}{\mathrm{d}x}</script><h3 id="2-2-4-emsp-商法则"><a href="#2-2-4-emsp-商法则" class="headerlink" title="2.2.4 &emsp; 商法则"></a>2.2.4 &emsp; 商法则</h3><p><strong>商法则</strong> &emsp; 若函数 $h(x)=\dfrac{f(x)}{g(x)}$，则其导数为</p><script type="math/tex; mode=display">h'(x)=\dfrac{f'(x)g(x)-f(x)g'(x)}{(g(x))^2}</script><p>用微分的形式表示，若 $y=\dfrac uv$，则</p><script type="math/tex; mode=display">\dfrac{\mathrm{d}y}{\mathrm{d}x}=\dfrac{v\dfrac{\mathrm{d}u}{\mathrm{d}x}-u\dfrac{\mathrm{d}v}{\mathrm{d}x}}{v^2}</script><h3 id="2-2-5-emsp-链式求导法则"><a href="#2-2-5-emsp-链式求导法则" class="headerlink" title="2.2.5 &emsp; 链式求导法则"></a>2.2.5 &emsp; 链式求导法则</h3><p><strong>链式求导法则</strong> &emsp; 若函数 $h(x)=f(g(x))$，则其导数为</p><script type="math/tex; mode=display">h'(x)=f'(g(x))g'(x)</script><p>用微分的形式表示，若 $y$ 是 $u$ 的函数，$u$ 是 $x$ 的函数，则</p><script type="math/tex; mode=display">\dfrac{\mathrm{d}y}{\mathrm{d}x}=\dfrac{\mathrm{d}y}{\mathrm{d}u}\dfrac{\mathrm{d}u}{\mathrm{d}x}</script><p>链式求导法则可以推广，若 $y$ 是 $u$ 的函数，$u$ 是 $v$ 的函数，$v$ 是 $x$ 的函数，则</p><script type="math/tex; mode=display">\dfrac{\mathrm{d}y}{\mathrm{d}x}=\dfrac{\mathrm{d}y}{\mathrm{d}u}\dfrac{\mathrm{d}u}{\mathrm{d}v}\dfrac{\mathrm{d}v}{\mathrm{d}x}</script>]]></content>
      
      
      <categories>
          
          <category> 微积分学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做题笔记[AGC002]</title>
      <link href="/post/2eaf91bf2ff2.html"/>
      <url>/post/2eaf91bf2ff2.html</url>
      
        <content type="html"><![CDATA[<p>做题笔记[AGC002]</p><h1 id="A-Range-Product"><a href="#A-Range-Product" class="headerlink" title="A - Range Product"></a>A - Range Product</h1><blockquote><p>标签：数学</p><p>难度：★☆☆☆☆</p></blockquote><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你两个整数 $a$ 和 $b$ ($a≤b$)。</p><p>判断 $\prod\limits_{i=a}^b i$ 是正、负还是零。</p><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><p>$-10^9\le a\le b\le 10^9$。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>判断正负性，经过 $0$ 的乘积为 $0$，再判断负数个数即可。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;=<span class="number">0</span>&amp;&amp;b&gt;=<span class="number">0</span>) cout&lt;&lt;<span class="string">&quot;Zero&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a&gt;<span class="number">0</span>||(b-a+<span class="number">1</span>)%<span class="number">2</span>==<span class="number">0</span>) cout&lt;&lt;<span class="string">&quot;Positive&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;Negative&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Box-and-Ball"><a href="#B-Box-and-Ball" class="headerlink" title="B - Box and Ball"></a>B - Box and Ball</h1><blockquote><p>标签：思维</p><p>难度：★★☆☆☆</p></blockquote><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>我们有$N$个盒子，一开始，$1$ 号盒子里有一个红球，其他每个盒子里都有一个白球。</p><p>逐一执行给定的 $M$ 操作。在第 $i$ 次操作中，他会从 $x_i$ 盒子中随机选取一个球，然后将其放入 $y_i$ 盒子中。</p><p>求所有操作完成后，可能装有红球的盒子数。</p><h2 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h2><p>$2\le N,M\le 10^5,1\le x_i,y_i\le N$。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>判断 $1$ 号球可能到达的位置，每次移动将 $y$ 盒子打上“可能”的标记，如果 $x$ 盒子空了，就撤销 $x$ 的“可能”标记即可。</p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="type">int</span> n,m,sz[MAXN];</span><br><span class="line"><span class="type">bool</span> f[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sz[i]=<span class="number">1</span>;</span><br><span class="line">    f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        sz[x]--;</span><br><span class="line">        sz[y]++;</span><br><span class="line">        f[y]|=f[x];</span><br><span class="line">        <span class="keyword">if</span>(!sz[x]) f[x]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans+=f[i];</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Knot-Puzzle"><a href="#C-Knot-Puzzle" class="headerlink" title="C -  Knot Puzzle"></a>C -  Knot Puzzle</h1><blockquote><p>标签：贪心、构造</p><p>难度：★★★☆☆</p></blockquote><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>我们有 $N$ 根绳子，第 $i$ 段的长度是 $a_i$。起初，每条和相邻的绳子打上结，形成一条有 $N-1$ 个结的长绳。尝试通过重复执行以下操作来解开所有绳结：</p><ul><li>选择一条总长度至少为 $L$ 的（相连）绳子，然后解开其中一个绳结。</li></ul><p>通过正确的操作是否可以解开所有的 $N-1$ 个绳结？如果答案是肯定的，请找出一种可能的解结顺序。</p><h2 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h2><p>$2\le N\le 10^5,1\le L,a_i\le 10^9$。</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>考虑贪心。如果全部能解开，则最后解开的那一对相邻的绳子长度一定大于等于 $L$。我们找到这对绳子，从两边开始解开所有的绳子。</p><p>如果没有这样一对相邻的绳子，则判断无解。</p><h2 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="type">int</span> n,len,a[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;len;</span><br><span class="line">    <span class="type">int</span> s=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">if</span>(a[i]+a[i<span class="number">-1</span>]&gt;=a[s]+a[s<span class="number">-1</span>]) s=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[s]+a[s<span class="number">-1</span>]&lt;len)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Impossible&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Possible&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;s<span class="number">-1</span>;i++) cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=s;i--) cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;s<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Stamp-Rally"><a href="#D-Stamp-Rally" class="headerlink" title="D - Stamp Rally"></a>D - Stamp Rally</h1><blockquote><p>标签：图论、kruskal 重构树</p><p>难度：★★★★☆</p></blockquote><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>有一个 $N$ 个顶点和 $M$ 条边的无向连通图。一共有 $Q$ 此询问，每次询问给定两个点 $x,y$，要求是同这两个点开始走，一共走 $z$ 个点，最小化所经过的边的权值最大值。</p><h2 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h2><p>$3\le N,Q\le 10^5,N−1\le M\le 10^5,1\le a_i&lt;b_i\le N$。</p><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>因为要最小化路径最大权值，想到构建最小生成树，这样能保证连通图的最大边权最小。</p><p>因为要从两个顶点开始，一共走 $z$ 条边，考虑构建 kruskal 重构树，利用其<strong>一条路径的最大边权在两点的 LCA 位置处</strong>的性质，找到 $x,y$ 的最近公共祖先，再判断 $z$ 是否满足即可。</p><p>判断 $z$ 是否满足，只需要再重构树上往祖先走的时候判断子树叶子节点个数即可。可利用倍增加速。时间复杂度 $O(Q\log n)$。</p><h2 id="参考代码-3"><a href="#参考代码-3" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 200005</span></span><br><span class="line"><span class="type">int</span> n,m,dsu[MAXN],w[MAXN],f[MAXN][<span class="number">30</span>],tot,root,lim,dep[MAXN],sz[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y,z;</span><br><span class="line">&#125;edge[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.z&lt;y.z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dsu[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> dsu[x]=<span class="built_in">find</span>(dsu[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    f[u][<span class="number">0</span>]=fa;</span><br><span class="line">    dep[u]=dep[fa]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(g[u].<span class="built_in">size</span>()==<span class="number">1</span>) sz[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:g[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v,u);</span><br><span class="line">        sz[u]+=sz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=lim;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(w[f[x][i]]&lt;=c) x=f[x][i];</span><br><span class="line">        <span class="keyword">if</span>(w[f[y][i]]&lt;=c) y=f[y][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span> sz[x];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> sz[x]+sz[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;edge[i].x&gt;&gt;edge[i].y;</span><br><span class="line">        edge[i].z=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(edge+<span class="number">1</span>,edge+<span class="number">1</span>+m,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">2</span>;i++) dsu[i]=i;</span><br><span class="line">    tot=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> t=<span class="number">1</span>,i=<span class="number">1</span>;t&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x=edge[i].x,y=edge[i].y;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(x)!=<span class="built_in">find</span>(y))&#123;</span><br><span class="line">            t++,tot++;</span><br><span class="line">            g[<span class="built_in">find</span>(x)].<span class="built_in">push_back</span>(tot);</span><br><span class="line">            g[tot].<span class="built_in">push_back</span>(<span class="built_in">find</span>(x));</span><br><span class="line">            g[<span class="built_in">find</span>(y)].<span class="built_in">push_back</span>(tot);</span><br><span class="line">            g[tot].<span class="built_in">push_back</span>(<span class="built_in">find</span>(y));</span><br><span class="line">            w[tot]=edge[i].z;</span><br><span class="line">            dsu[<span class="built_in">find</span>(x)]=tot;</span><br><span class="line">            dsu[<span class="built_in">find</span>(y)]=tot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    root=tot;</span><br><span class="line">    <span class="built_in">dfs</span>(root,<span class="number">0</span>);</span><br><span class="line">    lim=<span class="built_in">log2</span>(n*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=lim;j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">2</span>;i++)&#123;</span><br><span class="line">            f[i][j]=f[f[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> Q;</span><br><span class="line">    cin&gt;&gt;Q;</span><br><span class="line">    w[<span class="number">0</span>]=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">while</span>(Q--)&#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">1</span>,r=m;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>(x,y,mid)&gt;=z) r=mid;</span><br><span class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Candy-Piles"><a href="#E-Candy-Piles" class="headerlink" title="E - Candy Piles"></a>E - Candy Piles</h1><blockquote><p>标签：博弈论、思维</p><p>难度：★★★★★</p></blockquote><h2 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h2><p>桌子上有 $N$ 堆糖果，第 $i$ 堆里有 $a_i$ 颗糖果。</p><p>两个人轮流玩游戏，在每个回合中，当前玩家必须执行以下两个操作中的一个：</p><ol><li>选择剩余糖果数量最多的一堆，然后吃掉这一堆中的所有糖果。</li><li>从每堆糖果中吃掉一颗或多颗糖果。</li></ol><p>吃掉桌上最后一颗糖果的玩家输掉游戏。如果双方都以最佳方式玩游戏，请确定哪一方会获胜。</p><h2 id="数据范围-4"><a href="#数据范围-4" class="headerlink" title="数据范围"></a>数据范围</h2><p>$1\le N\le 10^5,1\le a_i\le 10^9$。</p><h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><p>很巧妙的人类智慧题！</p><p>我们考虑将这个棋局表示为一个二维平面，第 $i$ 列表示第 $i$ 堆糖果，每列从下到上有 $j$ 个添上的格子，表示第 $i$ 堆糖果有 $j$ 个。如下图：左图表示拿走最多的一堆（操作 1），右图表示每堆拿走一颗（操作 2）。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=2b5yyZIi" alt=""></p><p>实际上，我们将问题转化成了：每次从左或下消除一列或一行，直到无法消去。问谁会赢。</p><p>将消去一列操作视为向右走一格，消去一行操作视为向上走一格，可以表示成下图。双方交替进行，红色表示先手，蓝色表示后手。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=22cFH3sJ" alt=""></p><p>可以看到，只要走到边界，就会失败，所以给边界上的点一个“必败”的标记，考虑其他的点：</p><ul><li>如果这个点上方或右方有必胜点，则此点必胜（对于先手而言，下同）；</li><li>否则此点必败。</li></ul><p>如下图所示，红点为必败点，蓝点为必胜点。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=yRKKGDNu" alt=""></p><p>不难发发现，<strong>一个点和其右上方的点属性相同</strong>。利用这个性质，我们可以从起点一直向右上方走，直到不能走，判断这个点的胜负性。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=cIGm5e6V" alt=""></p><p>发现，对于靠近边界，不能向右上方走的点，如果其上方或右方能延伸的格子数有一个为奇数，则为必胜点，否则先手必败。</p><h2 id="参考代码-4"><a href="#参考代码-4" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="type">int</span> n,a[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line">    <span class="type">int</span> p=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(a[p+<span class="number">1</span>]&gt;=p+<span class="number">1</span>) p++;</span><br><span class="line">    <span class="type">int</span> p1=<span class="number">0</span>,p2=a[p]-p;</span><br><span class="line">    <span class="keyword">while</span>(a[p+p1+<span class="number">1</span>]&gt;=p) p1++;</span><br><span class="line">    <span class="keyword">if</span>((p1|p2)&amp;<span class="number">1</span>) cout&lt;&lt;<span class="string">&quot;First&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;Second&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F-Leftmost-Ball"><a href="#F-Leftmost-Ball" class="headerlink" title="F - Leftmost Ball"></a>F - Leftmost Ball</h1><blockquote><p>标签：组合数学、动态规划</p><p>难度：★★★★★</p></blockquote><h2 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a>题目大意</h2><p>一共有 $N×K$ 个球，每种他喜欢的 $N$ 种颜色有$K$个。他会把所有的球从左到右任意排成一排。然后，对于每种颜色的球，他都会把最左边的那个颜色的球涂成 $0$ 号颜色（一种不同于 $N$ 种原始颜色的颜色）。</p><p>求涂色后，球的颜色可能有多少个序列（取模）。</p><h2 id="数据范围-5"><a href="#数据范围-5" class="headerlink" title="数据范围"></a>数据范围</h2><p>$1\le N,K\le 000$。</p><h2 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h2><p>组合问题考虑动态规划。我们设状态 $f_{i,j}$ 表示我们放置了 $i$ 个白球和 $j$ 个<strong>类</strong>颜色的球，显然 $i\ge j$。考虑转移：</p><ul><li>若当前位置放一个白球，则有转移方程：</li></ul><script type="math/tex; mode=display">f_{i-1,j} \to f_{i,j}</script><ul><li>若当前位置放一个有颜色的球。根据定义，我们一次安排一类 $k-1$ 个同颜色的球的位置，那么这个位置是一个<strong>没有出现过的颜色的球</strong>。因为是从 $f_{i,j-1}$ 转移过来，所以这个球的颜色有 $n-j+1$ 种。当前位置放一个，前面有一个此颜色转换成的白球，后面此种颜色共安排 $k-2$ 个，则可以安排在后面 $nk-i-(j-i)(k-1)-1$ 个空位种的 $k-2$ 个位置，则有转移方程：</li></ul><script type="math/tex; mode=display">f_{i,j-1}\times (n-j+1)\times {nk-i-(j-1)(k-1)-1\choose k-2}\to f_{i,j}</script><p>边界：$f_{0,0}=1$，答案：$f_{n,n}$。</p><p>时间复杂度 $O(nk)$。</p><h2 id="参考代码-5"><a href="#参考代码-5" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 2005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line">ll f[MAXN][MAXN],mul[MAXN*MAXN],inv[MAXN*MAXN];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    ll w=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) w=w*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m&lt;<span class="number">0</span>||n&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> mul[n]*inv[m]%mod*inv[n-m]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mul[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k*n;i++) mul[i]=mul[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    inv[n*k]=<span class="built_in">qpow</span>(mul[n*k],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=k*n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) inv[i]=inv[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i<span class="number">-1</span>&gt;=j) f[i][j]+=f[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(j) f[i][j]+=f[i][j<span class="number">-1</span>]*(n-j+<span class="number">1</span>)%mod*<span class="built_in">C</span>(n*k-i-(j<span class="number">-1</span>)*(k<span class="number">-1</span>)<span class="number">-1</span>,k<span class="number">-2</span>)%mod;</span><br><span class="line">            f[i][j]%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[n][n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 做题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 做题笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做题笔记[AGC001]</title>
      <link href="/post/887b839b27ed.html"/>
      <url>/post/887b839b27ed.html</url>
      
        <content type="html"><![CDATA[<p>做题笔记[AGC001]</p><h1 id="A-BBQ-Easy"><a href="#A-BBQ-Easy" class="headerlink" title="A - BBQ Easy"></a>A - BBQ Easy</h1><blockquote><p>标签：贪心</p><p>难度：★☆☆☆☆</p></blockquote><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>将 $2n$ 个数分为 $n$ 组，每个数有值 $L_i$，每组两个数，每个数都被且只被分到一组。一组的权值是两个数值的最小值，分组方案的值就是每组值之和，求分组方案的最大值。</p><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><p>$1\le n\le 100,1\le L_i\le 100$。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>考虑贪心。将数组排序后按顺序两两分组即可。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 205</span></span><br><span class="line"><span class="type">int</span> n,a[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    n*=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i+=<span class="number">2</span>) ans+=a[i];</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Mysterious-Light"><a href="#B-Mysterious-Light" class="headerlink" title="B - Mysterious Light"></a>B - Mysterious Light</h1><blockquote><p>标签：思维</p><p>难度：★★★☆☆</p></blockquote><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>有一个边长为 $N$ 的三枚镜子构成的正三角形，顶点为 $A, B, C$。有一束光线，放在 $AB$ 段的 $P$ 点上，使得 $AP=X$。这个步枪将会沿着平行于 $BC$ 的方向发射一道光。</p><p>光以直线传播，以镜子的形式反射，也会被自己的轨迹反射，当光回到初始点的时候，光被吸收。</p><p>下面的图显示了当 $N=5, x=2$ 时的光轨迹。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=2CMCJl5q" alt=""></p><p>给定 $N$ 和 $x$，求出光线的总长度。</p><h2 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h2><p>$2≤N≤10^{12}$，$1≤x≤N-1$。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>把这个三角形看成被对角线分割的正方形，手动模拟长度，可以发现每一段的长度是一个辗转相减的过程，最后剩下的那一段就是 $(N,x)$。可以得到答案就是 $3(N-(N,x))$。</p><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll n,x;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;x;</span><br><span class="line">    cout&lt;&lt;<span class="number">3ll</span>*(n-__gcd(x,n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Shorten-Diameter"><a href="#C-Shorten-Diameter" class="headerlink" title="C - Shorten Diameter"></a>C - Shorten Diameter</h1><blockquote><p>标签：树论、枚举</p><p>难度：★★☆☆☆</p></blockquote><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一棵 $N$ 个点的无向树，定义点 $u$ 和 $v$ 之间的距离是从 $u$ 到 $v$ 的简单路径上的边数。</p><p>你需要删除一些点，使树的直径小于等于 $K$，当且仅当删除某点不会对树的联通性产生影响时才可以删除。</p><p>问至少删除多少点才可以满足要求。</p><h2 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h2><p>$2≤N≤2000$，$1≤K≤N-1$。</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>因为 $N$ 比较小，我们考虑枚举每个点，计算以这个点为中心时，最少删去多少个点才能满足要求，具体地：</p><ul><li>若 $N$ 为偶数，我们设这个点为中心，遍历整张图，删去距离这个点超过 $k/2$ 的点。</li><li>若 $N$ 为奇数，我们设这个点连接的某一条边为中心（枚举），遍历整张图，删去距离这个点超过 $\lfloor k/2 \rfloor$。</li></ul><p>时间复杂度 $O(n^2)$。</p><h2 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 2005</span></span><br><span class="line"><span class="type">int</span> n,k,cnt,ans=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa,<span class="type">int</span> dis)</span></span>&#123;</span><br><span class="line">    cnt+=(dis&gt;k/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:g[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v,u,dis+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        g[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">        g[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k&amp;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">1</span>;u&lt;=n;u++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> v:g[u])&#123;</span><br><span class="line">                cnt=<span class="number">0</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(v,u,<span class="number">0</span>);</span><br><span class="line">                <span class="built_in">dfs</span>(u,v,<span class="number">0</span>);</span><br><span class="line">                ans=<span class="built_in">min</span>(ans,cnt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">1</span>;u&lt;=n;u++)&#123;</span><br><span class="line">            cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> v:g[u])&#123;</span><br><span class="line">                <span class="built_in">dfs</span>(v,u,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ans=<span class="built_in">min</span>(ans,cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Arrays-and-Palindrome"><a href="#D-Arrays-and-Palindrome" class="headerlink" title="D - Arrays and Palindrome"></a>D - Arrays and Palindrome</h1><blockquote><p>标签：构造、回文串</p><p>难度：★★★★☆</p></blockquote><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个长 $m$ 的序列 $A$，和参数 $n=\sum\limits_{i=1}^m A_i$，构造两个正整数数列 $a,b$，满足：</p><ul><li>$a$ 数列的数字总和是 $N$ 且是 $A$ 序列的一个排列；</li><li>$b$ 数列的数字总和是 $N$；</li><li>如果存在某个数列 $s$ 满足以下两个条件， 则 $s$ 的所有元素必定相同：<ul><li>对于 $s$ 的最开始的 $a_1$ 个元素，接下来的 $a_2$ 个元素，更后面的 $a_3$ 个，等等，都构成回文串；</li><li>对于 $s$ 的最开始的 $b_1$ 个元素，接下来的 $b_2$ 个元素，更后面的 $b_3$ 个，等等，都构成回文串。</li></ul></li></ul><h2 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h2><p>$1\le N,A_i\le 10^5,1\le M\le 100$。</p><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>一道很好的构造题。</p><p>考虑构成一个长度为 $n$ 的回文串，会有 $n/2$ 个相等关系。而让所有元素相等，必须交叉安排两个数组，使得串首尾都留出一个接口，如下图：</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=Dm0o2AWB" alt=""></p><p>不难发现，如果 $A$ 中有大于两个长度为奇数的串，就无法满足制约关系。对于合法的解，不妨将长度为奇数的串转到两边，然后让 $b$ 数组差 $a$ 的空子安排就好。</p><h2 id="参考代码-3"><a href="#参考代码-3" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="type">int</span> n,m,a[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        cnt+=(a[i]&amp;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;<span class="number">2</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Impossible&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="keyword">if</span>(a[i]&amp;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">1</span>) <span class="built_in">swap</span>(a[i],a[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=m;i&gt;<span class="number">1</span>;i--) <span class="keyword">if</span>(a[i]&amp;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=m) <span class="built_in">swap</span>(a[i],a[m]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n!=<span class="number">1</span>) cout&lt;&lt;<span class="number">2</span>&lt;&lt;endl&lt;&lt;a[<span class="number">1</span>]<span class="number">-1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="number">1</span>&lt;&lt;endl&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">1</span>]==<span class="number">1</span>) cout&lt;&lt;m<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;m&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;a[<span class="number">1</span>]<span class="number">-1</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;m;i++) cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;a[m]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-BBQ-Hard"><a href="#E-BBQ-Hard" class="headerlink" title="E - BBQ Hard"></a>E - BBQ Hard</h1><blockquote><p>标签：组合计数、动态规划</p><p>难度：★★★★☆</p></blockquote><h2 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h2><p>有 $n$ 个数对 $(a_i, b_i)$，求</p><script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=i + 1}^{n}{a_i+b_i+a_j+b_j \choose a_i+a_j}</script><p>答案对 $10 ^ 9 + 7$ 取模。</p><h2 id="数据范围-4"><a href="#数据范围-4" class="headerlink" title="数据范围"></a>数据范围</h2><p>$2\le N\le 2\times 10^5,1\le A_i,B_i\le 2000$。</p><h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先考虑一个组合式 $x+y\choose x$ 的几何意义，就是从点 $(0,0)$ 走到 $(x,y)$，每一步只能向右或向上走的方案数。这个式子是可以转移的：</p><script type="math/tex; mode=display">{x+y\choose x }={x+y-1\choose x}+{x+y\choose x-1}</script><p>单独求一次可以在 $O(A_iB_i)$ 的时间求出来。现在考虑题目中的式子，也就是说对于每个 $1\le i&lt;j\le n$，求从 $(0,0)$ 按照上述方案走到 $(a_i+a_j,b_i+b_j)$ 的方案数。</p><p>为了简化思考，我们现在改变一下表述方式：对于每个 $1\le i&lt;j\le n$，求从 $(-a_j,-b_j)$ 走到 $(a_i,b_i)$，即向左下平移，但是大小不变。我们以 $(a_i,a_j)$ 为主元，求解其他点（负的）到这个点的方案和即可。</p><p>我们考虑动态规划。开始给每个负点 $(-a_i,-b_i)$ $1$ 的权值，设计 $f_{i,j}$ 表示从左下角走到这个点的方案数，求解即可。</p><p>注意上述状态求解了所有的 $i,j$ 的解，我们需要删去 $i,i$ 的解，通过组合计数可得这部分要删去的解的个数是 $\sum\limits_{i=1}^n{2a_i+2b_2\choose2a_i}$。因为 $i,j$ 和 $j,i$ 算重，需要将答案数除以 $2$。</p><h2 id="参考代码-4"><a href="#参考代码-4" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 200005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXA 2005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll f[MAXA&lt;&lt;<span class="number">1</span>][MAXA&lt;&lt;<span class="number">1</span>],n,a[MAXN],b[MAXN];</span><br><span class="line">ll maxa,maxb,ans;</span><br><span class="line">ll mul[MAXA&lt;&lt;<span class="number">2</span>],inv[MAXA&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mul[n]*inv[m]%mod*inv[n-m]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    ll w=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) w=w*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mul[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4009</span>*<span class="number">2</span>;i++) mul[i]=mul[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    inv[<span class="number">4009</span>*<span class="number">2</span>]=<span class="built_in">qpow</span>(mul[<span class="number">4009</span>*<span class="number">2</span>],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">4009</span>*<span class="number">2</span><span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) inv[i]=inv[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i]&gt;&gt;b[i];</span><br><span class="line">        f[<span class="number">2005</span>-a[i]][<span class="number">2005</span>-b[i]]++;</span><br><span class="line">        maxa=<span class="built_in">max</span>(maxa,a[i]);</span><br><span class="line">        maxb=<span class="built_in">max</span>(maxb,b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2005</span>-maxa;i&lt;=<span class="number">2005</span>+maxa;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2005</span>-maxb;j&lt;=<span class="number">2005</span>+maxb;j++)&#123;</span><br><span class="line">            f[i][j]=(f[i][j]+f[i<span class="number">-1</span>][j]+f[i][j<span class="number">-1</span>])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans=(ans+f[<span class="number">2005</span>+a[i]][<span class="number">2005</span>+b[i]])%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans=(ans-<span class="built_in">C</span>((a[i]+b[i])&lt;&lt;<span class="number">1</span>,a[i]&lt;&lt;<span class="number">1</span>))%mod;</span><br><span class="line">    ans=<span class="number">1ll</span>*ans*inv[<span class="number">2</span>]%mod;</span><br><span class="line">    ans=(ans%mod+mod)%mod;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F-Wide-Swap"><a href="#F-Wide-Swap" class="headerlink" title="F - Wide Swap"></a>F - Wide Swap</h1><blockquote><p>标签：思维、拓扑排序、线段树</p><p>难度：★★★★★</p></blockquote><h2 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a>题目大意</h2><p>给出一个元素集合为 $\{1,2,\dots,N\}$ 的排列 $P$，当有 $i,j$ $(1\leq i&lt;j\leq N)$ 满足 $j-i\geq K$ $(1\leq K\leq N-1)$ 且 $|P_{i}-P_{j}|=1$时，可以交换 $P_{i}$ 和 $P_{j}$。</p><p>求：可能排列中字典序最小的排列。</p><h2 id="数据范围-5"><a href="#数据范围-5" class="headerlink" title="数据范围"></a>数据范围</h2><p>$1\leq N\leq 5\times10^5$ 。</p><h2 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h2><p>考虑按照上述方式交换元素有什么特殊性质。</p><p>我们建立 $P$ 的反置换 $Q$，即 $P_{Q_i}=i$，将 $P_i$ 的值作为 $Q$ 的下标，$i$ 作为 $Q$ 的值。不难发现，可以交换 $Q_i$ 和 $Q_{i+1}$ 的条件是 $|Q_i-Q_{i+1}|\le K$。</p><p>通过人类的智慧思考发现，若存在一组 $1\le i<j\le N$，满足 $|Q_i-Q_j|>K$，不管怎样交换，这两个数的<strong>相对位置不会改变</strong>。</p><p>这个性质放回到 $P$ 中，等价于：$\forall 1\le i \le N,j\in(i-K,i+k),i\not=j$，若 $P_i$ 和 $P_j$ 满足偏序关系 $P_i&lt;P_j$，则无论怎样交换，最后在 $i,j$ 位置上的数仍满足偏序关系 $P_i&lt;P_j$。</p><blockquote><p>例子 $\quad$ 对于排列 $P=\{4,5,7,8,3,1,2,6\}$，有 $P_2=5,P_3=7$，在 $K=3$ 的情况下，无论怎样交换，两个位置上的数仍满足小于关系。例如交换成 $P’=\{1,2,6,7,5,3,4,8\}$，满足 $2&lt;6$。</p></blockquote><p>这样，我们可以找出所有的偏序关系，建图后通过拓扑排序，就可以知道这些数的最小排列。</p><p>例如，我们按照大于关系见图，即找到下标 $(i-K,i+K)$ 内比 $P_i$ 小的数连边，按照拓扑顺序给下标从 $N$ 到 $1$ 赋值。</p><p>但是这个图是 $O(NK)$ 大小的，无法建图，我们利用这道题的特殊性质：每个点可能连出边的节点范围是 $(i-K,i+K)$。一开始没有入度的点就是这个范围内的最大值，可以利用线段树查找。然后在左右子区间找区间最大值，再检查是否合法即可（见代码）。</p><p>时间复杂度 $O(N\log N)$。</p><h2 id="参考代码-5"><a href="#参考代码-5" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 500005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((tree[p].l+tree[p].r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls (p&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs (p&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">int</span> n,k,a[MAXN],ans[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r,maxx,pos;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[ls].maxx&gt;tree[rs].maxx)&#123;</span><br><span class="line">        tree[p].maxx=tree[ls].maxx;</span><br><span class="line">        tree[p].pos=tree[ls].pos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        tree[p].maxx=tree[rs].maxx;</span><br><span class="line">        tree[p].pos=tree[rs].pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    tree[p].l=l,tree[p].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[p].maxx=a[l];</span><br><span class="line">        tree[p].pos=l;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(l,mid,ls);</span><br><span class="line">    <span class="built_in">build</span>(mid+<span class="number">1</span>,r,rs);</span><br><span class="line">    <span class="built_in">update</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pii <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> &#123;-inf,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[p].l&amp;&amp;r&gt;=tree[p].r) <span class="keyword">return</span> &#123;tree[p].maxx,tree[p].pos&#125;;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(l,r,rs);</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(l,r,ls);</span><br><span class="line">    pii lc=<span class="built_in">query</span>(l,r,ls),rc=<span class="built_in">query</span>(l,r,rs),c;</span><br><span class="line">    <span class="keyword">if</span>(lc.first&gt;rc.first) c=lc;</span><br><span class="line">    <span class="keyword">else</span> c=rc;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> goal,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[p].l==tree[p].r)&#123;</span><br><span class="line">        tree[p].maxx=-inf;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(goal&lt;=mid) <span class="built_in">modify</span>(goal,ls);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">modify</span>(goal,rs);</span><br><span class="line">    <span class="built_in">update</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chk</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    pii now=<span class="built_in">query</span>(<span class="built_in">max</span>(<span class="number">1</span>,p-k+<span class="number">1</span>),<span class="built_in">min</span>(p+k<span class="number">-1</span>,n),<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(now.second==p&amp;&amp;now.first!=-inf) q.<span class="built_in">push</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">chk</span>(i);</span><br><span class="line">    <span class="type">int</span> now=n;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        ans[u]=now--;</span><br><span class="line">        <span class="built_in">modify</span>(u,<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> lpos=<span class="built_in">query</span>(<span class="built_in">max</span>(<span class="number">1</span>,u-k+<span class="number">1</span>),u<span class="number">-1</span>,<span class="number">1</span>).second;</span><br><span class="line">        <span class="type">int</span> rpos=<span class="built_in">query</span>(u+<span class="number">1</span>,<span class="built_in">min</span>(u+k<span class="number">-1</span>,n),<span class="number">1</span>).second;</span><br><span class="line">        <span class="built_in">chk</span>(lpos);<span class="built_in">chk</span>(rpos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 做题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 做题笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟退火</title>
      <link href="/post/cfd51e5a3eb8.html"/>
      <url>/post/cfd51e5a3eb8.html</url>
      
        <content type="html"><![CDATA[<p>模拟退火</p><h1 id="一、模拟退火"><a href="#一、模拟退火" class="headerlink" title="一、模拟退火"></a>一、模拟退火</h1><p>模拟退火算法用于计算运算量大或随机概率较高的多峰函数最值问题，在多次退火下，正确的概率表现的还是非常出色的。</p><h2 id="1-1-quad-劣解的接受与-Metropolis-准则"><a href="#1-1-quad-劣解的接受与-Metropolis-准则" class="headerlink" title="1.1  $\quad$ 劣解的接受与 Metropolis 准则"></a>1.1  $\quad$ 劣解的接受与 Metropolis 准则</h2><p>爬山算法只能应用于单峰函数，因为它每次只在附近只寻找更加优秀的解。放在多峰函数下容易陷入局部最大值，而无法找到全局最大值。</p><p>不同于爬山算法，在模拟退火算法中，我们在当前位置的一定范围内随机一个位置进行决策。如果这个决策比现在的决策更加优秀，我们无条件地接受；如果这个决策不如当前的决策我们以<strong>某种概率接受</strong>这个劣解。</p><p>具体地，我们像冶金工业退火一样，一开始，我们有一个<strong>温度</strong> $T$，表示当前的活跃性。这个温度随着随机次数的增加而降低，当最终小于某一个温度 $t_0$ 时就终止退火。</p><p>我们设接受一个比当前解劣 $\Delta E$ 的劣解的概率为 $P(\Delta E)$。根据 Metropolis 准则，我们划定这个概率，并让其与当前温度有关。即表示：随机次数较小时，我们有更大概率接受劣解；随机次数过多时，我们有较小的概率接受劣解。这样既能保证向着最大值的方向查找，又能避免陷入局部最大值。</p><p><strong>Metropolis 准则</strong> $\quad$ 当前温度为 $T$ 时，对于新状态 $S’$ 与当前最优状态 $S$ 的关于最优值的差为 $\Delta E\ge 0$，则发生状态转移（接受新状态）的概率为：</p><script type="math/tex; mode=display">P(\Delta E)=\begin{cases}1,&S'\text{比} S \text{更优,} \\e^{\frac{-\Delta E}{T}}, & \text{otherwise.}\end{cases}</script><p><img src="https://oi-wiki.org/misc/images/simulated-annealing.gif" alt=""></p><h2 id="1-2-quad-算法的实现"><a href="#1-2-quad-算法的实现" class="headerlink" title="1.2 $\quad$ 算法的实现"></a>1.2 $\quad$ 算法的实现</h2><p>一开始，我们有三个参数：</p><ul><li>初始温度 $T_0$；</li><li>降温系数 $d$，即每经过依次随机，温度变为 $T_0d$，$d$ 一般为趋近于 $1$ 的小数；</li><li>终止温度 $T_k$。</li></ul><p>对于每次随机，我们在当前最优解的附近随机新状态（随机范围也与当前温度有关），经计算后依靠 Metropolis 准则决定是否接受。</p><p>在依靠 Metropolis 准则决策时需要注意：</p><ul><li>在 C++ 语言中，我们可以用 <code>cmath</code> 库中的 <code>exp</code> 函数计算以 $e$ 为底的指数函数。具体地，可以用 <code>exp(-E/T)</code> 表示 $e^{\frac{-\Delta E}{T}}$；</li><li>注意计算接受劣解的概率时 $e$ 的指数是<strong>负数</strong>；</li><li>根据函数图像可知，对于函数 $f(x)=e^x(x<0)$ 的值域是 $(0,1)$。所以我们可以将 $e^{\frac{-\Delta E}{T}}$ 与一个在 $(0,1)$ 范围内的随机数比较。需要注意的是，因为随机次数越多，$T$ 越小，$\frac{-\Delta E}{T}$ 也越小，$f(x)$ 的函数值也越趋近于 $0$，接受的概率也应该越低。所以，**无论求最大值还是最小值，都只能依靠 `exp(-E/T) >= randFromRange(0,1)<code>或其他单调判断**来决策，**注意不等号方向和随机值范围，否则有概率退化成爬山算法**。其中</code>randFromRange` 函数是在 $(l,r)$ 范围内生成随机数。</li></ul><p>一般利用模拟退火解决问题，通常有如下设置：</p><ul><li>$T_0$ 一般取 $[2000,3000]$ 中的数；</li><li>$d$ 通常取 $0.999$，这个值取决于不同题目；</li><li>$T_k$ 通常取 $[10^{-16},10^{-5}]$ 之间；</li><li>通常情况下会进行多轮退火。每轮结束后不必要清空最优值，只需要重置温度等参数即可。</li></ul><h1 id="二、例题练习"><a href="#二、例题练习" class="headerlink" title="二、例题练习"></a>二、例题练习</h1><h2 id="2-1-quad-分金币"><a href="#2-1-quad-分金币" class="headerlink" title="2.1 $\quad$ 分金币"></a>2.1 $\quad$ 分金币</h2><p>题目来源：<a href="https://www.luogu.com.cn/problem/P3878">TJOI2010，洛谷P3878</a></p><blockquote><p><strong>例题</strong> $\quad$ 现在有 $n$ 枚金币，第 $i$ 枚金币的价值为 $v_i$。现在要把它们分成两部分，要求这两部分金币数目之差不超过 $1$，求这样分成的两部分金币的价值之差的最小值。</p></blockquote><p>考虑模拟退火，先把原序列随便分成两个部分，之后随机交换两个部分中的两个数。</p><p>核心代码如下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(time(<span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> temp=<span class="number">2333</span>;<span class="comment">//初始温度</span></span><br><span class="line">    <span class="keyword">while</span>(temp&gt;=<span class="number">1e-15</span>)&#123;<span class="comment">//终止温度</span></span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">rnd</span>()%mid+<span class="number">1</span>;<span class="comment">//在两个部分随机一个数交换</span></span><br><span class="line">        <span class="type">int</span> y=<span class="built_in">rnd</span>()%(n-mid)+mid+<span class="number">1</span>;</span><br><span class="line">        ll dis=<span class="built_in">abs</span>(s1-a[x]+a[y]-(s2-a[y]+a[x]));<span class="comment">//计算新贡献</span></span><br><span class="line">        ll D=dis-ans;</span><br><span class="line">        <span class="keyword">if</span>(D&lt;<span class="number">0</span>)&#123;<span class="comment">//优解，注意D和上文定义的E是相反数，D是负数表示的是解较优</span></span><br><span class="line">            ans=dis;</span><br><span class="line">            s1=s1-a[x]+a[y];</span><br><span class="line">            s2=s2-a[y]+a[x];</span><br><span class="line">            <span class="built_in">swap</span>(a[x],a[y]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">exp</span>(D/temp)&gt;<span class="number">1.</span>*(<span class="built_in">rnd</span>()%<span class="number">100000</span>)/<span class="number">100000</span>)&#123;<span class="comment">//劣解，注意随机范围和不等号方向</span></span><br><span class="line">            s1=s1-a[x]+a[y];</span><br><span class="line">            s2=s2-a[y]+a[x];</span><br><span class="line">            <span class="built_in">swap</span>(a[x],a[y]);</span><br><span class="line">        &#125;</span><br><span class="line">        temp*=<span class="number">0.999</span>;<span class="comment">//每次温度降低</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">        mid=(<span class="number">1</span>+n)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        s1=s2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=mid;i++) s1+=a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=mid+<span class="number">1</span>;i&lt;=n;i++) s2+=a[i];</span><br><span class="line">        ans=<span class="built_in">abs</span>(s1-s2);</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++) <span class="built_in">sa</span>();<span class="comment">//多进行几轮退火</span></span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-quad-Run-Away"><a href="#2-2-quad-Run-Away" class="headerlink" title="2.2 $\quad$ Run Away"></a>2.2 $\quad$ Run Away</h2><p>题目来源：<a href="https://www.luogu.com.cn/problem/SP34">SP34</a></p><blockquote><p><strong>例题</strong> $\quad$ 给定 $n$ 个点的坐标，在给定范围内找一个点，使得距离所有点的最小值最大。</p></blockquote><p>考虑模拟退火，一开始将这个点的位置设置在范围的正中心。每次在一定范围内随机新点，范围与当前温度有关，见代码。</p><p>核心代码如下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> temp=<span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">while</span>(temp&gt;=<span class="number">1e-4</span>)&#123;</span><br><span class="line">        <span class="comment">//随机新点</span></span><br><span class="line">        <span class="type">double</span> nowx=<span class="built_in">getrnd</span>(<span class="built_in">max</span>(<span class="number">0.</span>,nx-temp),<span class="built_in">min</span>(<span class="number">1.</span>*X,nx+temp));</span><br><span class="line">        <span class="type">double</span> nowy=<span class="built_in">getrnd</span>(<span class="built_in">max</span>(<span class="number">0.</span>,ny-temp),<span class="built_in">min</span>(<span class="number">1.</span>*Y,ny+temp));</span><br><span class="line">        <span class="comment">//计算新值</span></span><br><span class="line">        <span class="type">double</span> dis=<span class="built_in">calc</span>(nowx,nowy);</span><br><span class="line">        <span class="type">double</span> D=dis-ans;</span><br><span class="line">        <span class="comment">//方案较优</span></span><br><span class="line">        <span class="keyword">if</span>(D&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            ans=dis;</span><br><span class="line">            ansx=nx=nowx;</span><br><span class="line">            ansy=ny=nowy;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//以一定概率接受劣解，注意不等号方向</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">exp</span>(D/temp)&gt;=<span class="built_in">getrnd</span>(<span class="number">0</span>,<span class="number">1</span>))&#123;</span><br><span class="line">            nx=nowx;</span><br><span class="line">            ny=nowy;</span><br><span class="line">        &#125;</span><br><span class="line">        temp*=<span class="number">0.999</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        cin&gt;&gt;X&gt;&gt;Y&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;ax[i]&gt;&gt;ay[i];</span><br><span class="line">        ansx=nx=<span class="number">1.</span>*X/<span class="number">2</span>;</span><br><span class="line">        ansy=ny=<span class="number">1.</span>*Y/<span class="number">2</span>;</span><br><span class="line">        ans=<span class="built_in">calc</span>(nx,ny);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++) <span class="built_in">sa</span>();<span class="comment">//多进行几次退火</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The safest point is (%.1lf, %.1lf).\n&quot;</span>,ansx,ansy);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随机化算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渐近记号与主定理</title>
      <link href="/post/afdc0807f110.html"/>
      <url>/post/afdc0807f110.html</url>
      
        <content type="html"><![CDATA[<p>渐近记号与主定理</p><p>渐近记号用来描述函数的运行时间，刻画运行时间的上界、确界、下界。使用递归定义的函数通常使用主定理分析时间复杂度。</p><h1 id="一、渐近记号"><a href="#一、渐近记号" class="headerlink" title="一、渐近记号"></a>一、渐近记号</h1><p>本节定义一些基本函数，用于描述时间复杂度。</p><h2 id="1-1-quad-渐进记号、函数与运行时间"><a href="#1-1-quad-渐进记号、函数与运行时间" class="headerlink" title="1.1 $\quad$ 渐进记号、函数与运行时间"></a>1.1 $\quad$ 渐进记号、函数与运行时间</h2><h3 id="1-1-1-quad-Theta-记号"><a href="#1-1-1-quad-Theta-记号" class="headerlink" title="1.1.1 $\quad$ $\Theta$ 记号"></a>1.1.1 $\quad$ $\Theta$ 记号</h3><p>我们使用 $\Theta$ 记号描述函数的<strong>渐近紧确界</strong>。</p><p>形式化地， $\Theta (g(n))=\{f(n):\exists c_1,c_2,n_0:\forall n\ge n_0,0\le c_1g(n)\le f(n)\le c_2g(n) \}$。</p><p>其中，冒号意为“使得”。</p><p>也就是说，存在常量 $c_1,c_2,n_0$，可以将 $f(n)$ 夹入 $c_1g(n)$ 和 $c_2(n)$ 中。$\Theta(g(n))$ 要求每个成员 $f(n)\in \Theta(g(n))$ <strong>渐近非负</strong>。</p><p>我们通常使用 $\Theta(1)$ 表示常量或某个变量的常量函数。</p><h3 id="1-1-2-quad-O-记号"><a href="#1-1-2-quad-O-记号" class="headerlink" title="1.1.2 $\quad$ $O$ 记号"></a>1.1.2 $\quad$ $O$ 记号</h3><p>当函数只有一个<strong>渐近上界</strong>时，使用 $O$ 记号。</p><p>形式化地， $O (g(n))=\{f(n):\exists c,n_0:\forall n\ge n_0,0\le f(n)\le cg(n) \}$。</p><p>使用 $O$ 记号描述上界，我们常常可以检查算法的总体结构来描述算法运行的时间，如循环嵌套等，这里不再展开。</p><h3 id="1-1-3-quad-Omega-记号"><a href="#1-1-3-quad-Omega-记号" class="headerlink" title="1.1.3 $\quad$ $\Omega$ 记号"></a>1.1.3 $\quad$ $\Omega$ 记号</h3><p>$\Omega$ 记号提供了函数的<strong>渐近下界</strong>。</p><p>形式化地，$\Omega (g(n))=\{f(n):\exists c,n_0:\forall n\ge n_0,0\le cg(n)\le f(n)\}$。</p><p>我们不难有如下定理：</p><p><strong>定理</strong> $\quad$ 对于任意两个函数 $f(n),g(n)$，我们有 $f(n)=\Theta(g(n))$，当且仅当 $f(n)=O(g(n))$ 且 $f(n)=\Omega(g(n))$。</p><h3 id="1-1-4-quad-o-记号"><a href="#1-1-4-quad-o-记号" class="headerlink" title="1.1.4 $\quad$ $o$ 记号"></a>1.1.4 $\quad$ $o$ 记号</h3><p>前面的 $O$ 记号描述的渐近上界，我们使用 $o$ 记号来描述一个<strong>非渐近紧确的上界</strong>，如 $2n=o(n^2)$ 而 $2n^2\not=o(n^2)$。</p><p>形式化地，$o (g(n))=\{f(n):\forall c&gt;0,\exists n_0&gt;0:\forall n\ge n_0, 0\le f(n) &lt; cg(n) \}$。</p><p>直观上，在 $o$ 记号中，当 $n\rightarrow + \infty$，函数$f(n)$ 相对于 $g(n)$ 来说变得微不足道了。</p><h3 id="1-1-5-quad-omega-记号"><a href="#1-1-5-quad-omega-记号" class="headerlink" title="1.1.5 $\quad$ $\omega$ 记号"></a>1.1.5 $\quad$ $\omega$ 记号</h3><p>我们使用 $\omega$ 记号描述一个<strong>非渐近紧确的下界</strong>。</p><p>形式化地，$\omega (g(n))=\{f(n):\forall c&gt;0,\exists n_0&gt;0:\forall n\ge n_0, 0\le cg(n) &lt; f(n) \}$。</p><h2 id="1-2-quad-渐近函数的性质"><a href="#1-2-quad-渐近函数的性质" class="headerlink" title="1.2 $\quad$ 渐近函数的性质"></a>1.2 $\quad$ 渐近函数的性质</h2><p>我们令 $f(n),g(n)$ 渐近为正。</p><p>渐近函数具有<strong>传递性</strong>，即 $f(n)=\Theta (g(n)),g(n)=\Theta h(n)\Rightarrow f(n)=\Theta(h(n))$。其他记号同理。</p><p>渐近函数具有<strong>自反性</strong>，即 $f(n)=\Theta f(n)$，对于 $O,\Omega$ 记号同理。</p><p>$\Theta$ 函数具有<strong>对称性</strong>，即 $f(n)=\Theta(g(n))$ 当且仅当 $g(n)=\Theta (f(n))$。</p><p>渐近函数具有<strong>转置对称性</strong>，即 $f(n)=O(g(n))$ 当且仅当 $g(n)=\Omega f(n)$；$f(n)=o(g(n))$ 当且仅当 $g(n)=\omega (f(n))$。</p><h1 id="二、使用主方法求解递归式"><a href="#二、使用主方法求解递归式" class="headerlink" title="二、使用主方法求解递归式"></a>二、使用主方法求解递归式</h1><p>对于类似</p><script type="math/tex; mode=display">T(n)=aT(n/b)+f(n)</script><p>的递归式，通常使用主定理求解其渐近界。</p><h2 id="2-1-quad-主定理"><a href="#2-1-quad-主定理" class="headerlink" title="2.1 $\quad$ 主定理"></a>2.1 $\quad$ 主定理</h2><p><strong>定理（主定理）</strong> $\quad$ 令 $a\ge 1$ 和 $b\ge 1$ 是常数，$f(n)$ 是一个函数，$T(n)$ 是定义在非负整数上的递归式：</p><script type="math/tex; mode=display">T(n)=aT(n/b)+f(n)</script><p>我们将其中的 $n/b$ 解释为 $\lceil n/b \rceil$ 或者 $\lfloor n/b \rfloor$，那么 $T(n)$ 有如下渐近界：</p><ol><li>若对某个常数 $\epsilon &gt;0$ 有 $f(n)=O(n^{\log_b a-\epsilon})$，则有 $T(n)=\Theta(n^{\log_ba})$。</li><li>若 $f(n)=\Theta(n^{\log_b a})$，则 $T(n)=\Theta(n^{\log_b a}\lg n)$。</li><li>若对某个常数 $\epsilon&gt;0$ 有 $f(n)=\Omega(n^{\log_b a+\epsilon})$，且对某个常数 $c&lt;1$ 和所有足够大的 $n$ 有 $af(n/b)\le cf(n)$，则 $T(n)=\Theta(f(n))$。</li></ol><p>上面就是主定理。注意这三种情况并未覆盖 $f(n)$ 的所有可能性，下面将说明如何正确地使用主定理。</p><h2 id="2-2-quad-使用主方法"><a href="#2-2-quad-使用主方法" class="headerlink" title="2.2 $\quad$ 使用主方法"></a>2.2 $\quad$ 使用主方法</h2><p>我们把使用主定理求解递归式的方法称为<strong>主方法</strong>。我们只需要确定一个递归式对于主定理的哪种情况成立，即可得到解。</p><blockquote><p> <strong>例子</strong> $\quad$ 对于下面的递归式，求解其渐近界。</p><script type="math/tex; mode=display">T(n)=9T(n/3)+n</script></blockquote><p>对于这个递归式，我们有 $a=9,b=3,f(n)=n$，因此 $n^{\log b a}=b^{\log_3 9}=\Theta(n^2)$。由于 $f(n)=O(n^{\log_39-\epsilon})$，其中 $\epsilon=1$，因此可以应用于情况1，得到 $T(n)=\Theta(n^2)$。</p><blockquote><p><strong>例子</strong> $\quad$ 对于下面的递归式，求解其渐近界。</p><script type="math/tex; mode=display">T(n)=T(2n/3)+1</script></blockquote><p>其中，$a=1,b=\frac{2}{3},f(n)=1$，因此 $n^{\log_b a}=n^0=1$。由于 $f(n)=\Theta(n^{\log _b a})=\Theta(1)$，应用于情况2，得到 $T(n)=\Theta(\lg n)$。</p><blockquote><p><strong>例子</strong> $\quad$ 对于下面的递归式，求解其渐近界。</p><script type="math/tex; mode=display">T(n)=3T(n/4)+n\lg n</script></blockquote><p>其中，$a=3,b=4,f(n)=n\lg n$，因此 $n^{\log_b a}=O(n^{0.793})$。由于 $f(n)=\Omega(b^{\log_4 3-\epsilon})$，其中 $\epsilon\approx 0.2$，因此，如果可以证明正则条件成立，可应用于情况3。当 $n$ 足够大时，有 $af(n/b)\le cf(n)$，得到 $T(n)=\Theta(n\lg n)$。</p><p>上面给出了三种例子，只要算出 $n^{\log_b a}$ 的渐近界，与 $f(n)$ 比较，就可以求出递归式的渐近界。</p>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后缀数组与应用</title>
      <link href="/post/2f92b89a3659.html"/>
      <url>/post/2f92b89a3659.html</url>
      
        <content type="html"><![CDATA[<p>后缀数组与应用</p><p>后缀数组 (Suffix Array) 是处理字符串问题的有力工具之一，通常利用后缀数组 $sa$ 处理字符串子串与后缀串排序、公共前缀等问题。</p><h1 id="一、后缀数组"><a href="#一、后缀数组" class="headerlink" title="一、后缀数组"></a>一、后缀数组</h1><p>通过计算后缀数组与排名数组，辅助解决系列问题。</p><h2 id="1-1-quad-约定与定义"><a href="#1-1-quad-约定与定义" class="headerlink" title="1.1 $\quad$ 约定与定义"></a>1.1 $\quad$ 约定与定义</h2><p>对于一个长度为 $n$ 的字符串 $s$，我们定义 $s_i\dots s_n$ 构成的子串为 $s$ 在 $i$ 位置上的<strong>后缀</strong>，下面给出几个函数的定义：</p><ul><li><p>$sa_i$：<strong>后缀数组</strong>。表示 $s$ 的所有后缀串中，按字典序排名，第 $i$ 小的后缀串的起始位置。</p></li><li><p>$rk_i$：<strong>名次数组</strong>。表示起始位置为 $i$ 的后缀串的排名（按字典序）。</p></li></ul><p>不难发现，上面两个函数<strong>互为反函数</strong>，即：</p><script type="math/tex; mode=display">\begin{aligned}sa[rk[i]]=i\\rk[sa[i]]=i\end{aligned}</script><ul><li>$height_i$：<strong>高度数组</strong>。表示排名为 $i$ 的后缀串与排名为 $i-1$ 的后缀串的最长公共前缀。特殊地，$height_1=0$，因为没有比它排名小的后缀串。形式化地：</li></ul><script type="math/tex; mode=display">ht[i]=\text{LCP}(sa[i],sa[i-1])</script><p>其中，$\text{LCP}(s,t)$ 表示字符串 $s,t$ 的最长公共前缀。</p><ul><li>$h_i$：<strong>公共前缀数组</strong>。表示起始位置为 $i$ 的后缀串，与比其排名小 $1$ 的后缀串的最长公共前缀，即：</li></ul><script type="math/tex; mode=display">h[i]=height[rk[i]]</script><blockquote><p><strong>例子</strong> $\quad$ 给定字符串 $s=aabaaaab$，其后缀数组、名次数组、高度数组、公共前缀数组为别为：</p><script type="math/tex; mode=display">\begin{array}{}&1&2&3&4&5&6&7&8\\s:&a&a&b&a&a&a&a&b\\sa:&4&5&6&1&7&2&8&3\\rk:&4&6&8&1&2&3&5&7\\height:&0&3&2&3&1&2&0&1\\h:&3&2&1&0&3&2&1&0\end{array}</script></blockquote><h2 id="1-2-quad-后缀数组的计算"><a href="#1-2-quad-后缀数组的计算" class="headerlink" title="1.2 $\quad$ 后缀数组的计算"></a>1.2 $\quad$ 后缀数组的计算</h2><p><strong>前置芝士：倍增法、基数排序。</strong></p><p>我们有暴力的做法，对所有后缀串排序，但是这个复杂度并不优秀。</p><p>我们考虑<strong>倍增地</strong>计算后缀数组。也就是说，每次我们计算一段长形如 $[i,i+2^k-1]$ 的子串，而后合并前后两个子串，并按照两个子串的各自的关键字进行排序合并。下面我们考虑怎样合并两个已经排好序的更小的子串，使其拼成一个更长的、有序的子串，进而贡献给后缀数组。如下图：</p><p><img src="https://oi-wiki.org/string/images/sa2.png" alt=""></p><p>这张图中，我们进行了 $O(\log n)$ 次倍增。第一次，我们就以字典序为前后两个关键字合并。其后，我们分别以前面一段的名次、后面一段的名次，为两个关键字进行合并。我们每一次合并需要对 $n$ 个数的两个关键字排序，直接使用快速排序可以获得 $O(n\log^2 n)$ 的复杂度。一定程度上可以接受，但是不是很优秀，我们希望消去一个 $\log$ 的复杂度。</p><p>考虑使用基数排序替换快速排序，每次先对第二关键字开桶记录，而后对第一关键字开桶记录。这样我们放入第一关键字桶的顺序已经满足排序顺序，换句话说，已经满足第二关键字递增的顺序。</p><p>时间复杂度 $O(n\log n)$。</p><h2 id="1-3-quad-代码实现"><a href="#1-3-quad-代码实现" class="headerlink" title="1.3 $\quad$ 代码实现"></a>1.3 $\quad$ 代码实现</h2><p>定义以下变量：</p><ul><li>$m$：桶中最大元素，即桶的上限；</li><li>$c_i$：数组为计数桶。</li><li>$x_i$：起始位置为 $i$ 的串的第一关键字；</li><li>$y_i$：第二关键字排名为 $i$ 的串的起始位置，即 $x$ 的位置。</li></ul><p>下面描述算法流程。</p><ol><li><p>对于第一次递增，我们直接按照每单个字符排序，将每个长度为 $1$ 的串的第一关键字放入桶中。</p></li><li><p>然后对桶 $c$ 进行前缀和处理，这样我们确定了第一关键字为 $k$ 的元素最大排在第几名。</p></li><li><p>我们对后缀数组进行第一次赋值，表示长度为 $1$ 的后缀串排名第 $i$ 的串的起始位置为 $sa_i$。这里注意需要倒序枚举 $i$，因为我们只划定了排序名次的上界。确切的名次需要由上界依次递减得到。</p></li><li><p>而后我们进行更多次的倍增，处理长度为 $k$ 的串。考虑到如果合并两个串时，第一个串的起始位置 $i\ge n-k+1$，我们第二个串就是空串，需要提前处理。而且这些串合并后，排名一定比第二个串非空的靠前。下面的 $num$ 表示第二关键字排名。注意 $y$ 数组保存的是对应的第一关键字的位置。</p></li><li><p>而后我们对于所有可能的第二串加入 $y$ 数组。只有 $sa[i]&gt; k$ 时才可行（短于倍增长度无法找到第一串）。</p></li><li><p>仿照第一次倍增的思路处理第一关键字桶。</p></li><li><p>基数排序，因为 $y$ 的顺序是按照第二关键字的顺序来排的，第二关键字靠后的，在同一个第一关键字桶中排名越靠后。</p></li><li><p>清空第一关键字数组，并根据当前值重新赋关键字。注意到此时我们直接按后缀数组赋值即可，本身有序。更新桶上限 $m$。</p></li></ol><p>完整代码如下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Suffix_Array</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;(s+<span class="number">1</span>);                                                       <span class="comment">//Step.1</span></span><br><span class="line">    n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    m=<span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) c[x[i]=s[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=m;i++) c[i]+=c[i<span class="number">-1</span>];                               <span class="comment">//Step.2</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i;i--) sa[c[x[i]]--]=i;                               <span class="comment">//Step.3</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k&lt;&lt;=<span class="number">1</span>)&#123;                                          <span class="comment">//Step.4</span></span><br><span class="line">        <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n-k+<span class="number">1</span>;i&lt;=n;i++) y[++num]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(sa[i]&gt;k) y[++num]=sa[i]-k;           <span class="comment">//Step.5</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) c[i]=<span class="number">0</span>;                                 <span class="comment">//Step.6</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) c[x[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=m;i++) c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n;i;i--) sa[c[x[y[i]]]--]=y[i];                     <span class="comment">//Step.7</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) lstx[i]=x[i],x[i]=<span class="number">0</span>;                    <span class="comment">//Step.8</span></span><br><span class="line">        num=<span class="number">1</span>;</span><br><span class="line">        x[sa[<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(lstx[sa[i]]==lstx[sa[i<span class="number">-1</span>]]&amp;&amp;lstx[sa[i]+k]==lstx[sa[i<span class="number">-1</span>]+k]) x[sa[i]]=num;</span><br><span class="line">            <span class="keyword">else</span> x[sa[i]]=++num;</span><br><span class="line">        &#125;</span><br><span class="line">        m=num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、子串最长公共前缀"><a href="#二、子串最长公共前缀" class="headerlink" title="二、子串最长公共前缀"></a>二、子串最长公共前缀</h1><p>我们记 $\text{LCP}(i,j)$ 表示字符串排名为 $i$ 的后缀串，和排名为 $j$ 的后缀串的最长公共前缀，根据性质计算。</p><h2 id="2-1-quad-基本性质"><a href="#2-1-quad-基本性质" class="headerlink" title="2.1 $\quad$ 基本性质"></a>2.1 $\quad$ 基本性质</h2><p><strong>性质 1</strong> $\quad$ $\text{LCP}(i,j)=\text{LCP}(j,i)$。</p><p><strong>性质 2</strong> $\quad$ $\text{LCP}(i,i)=\text{len}(sa[i])=n-sa[i]+1$。其中，$\text{len(i)}$ 表示起始位置为 $i$ 的后缀串的长度。</p><p>上面两个性质显然。</p><p><strong>性质 3</strong> $\quad$ $\forall 1\le i\le j\le k\le n\ ,\ \text{LCP}(i,k)=\min(\text{LCP}(i,j),\text{LCP}(j,k))$ 。</p><p>因为是按照后缀排序的，所以易证。</p><p>进而得出，按照后缀排完序的后缀串，两个后缀串的最长公共前缀就等于 $height_{i+1}\cdots height_j$ 取最小值。<br><strong>性质 4</strong> $\quad$ $\forall 1&lt;i\le j\le k\le n\ ,\ \text{LCP}(i,k)=\min(\text{LCP}(j,j-1))$。</p><p><strong>性质 5</strong> $\quad$ $h_i\ge h_{i-1}-1$，这是<strong>关键性质</strong>。</p><p>考虑粗略证明性质5。令第 $i-1$ 位为字符 $s$，则 $i-1$ 位置的后缀为 $sX$，$i$ 位置的后缀为 $X$。</p><p>我们找到后缀排名在 $sX$ 前一名的后缀，即 $sa[rk[i-1]-1]$，记 $k$ 为这个排名。这两个后缀的最长公共前缀就是 $height[rk[i-1]]$。分成两类情况讨论：</p><ul><li>如果第 $k$ 个串和第 $i-1$ 个串第一个字符不同，即没有公共前缀，即 $height[rk[i-1]]=0$，一定有 $height[rk[i]]\ge height[rk[i-1]]+1$，即 $h[i]\ge h_[i-1]-1$。</li><li>如果第 $k$ 个串和第 $i-1$ 个串第一个字符相同，可以表示第 $k$ 个串为 $sY$。一定有 $sY&lt;sX\Rightarrow Y&lt;X$。那么第 $k+1$ 个字符串要排名在 $i$ 前面。那么第 $k+1$ 个字符串和 $i$ 的最长公共前缀就是 $height[rk[i-1]]-1$。根据性质4可得 $h[i]\ge h[i-1]=1$。</li></ul><h2 id="2-2-quad-后缀排序最长公共前缀的计算"><a href="#2-2-quad-后缀排序最长公共前缀的计算" class="headerlink" title="2.2 $\quad$ 后缀排序最长公共前缀的计算"></a>2.2 $\quad$ 后缀排序最长公共前缀的计算</h2><p>我们利用性质5计算后置排序后的 $height$ 数组和 $h$ 数组。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">getheight</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) rnk[sa[i]]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(rnk[i]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(j) j--;</span><br><span class="line">        <span class="keyword">while</span>(i+j&lt;=n&amp;&amp;sa[rnk[i]<span class="number">-1</span>]+j&lt;=n&amp;&amp;s[i+j]==s[sa[rnk[i]<span class="number">-1</span>]+j]) j++;</span><br><span class="line">        heigh[rnk[i]]=j;                  <span class="comment">//h[i]=height[rnk[i]]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ramsey 定理</title>
      <link href="/post/a1e7c3dbc7c4.html"/>
      <url>/post/a1e7c3dbc7c4.html</url>
      
        <content type="html"><![CDATA[<p>Ramsey 定理</p><h1 id="一、Ramsey-定理"><a href="#一、Ramsey-定理" class="headerlink" title="一、Ramsey 定理"></a>一、Ramsey 定理</h1><p>Ramsey 定理是关于鸽巢原理的重要拓展，甚至可以从另一个维度解释鸽巢原理。</p><h2 id="1-1-quad-基本定义"><a href="#1-1-quad-基本定义" class="headerlink" title="1.1 $\quad$ 基本定义"></a>1.1 $\quad$ 基本定义</h2><p>我们先给出一些定义。</p><p>对于由 $n$ 个点构成的图，两两节点直接都有边直接相连，则成这张图是<strong>完全图</strong>。</p><p>我们把 $p$ 个点的完全图，记作 $K_p$。</p><p>我们用两种颜色对所有边进行染色，染色成 $a$ 或者 $b$，如果下面两个条件至少满足其一：</p><ol><li>存在 $n$ 个点的子集，使其构成的完全图中所有边的颜色为同一种颜色 $a$；</li><li>存在 $m$ 个点的子集，使其构成的完全图中所有边的颜色为同一种颜色 $b$。</li></ol><p>我们记作</p><script type="math/tex; mode=display">K_p\rightarrow K_m,K_n</script><p>我们记 Ramsey 数 $r(n,m)$ 是使 $K_p\rightarrow K_n,K_m$ 的最小正整数 $p$。我们不难发现</p><script type="math/tex; mode=display">r(n,m)=r(m,n)</script><blockquote><p><strong>例子</strong> $\quad$ 在 $6$ 个人构成的集合中，要么 $3$ 个人互相认识，要么 $3$ 个人互相不认识。</p></blockquote><p>我们给出这个例子的证明。</p><p>我们对于 $6$ 个点的完全图，两个人间互相认识则边染红色，否则边染蓝色。考虑图中的任意一个点 $p$，与其相连的 $5$ 条边中，至少有 $3$ 条边颜色相同（根据鸽巢原理可得）。因为情况对称，我们令染红色的边数至少为 $3$，那我们举出这三条边连接的三个点 $a,b,c$，分类考虑以下情况：</p><ul><li>如果由 $a,b,c$ 三个点构成的完全图中所有边都是蓝色，那么这三个点构成一个蓝 $K_3$。</li><li>如果由 $a,b,c$ 三个点构成的完全图中有一个边是红色，那么这条红边连接的两个点，和点 $p$ 构成一个红 $K_3$。</li></ul><p>则红 $K_3$ 和蓝 $K_3$ 两个至少有一个成立。即证明了这个结论。</p><h2 id="1-2-quad-基本的-Ramsey-定理"><a href="#1-2-quad-基本的-Ramsey-定理" class="headerlink" title="1.2 $\quad$ 基本的 Ramsey 定理"></a>1.2 $\quad$ 基本的 Ramsey 定理</h2><p>下面给出更广泛的定理和证明。</p><p><strong>定理</strong> $\quad$ $\forall n,m\ge 2,\exists p\in \mathbb{N}_+$，使得</p><script type="math/tex; mode=display">K_p\rightarrow K_m,K_n</script><p><strong>证明</strong> $\quad$ 我们很容易确定 $r(2,n)$ 和 $r(n,2)$ 的值。下面证明 $r(2,n)=r(n,2)=n$。</p><ul><li>确定 $r(2,n)\leq n$：如果所有边都是同一种颜色，则 $K_n$ 成立；否则 $K_2$ 成立。</li><li>确定$r(2,n)&gt;n-1$：如果有一个红 $K_{n-1}$，我们并不能得到蓝 $K_2$ 或者红 $K_n$。</li></ul><p>下面用归纳法证明广泛结论。</p><p>假设 $m,n\ge 3$ ，归纳假设为 $r(m-1,n)$ 和 $r(m,n-1)$ 存在。设 $p=r(m-1,n)+r(m,n-1)$，下面证明 $K_p\rightarrow K_m,K_n$ 存在。</p><p>假设 $K_p$ 已经通过某种方式完成红色和蓝色的染色，我们对其中的一个节点 $x$，记 $B_x,R_x$ 分别为通过蓝色边和红色边在图中与 $x$ 相连的点的集合。有</p><script type="math/tex; mode=display">|R_x|+|B_x|=p-1=r(m-1,n)+r(n,m-1)-1</script><p>也就是说，以下两个条件至少有一个成立：</p><ol><li>$|R_x|\ge r(m-1,n)$；</li><li>$|B_x|\ge r(m,n-1)$。</li></ol><p>可以通过鸽巢原理说明这一点，因为如果两个都不成立，则 $|R_x|+|B_x|\le r(m+1,n)+r(m,n-1)-1=p-2$，矛盾。</p><p>我们假设条件1成立，也就是 $|R_x|\ge r(m-1,n)$，说明下面两个条件至少有一个成立：</p><ul><li>可能存在一个红 $K_{m-1}$，这个图的节点就是 $R_x$ 中的节点。如果我们将 $x$ 加入这个图，因为与 $x$ 相连的边为红色，就可以得到一个 $K_m$，完成证明；</li><li>可能存在一个蓝 $K_n$，这时我们直接完成了证明。</li></ul><p>所以此时结论成立。同理，若条件2成立，则结论也一定成立。</p><p><strong>证毕</strong>。</p><p>上面的证明不仅证明了 Ramsey 数的存在，也给出了不等式</p><script type="math/tex; mode=display">r(m,n)\le r(m-1,n)+r(m,n-1)\quad (m,n\ge 3)</script><p>设函数</p><script type="math/tex; mode=display">f(m,n)=\dbinom{m+n-2}{m-1}\quad (m,n\ge 2)</script><p>得到</p><script type="math/tex; mode=display">f(m,n)=\dbinom{m+n-3}{m-1}+\dbinom{m+n-3}{m-2}=f(m-1,n)+f(m,n-1)</script><p>这是一个等式。因为 $r(2,n)=n=f(2,n)\ ,\ r(m,2)=m=f(m,2)$，所得 Ramsey 数满足</p><script type="math/tex; mode=display">r(m,n)\le \dbinom{m+n-2}{m-1}=\dbinom{m+n-2}{n-1}</script><h2 id="1-3-quad-Ramsey-定理的推广"><a href="#1-3-quad-Ramsey-定理的推广" class="headerlink" title="1.3 $\quad$ Ramsey 定理的推广"></a>1.3 $\quad$ Ramsey 定理的推广</h2><p>上面我们将一个完全图每条边染成了 $2$ 种颜色，我们将其扩展，对一个点数为 $n$ 的完全图，用 $k$ 种颜色染色。如果 $n_1,n_2,\cdots,n_k\ge 2$，则存在 $p$ 使得：</p><script type="math/tex; mode=display">K_p\rightarrow K_{n_1},K_{n_2}\cdots,K_{n_k}</script><p>使得该结论成立的最小整数 $p$ 称为 Ramsey 数 $r(n_1,n_2,\cdots ,n_k)$。</p><p>如果我们把点对（两个元素的子集）扩展成 $t$ 个元素的子集，令 $K_n^t$ 表示 $n$ 元素集合种所有 $t$ 个元素的子集的集合，扩展 Ramsey 定理。</p><p>给定整数 $t\ge 2$ 和整数 $q_1,q_2,\cdots ,q_k\ge t$，存在整数 $p$，使得</p><script type="math/tex; mode=display">K_p^t\rightarrow K_{p_1}^t,K_{p_2}^t,\cdots,K_{p_k}^t</script><p>满足结论的最小整数 $p$ 称为 Ramsey 数 $r(q_1,q_2,\cdots,q_k)$。</p><p>$q_1,q_2,\cdots,q_k$ 的排列并不影响 Ramsey 数的表现。</p>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记 《活着》</title>
      <link href="/post/bb1c83aedd06.html"/>
      <url>/post/bb1c83aedd06.html</url>
      
        <content type="html"><![CDATA[<p>活着</p><p>余华</p><p>2023.10.01 记</p><hr><p>面朝大海 春暖花开 ——读《活着》有感</p><p>自从买这本书时，就看到不止一条评论：余华老师为什么要写得这么惨？但纵观福贵一生，也许在他的眼中，面对生活的态度和我们有所不同吧！</p><p>福贵自富家出身，祖上几代也想兴盛家业，但因子女无能日益破败。青年富贵正是在肆意放纵中度过的，也因此亲手赌出了自己的家产。眼看着祖上的东西丢得一干二净，亲人相继离世，前途的微光愈加消散……</p><p>但在福贵眼里，命运似乎是注定的。他在经历次次打击后，却没有因此堕落，而是坦然地活下去。</p><p>他的一生是乐观的，活着就是为了“活着”本身。对比《骆驼祥子》中的祥子，开始十分努力，而后经历世事变迁，自己也慢慢沦落，活得已不成人形。和祥子活在几乎同一个历史背景的福贵，为什么并没有因家庭破碎、事业破败而选择“放弃活的意义”？就在于自身面对生活的态度。前者虽然努力，但仍以乐观的态度对待“天命”，却早已是“成功地活着”。</p><p>他的一生是宽容的，活着只为了更好地生活。他在极度饥荒时，面对向老丈人借来的为数不多的几粒米，不吝啬于借给队长一部分；面对儿子有庆不公平地以“借血”为由死去，他并不责怪春生。因为他知道，谁的生活都是艰难的，没有被逼无奈也不会出此下策。</p><p>所以，“惨”可能并不是为写而写，更多地，可能时一个无法改变天命的普通人的映射。正如作者在序中写的：</p><blockquote><p>  作家的使命不是发泄，不是控诉活着揭露。他应该向人们展示高尚。这里所说的高尚不是那种单纯的美好，而是对一切事物理解之后的超然、对善和恶的一视同仁，用同情的目光看待世界。</p></blockquote><p>尽管“惨”可能是人生的旋律，但一定不是人生的主题。它的主题应是“希望”。所以，人生遇挫之时，谨记“面朝大海，春暖花开”，而不是悲观地走向汪洋无望的深海——尽管不知以诗人的绝笔诗为题是否合适……</p><p>向死而生，有希望怎么都好。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『初丶晴』的模拟赛题解</title>
      <link href="/post/7cf54d2e491b.html"/>
      <url>/post/7cf54d2e491b.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="欸? 这个『通行证』看着不太对, 再试试看呢..." data-whm="密码不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a513dcaa343746b0f1a5467ebb86072dcf8886cdeaf7aa57f109fa9f665dbab4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章被主人加密了, 小窝要核验主人给的『通行证』.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 做题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记 《解忧杂货铺》</title>
      <link href="/post/eebaee81d76a.html"/>
      <url>/post/eebaee81d76a.html</url>
      
        <content type="html"><![CDATA[<p>解忧杂货店</p><p>[日]东野圭吾</p><p>2023.07.30 记</p><hr><p>最意味深长的一句话，莫过于作者在小说结尾处写下的，一份对『无名氏朋友』的寄语：</p><blockquote><p>地图是一张白纸，这当然很伤脑筋。任何人都会不知所措。</p><p>可是换个角度来看，正因为是一张白纸，才可以随心所欲地描绘地图。一切全在你自己。对你来说，一切都是自由的，在你面前是无限的可能。这可是很棒的事啊。<strong>我由衷祈祷你可以相信自己，无悔地燃烧自己的人生。</strong></p></blockquote><p>回顾整本书，情节错综，人物也有很多。但是越往后读越能感受到不同人的情节间的交叉、错综，甚至是对人生有着相互的影响。</p><p>整本书主要讲述浪矢雄治先生开的『解忧杂货店』的形形色色的小故事，其中暗线是杂货店和各位人物与孤儿院『丸光园』之间的联系。通过办理解忧业务，浪矢先生曾在儿子面前一再坚持，而最终因病去世。</p><p>但这间杂货店仿佛有魔法一般。杂货店仿佛能沟通今昔，相互来信。情节部分就不过多赘述了，总而言之写得非常圆润，给人一种即在情理之中，又在意料之外的感觉。</p><p>要说起能从书中读到什么，还要从那个寄语说起。</p><p>最近心烦意乱，总觉得有种莫名的压力，抑或是恐慌，故找到这本书，想让杂货店也为我“解解忧”。</p><p>在爱情和梦想之间徘徊不定、漂泊远方只为实现音乐梦想、面临家庭巨变无所适从……</p><p>这都是故事里的人们提出的烦恼。而他们的相遇、坚持、激励、奉献、不离不弃的陪伴，终究是他们都在某种意义上意识到了生而为人的价值，不论之前的选择是否是最优的。</p><p>人物之间的互相照应，是本只有一颗弱小脆弱心灵的丸光园孤儿，逐步迈向成长的阶梯，明白人世间的道理，最后懂得感恩，长大后终于明白了命运的抉择。</p><p>信任，在文中表现得尤为重要。不仅要相信自己，更要相信身边的每一个人，相信每一个可能为你好的建议（或许这些当时觉得并不正确）。只有团结和信任，才能使人在团体中得到发展。</p><p>若对于个体，重要的是永不言弃。坚信自己认为的正确道路，在他人的共同助理下，方可实现梦想。只有历经挫败、坎坷之后，风雨初晴时，放得见彩虹。</p><p>其实读完之后回看现实，等风雨过后回望过去时，也许会发出感慨：“原来不就是这么点事情嘛！”所以，杂货店真正解忧的是内心对过去和未来的幻想。我们真正留在当下：对未来，不恐惧；对过去，不怨恨。这时，才真正“解忧”了。</p><p>放弃天地间的幻想，留在现在，或许明天更美好呢~</p><p>不论是为自己，还是为你。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好题摘录 &lt;01&gt;</title>
      <link href="/post/441796a1a298.html"/>
      <url>/post/441796a1a298.html</url>
      
        <content type="html"><![CDATA[<h1 id="Problem-1-等比数列求和"><a href="#Problem-1-等比数列求和" class="headerlink" title="Problem.1 等比数列求和"></a>Problem.1 等比数列求和</h1><p>题目标签：分治、数学</p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>对于有 $x+1$ 项的等比数列 $A=a^0+a^1+\cdots+a^x$，求</p><script type="math/tex; mode=display">(\sum\limits_{i-1}^xa^i)\bmod p</script><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><p>$1\leq a_i,x\leq 10^{18},1\leq p\leq 10^9$。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>考虑分治。</p><p>对于指数区间 $[0,m]$，令 $m’=\dfrac{m+1}{2}-1$。考虑对 $[0,m’]$ 和 $[m’+1,m]$ 分治进行处理。</p><p>对于区间 $[0,m’]$，求得 $U=\sum\limits_{i=0}^{m’}a^i$。</p><p>对于区间 $[m’+1,m]$，可以同时通过分治计算 $V=a^{m’+1}$，然后进行分类讨论：</p><ul><li>若 $m$ 为奇数，则有偶数项，此时区间和为</li></ul><script type="math/tex; mode=display">U+UV</script><ul><li>若 $m$ 为偶数，则有奇数项，考虑先处理前 $m-1$ 项，最后加上第 $m$ 项，则区间和为</li></ul><script type="math/tex; mode=display">U+UV+V^2</script><p>中间运算时加上取模运算即可。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll x,a,p;</span><br><span class="line">ll v;</span><br><span class="line"><span class="function">ll <span class="title">work</span><span class="params">(ll m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!m)&#123;</span><br><span class="line">        v=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(m+<span class="number">1</span>)/<span class="number">2</span><span class="number">-1</span>;</span><br><span class="line">    ll u=<span class="built_in">work</span>(mid);</span><br><span class="line">    ll lv=v;</span><br><span class="line">    v=v*a%p;</span><br><span class="line">    <span class="keyword">if</span>(m&amp;<span class="number">1</span>)&#123;</span><br><span class="line">        ll ans=(u+u*v%p)%p;</span><br><span class="line">        v=lv*lv%p*a%p;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        ll ans=(u+u*v%p+v*v%p)%p;</span><br><span class="line">        v=v*v%p;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;x&gt;&gt;p;</span><br><span class="line">        a%=p;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">work</span>(x)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-2-LIS-Number"><a href="#Problem-2-LIS-Number" class="headerlink" title="Problem.2 LIS Number"></a>Problem.2 LIS Number</h1><p>题目标签：组合数学、动态规划</p><p>题目来源：Topcoder SRM 585</p><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>设 $A$ 是一个整数序列，<code>LIS Number</code> 是把 $A$ 切成几个数列，每个数列内的数都单调增，能分出来的最小数列数。</p><p>例如，$A=\{1,4,4,2,6,3\}$ 的 <code>LIS Number</code> 是 $4$，因为我们可以用 $\{1,4\} + \{4\} + \{2,6\} + \{3\}$ 得到 $A$，并且没有办法创造一个连接 $3$（或更少）个单调增序列。</p><p>特殊地，一个单调增序列的 <code>LIS Number</code> 是 $1$。</p><p>你有 $n$ 种类型的卡片。每一个 $i$，对于 $0\leq i&lt;n$，你有 $cnt_i$ 张 $i$ 型卡。每张第 $i$ 型卡上的数是 $i$。</p><p>给你 $cnt$ 数组和整数 $k$。你要排所有的卡成排，使所得到的整数序列的 <code>LIS Number</code> 是 $k$ 。 注意，你必须使用所有的卡，你只能选择它们的顺序。</p><p>计算 $x$ 为你能产生的不同满足上述条件的序列数。计算并输出数 $x$ 模 $1000000007(10^9+7)$。</p><h2 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h2><p>$1 \leq n \leq 36,1\leq cnt_i \leq 36,1 \leq k \leq 1296$</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>考虑由小到大插入每种数字，进行动态规划。</p><p>我们设状态 $f_{i,j}$ 为：插入完前 $i$ 种数字，共生成了 $j$ 个上升序列的方案数。</p><p>我们把安排好的数字看做一个序列，设当前序列里有 $sum$ 个数字，我们要新安排进去的这种数字一共有 $cnt$ 个。</p><p>此时我们新加入一种新的数字。如果我们把一些数字安排到原来的每个上升序列的末尾，则这个大序列的 <code>LIS Number</code> 不变，而插入到其他位置，必然会导致 <code>LIS Number</code> 个数增加。</p><p>考虑枚举放 $t$ 个数字到共有 $j$ 个上升序列的大序列末尾（即不会改变序列答案），则序列答案会增加 $cnt-t$。</p><p>我们要把 $u=cnt-t$ 个数放在 $v=sum+1-j+t$ 个位置里（因为在总共的 $sum+1$ 个空格中，有 $j-t$ 个位置已经被“放置在序列末尾”的策略占据），就可以把问题抽象成：把排成一列的 $u$ 个球，分成 $v$ 个抽屉里，允许有抽屉空着不放，求所有分法的方案数——这就可以用组合数处理，方案数为 $C_{u+v-1}^u$。</p><p>所以递推式为</p><script type="math/tex; mode=display">f_{i,j+u}=f_{i-1,j}\cdot C_j^t \cdot C_{u+v-1}^u</script><h2 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 1305</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> n,cnt[MAXN],k;</span><br><span class="line">ll f[MAXN][MAXN],C[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;LISNumber.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;LISNumber.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;cnt[i];</span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1296</span>;i++)&#123;</span><br><span class="line">        C[i][<span class="number">0</span>]=C[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">            C[i][j]=C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            C[i][j]%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">1</span>][cnt[<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> sum=cnt[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=k;j++) <span class="keyword">if</span>(f[i<span class="number">-1</span>][j])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> t=<span class="number">0</span>;t&lt;=<span class="built_in">min</span>(j,cnt[i]);t++)&#123;</span><br><span class="line">                <span class="type">int</span> x=sum+<span class="number">1</span>-j+t;</span><br><span class="line">                <span class="type">int</span> y=cnt[i]-t;</span><br><span class="line">                f[i][j+y]+=f[i<span class="number">-1</span>][j]*C[j][t]%mod*C[x+y<span class="number">-1</span>][y]%mod;</span><br><span class="line">                f[i][j+y]%=mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sum+=cnt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[n][k];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-3-小蓝的旅行计划"><a href="#Problem-3-小蓝的旅行计划" class="headerlink" title="Problem.3 小蓝的旅行计划"></a>Problem.3 小蓝的旅行计划</h1><p>题目标签：贪心、线段树</p><p>题目来源：第十四届蓝桥杯大赛软件赛省赛</p><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>小蓝正计划进行一次漫长的旅行。小蓝计划开车完成这次旅行。显然他在途中需要加油，否则可能无法完成这次旅行。</p><p>小蓝要依次经过 $n$ 个地点，其中从第 $i-1$ 个地点到达第 $i$ 个地点需要消耗 $Dis_i$ 升油。小蓝经过的每个地点都有一个加油站，但每个加油站的规定也不同。在第 $i$ 个加油站加 $1$ 升油需要 $Cost_i$ 的费用，且在这个加油站最多只能加 $Lim_i$ 升油。</p><p>小蓝的车的油箱也有容量限制，他的车上最多只能装载 $m$ 升油。</p><p>一开始小蓝的油箱是满的，请问小蓝需要准备多少钱才能顺利完成他的旅行计划。如果小蓝按给定条件无论准备多少钱都不能完成他的旅行计划，请输出 $-1$ 。</p><h2 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h2><p>$1 \leq n \leq 2\times 10^5\;,\;1 \leq Dis_i\;,\;Lim_i\;,\;m \leq 10^9$。</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>考虑从第 $1$ 个点到第 $n$ 个点，逐个贪心考虑。</p><p>从开头开始旅行，每走到一个点，尽可能少地加油，使得可以到达这个点，一定比加好多油到这里划算。</p><p>所以只考虑到达该点时，剩余的油量 $oil&lt;0$ 的情况时，在前面的加油站进行加油操作。</p><p>但是在哪里加油可以保证加油之后，一直走到这个当前的节点，一路上任何时刻油量小于油箱容量 $m$，并且花费最少呢？</p><p>考虑贪心处理，利用优先队列记录前面每一个加油站能加的油量和单价。注意，在到达位置 $i$ 时，在位置 $j$ 加油，需要保证加 $k$ 升油之后，使得对于在 $[j,i]$ 中任意时刻，油箱里的油量需要小于等于 $m$。而在这里加完 $k$ 升油之后，会对后面旅途的油量产生影响，需要对 $[j,i]$ 区间中的油量加上 $k$。</p><p>考虑用线段树记录每个节点时的油量，进行区间查询、区间修改、单点修改。</p><p>当没有油可以加，并且到不了节点 $i$ 时（即 $oil&lt;0$ 且优先队列为空），判断无解。</p><h2 id="参考代码-2"><a href="#参考代码-2" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 200005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((tree[p].l+tree[p].r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls (p&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs (p&lt;&lt;1|1)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">K</span>&#123;</span><br><span class="line">    <span class="type">int</span> cost,lim,id;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(K x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cost&gt;x.cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;K&gt; q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r,maxx,tag;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    tree[p].l=l,tree[p].r=r;</span><br><span class="line">    <span class="keyword">if</span>(tree[p].l==tree[p].r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">build</span>(l,mid,ls);</span><br><span class="line">    <span class="built_in">build</span>(mid+<span class="number">1</span>,r,rs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[p].tag)&#123;</span><br><span class="line">        <span class="type">int</span> k=tree[p].tag;</span><br><span class="line">        tree[ls].maxx+=k;</span><br><span class="line">        tree[ls].tag+=k;</span><br><span class="line">        tree[rs].maxx+=k;</span><br><span class="line">        tree[rs].tag+=k;</span><br><span class="line">        tree[p].tag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    tree[p].maxx=<span class="built_in">max</span>(tree[ls].maxx,tree[rs].maxx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[p].l&amp;&amp;r&gt;=tree[p].r)&#123;</span><br><span class="line">        tree[p].maxx+=k;</span><br><span class="line">        tree[p].tag+=k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modify</span>(l,r,k,ls);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) <span class="built_in">modify</span>(l,r,k,rs);</span><br><span class="line">    <span class="built_in">update</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[p].l&amp;&amp;r&gt;=tree[p].r) <span class="keyword">return</span> tree[p].maxx;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(l,r,ls));</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(l,r,rs));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> oil=m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> dist,cost,lim,i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;dist&gt;&gt;cost&gt;&gt;lim;</span><br><span class="line">        oil-=dist;</span><br><span class="line">        <span class="built_in">modify</span>(i,i,oil,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(oil&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;cost,lim,i&#125;);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>()&amp;&amp;oil&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            K now=q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> cost=now.cost,lim=now.lim,id=now.id;</span><br><span class="line">            <span class="type">int</span> maxx=<span class="built_in">query</span>(id,i<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">            lim=<span class="built_in">min</span>(lim,m-maxx);</span><br><span class="line">            <span class="type">int</span> add=<span class="built_in">min</span>(lim,-oil);</span><br><span class="line">            lim-=add;</span><br><span class="line">            ans+=add*cost;</span><br><span class="line">            oil+=add;</span><br><span class="line">            <span class="keyword">if</span>(lim) q.<span class="built_in">push</span>(&#123;cost,lim,id&#125;);</span><br><span class="line">            <span class="built_in">modify</span>(id,i,add,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(oil&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        q.<span class="built_in">push</span>(&#123;cost,lim,i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-4-Distinct-Numbers"><a href="#Problem-4-Distinct-Numbers" class="headerlink" title="Problem.4 Distinct Numbers"></a>Problem.4 Distinct Numbers</h1><p>题目标签：博弈论</p><p>题目来源：ARC137C</p><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定长为 $N$ 的非负整数列 $A:a_1,a_2,\cdots a_n$，保证元素互不相同。</p><p>Alice 和 Bob 在玩游戏。Alice 为先手，两人轮流操作。每次操作选手可以如下进行：</p><ul><li>选择当前 $A$ 中最大的元素，将其替换为一个更小的非负整数。要求替换后 $A$ 中元素仍然互不相同。</li></ul><p>首先无法操作的一方失败。当两人都采取最优策略时，求谁有必胜策略。</p><h2 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h2><p>$2\leq N \leq 3\times 10^5,0\leq a_i\leq 10^9$。</p><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>考虑每次都会将一个数减小，会有如下最优策略，记 $x$ 为最大元素， $y$ 为次大元素：</p><ol><li>若 $y+1&lt;x$，即 $x,y$ 之间有空位。操作者可以将 $x$ 改变至大于 $y$ 或小于 $y$，从而将局面交给对方。如果其中某个操作会失败，可以选择另一个操作。因为两种操作最后交给对方的局面是对立的。</li><li>若 $y+1=x$，即 $x,y$ 之间没有空位。因为每次都会减少至少 $1$，每次会填补一个空，答案就会和 $\text{mex}$ 有关系。如果有奇数个空，那么前者胜，否则前者必败。</li></ol><h2 id="参考代码-3"><a href="#参考代码-3" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 300005</span></span><br><span class="line"><span class="type">int</span> t,n,a[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>) num+=a[i];</span><br><span class="line">        <span class="keyword">else</span> num+=a[i]-a[i<span class="number">-1</span>]<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((a[n]==a[n<span class="number">-1</span>]+<span class="number">1</span>&amp;&amp;(num&amp;<span class="number">1</span>))||a[n]!=a[n<span class="number">-1</span>]+<span class="number">1</span>) cout&lt;&lt;<span class="string">&quot;Alice&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;Bob&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-5-Present"><a href="#Problem-5-Present" class="headerlink" title="Problem.5 Present"></a>Problem.5 Present</h1><p>题目标签：数学、思维</p><p>题目来源：CF1322B</p><h2 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h2><p>给出一个长度为 $n$ 的数列 $a$。其中第 $i$ 项为 $a_i$。</p><p>求</p><script type="math/tex; mode=display">\bigoplus\limits_{i=1}^n\bigoplus\limits_{j=i+1}^n(a_i+a_j)</script><p>其中 $\oplus$ 表示按位异或操作。</p><h2 id="数据范围-4"><a href="#数据范围-4" class="headerlink" title="数据范围"></a>数据范围</h2><p>$1\leq n\leq 4\times 10^5,1\leq a_i\leq 10^7$。</p><h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先可以得到 $O(n^2)$ 的暴力算法。我们换个思路考虑问题。</p><p>我们直接求解答案的每一个二进制位，可以从低位向高位处理每个位。对于答案的第 $k$ 个二进制位，考虑其为 $1$ 的条件：$\forall a_i+a_j(1\leq i&lt;j\leq n)$，统计其和的第 $k$ 位为 $1$ 的个数 $num$，只有 $num$ 位奇数时，这一位才可能位 $1$，只与比其小的位有关。</p><p>从此我们得到了这个重要的性质，那我们就要考虑怎样统计 $num$。</p><p>对于第 $k$ 位（最低位为第 $0$ 位），我们只考虑一个数 $b$ 的前 $k$ 低位，这个操作可以简单地通过 $b\&amp;(2^{k+1}-1)$ 得到，得到的数的取值范围为 $[0,2^{k+1}-1]$。</p><p>这一位为 $1$ 有如下两种可能：</p><ul><li>没有进位，那么和在 $[2^{k},2^{k+1}-1]$ 的范围内；</li><li>若有进位，那么和在 $[2^{k+1}+2^k,(2^{k+1}-1)\times 2]$，等价于 $[2^i\times 3,2^{k+2}-2]$。</li></ul><p>这样我们得到了两个连续的区间。我们只需要找和在这两个区间范围内的 $a_i+a_j$ 即可（这里的 $a_i,a_j$ 只保留前 $k$ 小位）。</p><p>我们可以通过双指针求出这个个数。具体地，令 $b_i=a_i\&amp;(2^{k+1}-1)$。因为顺序不影响结果，不妨先对 $b$ 升序排序。那么对于每一个 $b_i$，每个满足 $b_i+b_j$ 在合法范围内的 $j$ 是连续的，而且具有单调性。我们从大到小枚举 $i$ 的时候（因为排过序，所以 $b_i$ 也是从大到小的），合法的 $j$ 的区间是单调不降的。这样可以 $O(n)$ 的时间内求出低 $k$ 位为 $1$ 的加和的个数 $num$，进而判断答案的第 $k$ 位是否为 $1$。</p><p>因为需要枚举每个二进制位 $k$，所以算法的总时间复杂度为 $O(n\log N)$，其中 $N$ 为值域。</p><h2 id="参考代码-4"><a href="#参考代码-4" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 400005</span></span><br><span class="line"><span class="type">int</span> n,a[MAXN],b[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">count</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">1</span>,i=n;i;i--)&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=n&amp;&amp;b[i]+b[l]&lt;x) l++;</span><br><span class="line"><span class="keyword">while</span>(r&lt;=n&amp;&amp;b[i]+b[r]&lt;=y) r++;</span><br><span class="line">cnt+=r-l;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=l&amp;&amp;i&lt;r) cnt--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (cnt&gt;&gt;<span class="number">1</span>)&amp;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> p=<span class="number">0</span>;p&lt;=<span class="number">24</span>;p++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">b[i]=a[i]&amp;((<span class="number">1</span>&lt;&lt;(p+<span class="number">1</span>))<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+<span class="number">1</span>+n);</span><br><span class="line"><span class="type">bool</span> k1=<span class="built_in">count</span>(<span class="number">1</span>&lt;&lt;p,(<span class="number">1</span>&lt;&lt;(p+<span class="number">1</span>))<span class="number">-1</span>);</span><br><span class="line"><span class="type">bool</span> k2=<span class="built_in">count</span>(<span class="number">3</span>&lt;&lt;p,(<span class="number">1</span>&lt;&lt;(p+<span class="number">2</span>))<span class="number">-2</span>);</span><br><span class="line">ans|=((<span class="number">1</span>&amp;(k1^k2))&lt;&lt;p);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-6-签到题"><a href="#Problem-6-签到题" class="headerlink" title="Problem.6 签到题"></a>Problem.6 签到题</h1><p>题目标签：图论、异或操作</p><p>题目来源：校内联考 [SO Round 1] T2</p><h2 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一张 $n$ 个点，$m$ 条边的无向图，边有边权 $w$，定义一条路径的价值为它所经过的边的边权的异或和。</p><p>求从节点 $1$ 到节点 $n$ 的价值最大的路径的价值。</p><h2 id="数据范围-5"><a href="#数据范围-5" class="headerlink" title="数据范围"></a>数据范围</h2><p>$1 \le n,m \le 3 \times 10^5,0 \le w \le 2^{30}$。</p><h2 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h2><p>很巧妙的想法。</p><p>我们可能走很长的路径，每个路径的转移不符合三角形不等式，所以不能用求解最短路的方法求解。换个思路，因为是异或和，我们无需考虑具体怎样走的，只用考虑要走哪个边：考虑如果图上有一个环，我们可以任意地走这个简单环。如果我们从一个节点进，又从环的这个节点出去，这样只对对答案有影响。</p><p>那我们就可以找到图上的每个简单环，最后找到从 $1$ 到 $n$ 的路径即可。</p><p>或许我们实现的可以更加简单一些：我们构造出一个 $\text{dfs}$ 生成树，对于不在树上的边，只可能是返祖边，从而构成一个环。我们记 $dis_i$ 为从 $1$ 到 $i$ 在生成树上面的路径价值。我们把这样每一个环放到线性基里面，最后只需要在线性基里面求出关于 $dis_n$ 的最大异或和即可。（这意味着我们在一条从 $1$ 走到 $n$ 的路径上随意地走简单环）</p><p>时间复杂度为 $O(n\log w)$。</p><h2 id="参考代码-5"><a href="#参考代码-5" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 300005</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">int</span> n,m,dis[MAXN],t[<span class="number">50</span>];</span><br><span class="line">vector&lt;pii&gt; g[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>((x&gt;&gt;i)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t[i]) x^=t[i];</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                t[i]=x;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> nd:g[u])&#123;</span><br><span class="line">        <span class="type">int</span> v=nd.first,c=nd.second;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(vis[v])&#123;</span><br><span class="line">            <span class="built_in">insert</span>(dis[u]^dis[v]^c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            dis[v]=dis[u]^c;</span><br><span class="line">            <span class="built_in">dfs</span>(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!((x&gt;&gt;i)&amp;<span class="number">1</span>)) x^=t[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x,y,c,i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y&gt;&gt;c;</span><br><span class="line">        g[x].<span class="built_in">push_back</span>(&#123;y,c&#125;);</span><br><span class="line">        g[y].<span class="built_in">push_back</span>(&#123;x,c&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;<span class="built_in">query</span>(dis[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-7-树"><a href="#Problem-7-树" class="headerlink" title="Problem.7 树"></a>Problem.7 树</h1><p>题目标签：思维，树论</p><p>题目来源：清华集训 2012-2013 day 4</p><h2 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a>题目大意</h2><p>有一颗 $n$ 个节点的二叉树，编号1至n。你将这些节点依次删除，并规定你只能删除没有父亲的节点（即删除一个节点前，必须将其祖先全部删除）。这棵树可能有三种形态：</p><ol><li>一个链，准确地说，每个点最多只有一个儿子；</li><li>满二叉树；</li><li>普通的二叉树。</li></ol><p>你并不知道这棵树的形态，只能通过以下方式询问：</p><ul><li><code>size()</code>：返回这棵树的节点数量 $n$；　</li><li><code>type()</code>：返回这棵树的类型；</li><li><code>question(p,q)</code> ：返回 $p$ 号点和 $q$ 号点的关系。若返回值为 $1$，表示 $p$ 是 $q$ 的祖先，若返回值为 $-1$，表示 $q$ 是 $p$ 的祖先，否则返回值为 $0$。你用这个询问的次数将关系到你的分数；</li><li><code>void submit(x)</code>：完成回答，表示删除 $x$ 号节点。</li></ul><p>你需要做的，就是通过<strong>尽可能少的 <code>question</code> 询问</strong>将所有点全部删除。你的答案得到满分，调用 <code>question</code> 函数从次数必须为 $O(n\log n)$ 级别。</p><h2 id="数据范围-6"><a href="#数据范围-6" class="headerlink" title="数据范围"></a>数据范围</h2><p>$1 \le n \le 300000$。</p><h2 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h2><p>对于部分分，我们有 $O(n^2)$ 的暴力算法，下面直接讲能得到满分的正解。</p><p>考虑选择一个点，则我们删除这个节点与根之间最短路径的每一个节点才能删除这一个节点。</p><p>那我们就若干次随机化，每次随机选择一个节点，目的是删除这个节点到根的所有节点（构成一条链）后删除这个节点。我们每一次对于这个节点向全局进行 <code>question</code> 询问，了解哪些节点是它的祖先，单次复杂度 $O(n)$。我们依次删除祖先节点。因为我们删除这条链之后，会分割成若干棵子树，我们有需要在这些子树中分别进行删点操作。因为我们使用随机化算法，每次的链长期望为 $O(\log n)$。</p><p>我们需要记录这条链上所有的节点，从而继续进行操作。考虑到我们还需要对节点到根（或所在子树的顶）的这条链按照祖先顺序排序，我们需要使用<strong>归并排序</strong>算法。为什么不使用快速排序呢，考虑到归并排序的复杂度是严格 $O(n\log n)$ 的，最坏复杂度比快速排序更加优一些（或许因为这道题卡常）。我们只需要使用 C++ 自带的 <code>stable_sort</code> 函数进行排序，并重定义 <code>cmp</code> 函数即可。</p><p>对于 <code>type</code> 为 $1$ 的树，即一条链，我们只需要选择链底的节点，进行一次操作即可，详见参考代码。</p><p>时间复杂度 $O(n\log n)$。</p><h2 id="参考代码-6"><a href="#参考代码-6" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">question</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">submit</span><span class="params">(<span class="type">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 300005</span></span><br><span class="line"><span class="type">int</span> dep[MAXN],n,a[MAXN];</span><br><span class="line"><span class="type">bool</span> ins[MAXN];</span><br><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(time(<span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">question</span>(x,y)==<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(vector&lt;<span class="type">int</span>&gt; p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p.<span class="built_in">empty</span>()) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> n=p.<span class="built_in">size</span>(),now=p[<span class="built_in">rnd</span>()%n];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; fa;</span><br><span class="line">    fa.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v!=now&amp;&amp;<span class="built_in">question</span>(v,now)==<span class="number">1</span>) fa.<span class="built_in">push_back</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    fa.<span class="built_in">push_back</span>(now);</span><br><span class="line">    <span class="built_in">stable_sort</span>(fa.<span class="built_in">begin</span>(),fa.<span class="built_in">end</span>(),cmp);</span><br><span class="line">    <span class="type">int</span> m=fa.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; son;</span><br><span class="line">    son.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:fa) ins[v]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ins[v]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>,r=m<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l!=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">question</span>(fa[mid],v)) l=mid;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        son[l].<span class="built_in">push_back</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">submit</span>(fa[i]);</span><br><span class="line">        <span class="built_in">solve</span>(son[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">type</span>()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=i;</span><br><span class="line">        <span class="built_in">stable_sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">submit</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) v.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="built_in">solve</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-8-Stack-Exterminable-Arrays"><a href="#Problem-8-Stack-Exterminable-Arrays" class="headerlink" title="Problem.8 Stack Exterminable Arrays"></a>Problem.8 Stack Exterminable Arrays</h1><p>题目标签：思维，字符串，哈希</p><p>题目来源：CF1223F</p><h2 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a>题目大意</h2><p>给一个长度为 $n$ 的数列，对于其中一段子序列称为可被删除的，当且仅当按照下表顺序，按照如下要求进栈和出栈后栈为空：</p><ul><li><p>如果当前元素等于栈顶元素，则弹出栈顶元素；</p></li><li><p>否则将当前元素压入栈中。</p></li></ul><p>求有多少个子序列为可被删除的。</p><h2 id="数据范围-7"><a href="#数据范围-7" class="headerlink" title="数据范围"></a>数据范围</h2><p>$1\le \sum n,\sum q\le 3\times 10^5$。</p><h2 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h2><p>CSP-S 2023 T2 的原题，可惜考场并没有想出正确的思路。</p><p>理解题意后我们发现，我们可以枚举每一个可被删除的子序列（下面简称为“合法子序列”）的起始位置，进行栈模拟，就可以找到以这个位置开始的所有合法子序列。这是一个时间复杂度为 $O(n^2)$ 的算法。</p><p>我们考虑进行简化。如果只从第一个位置进行栈模拟，发现所有合法的子序列都有如下性质：</p><ul><li>设 $p_i$ 表示栈在第 $i$ 个位置的状态，如果子序列 $l\dots r$ 是合法的子序列，则有 $p_{l-1}=p_r$，即经过合法子序列后栈的状态和未经过时一样。</li></ul><p>考虑怎么证明这个东西。</p><p>如果 $l\dots r$ 内的数会和栈里面的数抵消。形式化地，记栈为 $S=YX$，当前合法的子序列形如 $XYYX$，两个 $X$ 或抵消，同时子序列内部重复的 $Y$ 也会抵消，最后剩下 $X$，入栈，这样栈内元素又一样了。</p><blockquote><p>例子 $\quad$ 对于序列 <code>2 2 3 3 2</code>，子序列取区间 $[2,5]$ 时，$p_1=\{2\}$，$p_5=\{2\}$，二者相等，说明子序列 <code>2 3 3 2</code> 是合法的子序列。</p></blockquote><p>那么我们就可以只进行一个堆栈模拟，记录到每个位置的 $p_i$，可以对其进行字符串哈希，再用一个哈希表记录当前以前的所有栈状态，统计每个位置与其相等的栈状态即可。复杂度 $O(n)$。</p><p>对于 <code>unordered_map</code> 类型的变量，可以使用 <code>&lt;name&gt;.reserve(_size)</code> 进行预制大小。</p><h2 id="参考代码-7"><a href="#参考代码-7" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 300005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 5323</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> p 233</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="type">int</span> Q,n,s[MAXN],top,a[MAXN],num[MAXN];</span><br><span class="line">ull hs[MAXN],table[MAXN],lable[MAXN];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxx=<span class="number">300000</span>;</span><br><span class="line">unordered_map&lt;ull,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;Q;</span><br><span class="line">    table[<span class="number">0</span>]=lable[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=maxx;i++) table[i]=table[i<span class="number">-1</span>]*mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=maxx;i++) lable[i]=lable[i<span class="number">-1</span>]*p;</span><br><span class="line">    <span class="keyword">while</span>(Q--)&#123;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">        top=ans=<span class="number">0</span>;</span><br><span class="line">        mp.<span class="built_in">clear</span>();</span><br><span class="line">        mp.<span class="built_in">reserve</span>(n+<span class="number">5</span>);</span><br><span class="line">        mp[<span class="number">0</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]==a[s[top]])&#123;</span><br><span class="line">                hs[i]=hs[i<span class="number">-1</span>]-table[top]*lable[a[i]];</span><br><span class="line">                top--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                s[++top]=i;</span><br><span class="line">                hs[i]=hs[i<span class="number">-1</span>]+table[top]*lable[a[i]];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">find</span>(hs[i])!=mp.<span class="built_in">end</span>()) ans+=mp[hs[i]];</span><br><span class="line">            mp[hs[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-9-Cow-Tennis-Tournament"><a href="#Problem-9-Cow-Tennis-Tournament" class="headerlink" title="Problem.9 Cow Tennis Tournament"></a>Problem.9 Cow Tennis Tournament</h1><p>题目标签：组合计数、思维、线段树</p><p>题目来源：CF283E</p><h2 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a>题目大意</h2><p>有 $n$ 个点，每个点有一个点权 $s_i$，一开始，每个点向比其点权小的点连边。接下来 $k$ 个操作，每个操作给定 $l,r$，将 $s_x,s_y\in [l,r]$ 的点对 $(x,y)$ 的边翻转方向。</p><p>问最后有多少对三元组 $(x,y,z)$ 满足 $x\rightarrow y,y\rightarrow z,z\rightarrow x$​。（箭头表示连边方向）两个三元组不同当且仅当有一个点在其中一个三元组中而不在另一个三元组中。</p><h2 id="数据范围-8"><a href="#数据范围-8" class="headerlink" title="数据范围"></a>数据范围</h2><p>$3\le n\le 10^5,0\le k\le 10^5,1\le s_i\le 10^9,1 \le a_i &lt; b_i \le 10^9$。</p><h2 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h2><p>考虑到正面思考好像很难，正难则反，考虑有多少组三元组不符合这个条件。</p><p>不难发现，对于不满足条件的三元组 $(x,y,z)$，其中肯定有一个点的出度（在这三个点构成的图中）为 $2$。我们就考虑能否求出每个点在最后有多少个出度，进而求出答案。</p><p>因为一段区间翻转，只会对这个区间内的点对 $(x,y)$ 产生变化，不妨按照扫描线的思路，按照点权大小排序后，对离散化的点权建立线段树，表示每个点是否对当前点 $x$ 的连边有翻转（即区间翻转操作是奇数次还是偶数次）。我们把每个操作拆分为两个：</p><ul><li>左端标记在区间 $[l,r]$ 翻转；</li><li>右端标记在区间 $[l,r]$ 撤销翻转，即再进行一次翻转即可。</li></ul><p>我们按照离散化的点集，按照权值从小到大扫描。再每一个点记录当前点的出度：</p><ul><li>对于比当前点 $x$ 点权小的点 $y$，当前点连向这个点，当且仅当区间 $[y,x)$ 的翻转次数为偶数次；</li><li>对于比当前点 $x$ 点权大的点 $y$，当前点连向这个点，当且仅当区间 $(x,y]$ 的翻转次数为奇数次。</li></ul><p>这样，我们进行区间修改，区间查询，就可以在 $O(\log n)$ 的时间内求出一个点的出度。根据组合公式，可以得到不合法的种类数为 $C_{num}^2$，其中 $num$ 为出度。</p><p>所以最后答案就是</p><script type="math/tex; mode=display">C_n^3-\sum\limits_{i=1}^nC_{num_i}^2</script><h2 id="参考代码-8"><a href="#参考代码-8" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((tree[p].l+tree[p].r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls (p&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs (p&lt;&lt;1|1)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> n,k,s[MAXN];</span><br><span class="line">ll ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; add[MAXN],del[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r,sum[<span class="number">2</span>];</span><br><span class="line">    <span class="type">bool</span> tag;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    tree[p].sum[<span class="number">0</span>]=tree[ls].sum[<span class="number">0</span>]+tree[rs].sum[<span class="number">0</span>];</span><br><span class="line">    tree[p].sum[<span class="number">1</span>]=tree[ls].sum[<span class="number">1</span>]+tree[rs].sum[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    tree[p].l=l,tree[p].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[p].sum[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(l,mid,ls);</span><br><span class="line">    <span class="built_in">build</span>(mid+<span class="number">1</span>,r,rs);</span><br><span class="line">    <span class="built_in">update</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tree[p].tag) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">swap</span>(tree[ls].sum[<span class="number">0</span>],tree[ls].sum[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">swap</span>(tree[rs].sum[<span class="number">0</span>],tree[rs].sum[<span class="number">1</span>]);</span><br><span class="line">    tree[ls].tag^=<span class="number">1</span>;</span><br><span class="line">    tree[rs].tag^=<span class="number">1</span>;</span><br><span class="line">    tree[p].tag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[p].l&amp;&amp;r&gt;=tree[p].r)&#123;</span><br><span class="line">        <span class="built_in">swap</span>(tree[p].sum[<span class="number">0</span>],tree[p].sum[<span class="number">1</span>]);</span><br><span class="line">        tree[p].tag^=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modify</span>(l,r,ls);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) <span class="built_in">modify</span>(l,r,rs);</span><br><span class="line">    <span class="built_in">update</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> op,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[p].l&amp;&amp;r&gt;=tree[p].r) <span class="keyword">return</span> tree[p].sum[op];</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) sum+=<span class="built_in">query</span>(l,r,op,ls);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) sum+=<span class="built_in">query</span>(l,r,op,rs);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;s[i];</span><br><span class="line">    <span class="built_in">sort</span>(s+<span class="number">1</span>,s+<span class="number">1</span>+n);<span class="comment">//按照点权排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        x=<span class="built_in">lower_bound</span>(s+<span class="number">1</span>,s+<span class="number">1</span>+n,x)-s;<span class="comment">//求出离散化后的操作范围</span></span><br><span class="line">        y=<span class="built_in">upper_bound</span>(s+<span class="number">1</span>,s+<span class="number">1</span>+n,y)-s<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(y&lt;x) y=x;</span><br><span class="line">        add[x].<span class="built_in">push_back</span>(y);<span class="comment">//建立类扫描线</span></span><br><span class="line">        del[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:add[i]) <span class="built_in">modify</span>(i,v,<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> cnt1=<span class="built_in">query</span>(<span class="number">1</span>,i<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//比当前点点权小的点所带来的出度</span></span><br><span class="line">        <span class="type">int</span> cnt2=<span class="built_in">query</span>(i+<span class="number">1</span>,n,<span class="number">1</span>,<span class="number">1</span>);<span class="comment">//比当前点点权大的点所带来的出度</span></span><br><span class="line">        <span class="keyword">if</span>(cnt1+cnt2&gt;=<span class="number">2</span>) ans+=<span class="number">1ll</span>*(cnt1+cnt2)*(cnt1+cnt2<span class="number">-1</span>)/<span class="number">2</span>;<span class="comment">//组合答案</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:del[i]) <span class="built_in">modify</span>(v,i,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ans=<span class="number">1ll</span>*n*(n<span class="number">-1</span>)*(n<span class="number">-2</span>)/<span class="number">6</span>-ans;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-10-作业-Homework"><a href="#Problem-10-作业-Homework" class="headerlink" title="Problem.10 作业 Homework"></a>Problem.10 作业 Homework</h1><p>题目标签：根号分治</p><p>题目来源：2006上海省选 (SHOI2006)</p><h2 id="题目大意-9"><a href="#题目大意-9" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个集合为 $S$，初始为空，你需要执行以下两个操作共 $N$ 次。</p><ol><li>在集合 $S$ 中加入一个新元素，其代号为 $X$，保证 $X$ 在当前集合中不存在。</li><li>在当前的集合 $S$ 中询问所有元素 $\bmod\ Y$ 最小的值。</li></ol><h2 id="数据范围-9"><a href="#数据范围-9" class="headerlink" title="数据范围"></a>数据范围</h2><p>$1\le N\le 10^5,1\le X,Y\le 3\times 10^5$。</p><h2 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h2><p>看到维护操作中有取模操作，且难以维护区间信息，考虑根号分治。</p><p>记 $T=\sqrt{3\times 10^5}$。具体地，将询问的 $Y$ 划分为两个种类：</p><ul><li>若 $Y\le T$，则这样的<strong>模数</strong>最多有 $T$ 种，对每一种值在添加数据时暴力维护（添加并取最小值）；</li><li>若 $Y&gt;T$，考虑到<strong>商数</strong>最多有 $T$ 种，即对于 $Y/x=p\dots\dots q$ 的 $p$ 最多有 $T$ 种。变化式子为 $x-pY=q$，枚举每一个 $p$，则可以算出该商数情况下的最小 $q$ 值。具体地，利用 <code>set</code> 维护 $S$ 中的数，对于每一个模数 $p$，找到第一个大于等于 $pY$，减一下即可得到该模数下的最小 $q$ 值。</li></ul><p>令 $\omega$ 为值域，则插入一次复杂度 $O(\sqrt{\omega})$，查询一次复杂度为 $O(1)$ 或 $O(\sqrt{\omega} \log n)$，总复杂度 $O(n\sqrt{\omega}\log n)$，可通过此题。</p><h2 id="参考代码-9"><a href="#参考代码-9" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSQRTN 555</span></span><br><span class="line"><span class="type">int</span> lim=<span class="number">550</span>,n,p[MAXSQRTN];</span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=lim;i++) p[i]=<span class="built_in">min</span>(p[i],x%i);</span><br><span class="line">    s.<span class="built_in">insert</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=lim) <span class="keyword">return</span> p[x];</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;<span class="number">1ll</span>*k*x&lt;=<span class="number">300000</span>;k++)&#123;</span><br><span class="line">        <span class="keyword">auto</span> t=s.<span class="built_in">lower_bound</span>(k*x);</span><br><span class="line">        <span class="keyword">if</span>(t==s.<span class="built_in">end</span>()) <span class="keyword">break</span>;</span><br><span class="line">        ans=<span class="built_in">min</span>(ans,*t-k*x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">memset</span>(p,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(p));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">char</span> ch;<span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;ch&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;A&#x27;</span>) <span class="built_in">add</span>(x);</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="built_in">query</span>(x)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 好题摘录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 好题摘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数基础</title>
      <link href="/post/9909702601bf.html"/>
      <url>/post/9909702601bf.html</url>
      
        <content type="html"><![CDATA[<p>线性代数基础</p><p>线性代数是OI中常用的一部分数学知识。本篇主要记录高斯消元法和基础矩阵变换。</p><h1 id="一、矩阵"><a href="#一、矩阵" class="headerlink" title="一、矩阵"></a>一、矩阵</h1><p>矩阵是数学中常用的代数工具。当然，信息代数中的重点也许与数学不同，但大体思路相仿。</p><h2 id="1-1-quad-矩阵的定义"><a href="#1-1-quad-矩阵的定义" class="headerlink" title="1.1$\quad$ 矩阵的定义"></a>1.1$\quad$ 矩阵的定义</h2><p><strong>矩阵</strong>$\quad$对于一个由 $n\times m$ 个数根据某些性质、关系组成的向量表</p><script type="math/tex; mode=display">\begin{bmatrix}a_{1,1}&a_{1,2}&\cdots&a_{1,m}\\a_{2,1}&a_{2,2}&\cdots&a_{2,m}\\\vdots&\vdots&\ddots&\vdots\\a_{n,1}&a_{n,2}&\cdots&a_{n,m}\\\end{bmatrix}</script><p>称为 $n\times m$ 的矩阵，记作矩阵 $\mathbf{A}$。</p><p>若矩阵 $\mathbf{A}$ 和矩阵 $\mathbf{B}$ 都是 $n\times m$ 的矩阵，则称 $\mathbf{A}$ 与 $\mathbf{B}$ 为 <strong>同形矩阵</strong>。</p><p>若矩阵 $\mathbf{A}$ 和矩阵 $\mathbf{B}$ 为同形矩阵，并且 $\forall i\in [1,n],j\in [1,m]$，都有 $a_{i,j}=b_{i,j}$，则称  $\mathbf{A}=\mathbf{B}$ 。</p><h2 id="1-2-quad-​-特殊矩阵"><a href="#1-2-quad-​-特殊矩阵" class="headerlink" title="1.2$\quad$​ 特殊矩阵"></a>1.2$\quad$​ 特殊矩阵</h2><p><strong>方阵</strong>：有 $n$ 行 $n$ 列的矩阵。</p><p><strong>零矩阵</strong>：每个元素都是 $0$ 的矩阵，记为 $\mathbf{0}$。</p><p><strong>行向量</strong>：只有一行的矩阵称为行矩阵。</p><p><strong>列向量</strong>：只有一列的矩阵称为列举阵。</p><p><strong>单位矩阵</strong>：主对角线元素均为 $1$，其余元素全为 $0$ 的 $n$ 阶方阵。</p><p><strong>数量矩阵</strong>：主对角线元素均为 $k$，其余元素全为 $0$ 的 $n$ 阶方阵。</p><h2 id="1-3-quad-矩阵的基本运算"><a href="#1-3-quad-矩阵的基本运算" class="headerlink" title="1.3$\quad$ 矩阵的基本运算"></a>1.3$\quad$ 矩阵的基本运算</h2><h3 id="矩阵加法"><a href="#矩阵加法" class="headerlink" title="矩阵加法"></a>矩阵加法</h3><p>只有同形矩阵才能进行矩阵加法。</p><p>矩阵加法即同位置的数相加。设 $\mathbf{A}$、$\mathbf{B}$为 $n\times m$ 的矩阵，$\mathbf{C}=\mathbf{A}+\mathbf{B}$，则 $\forall i\in[1,n],j\in[1,m]$：</p><script type="math/tex; mode=display">C_{i,j}=A_{i,j}+B_{i,j}</script><h3 id="数乘运算"><a href="#数乘运算" class="headerlink" title="数乘运算"></a>数乘运算</h3><p>数乘运算即矩阵中每一个数都乘这个数。设 $\mathbf{A}$为 $n\times m$ 的矩阵，$\mathbf{C}=\lambda\mathbf{A}$，则 $\forall i\in[1,n],j\in[1,m]$：</p><script type="math/tex; mode=display">C_{i,j}=\lambda A_{i,j}</script><h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h3><p>两个矩阵能够相乘，当且仅当其中一个矩阵的第二维等于另一个矩阵的第一维。</p><p>设 $\mathbf{A}$ 为 $n\times m$ 的矩阵，$\mathbf{B}$ 为 $m\times w$ 的矩阵，设 $\mathbf{C}=\mathbf{A}\times \mathbf{B}$，则：</p><script type="math/tex; mode=display">C_{i,j}=\sum^m_{k=1}A_{i,k}+B_{k,j}</script><p>特殊地，如果 $\mathbf{A}$ 为 $n\times n$ 的矩阵，$\mathbf{B}$ 为 $1\times n$ 的列矩阵，那么 $\mathbf{B}$ 可省略一维，记 $\mathbf{C}=\mathbf{A}\times \mathbf{B}$，则 $\mathbf{C}$ 为与 $\mathbf{B}$ 同型的矩阵，$\forall i\in [1,n]$​：</p><script type="math/tex; mode=display">C_{i}=\sum^n_{k=1}A_{i,k}+B_{k}</script><p>矩阵乘法满足<strong>结合律</strong>，即：</p><script type="math/tex; mode=display">(\mathbf{A}\times\mathbf{B})\times\mathbf{C}=\mathbf{A}\times(\mathbf{B}\times\mathbf{C})</script><p>满足<strong>分配律</strong>，即：</p><script type="math/tex; mode=display">(\mathbf{A}+\mathbf{B})\times\mathbf{C}=\mathbf{A}\times\mathbf{C}+\mathbf{B}\times\mathbf{C}</script><h3 id="转置运算"><a href="#转置运算" class="headerlink" title="转置运算"></a>转置运算</h3><p>矩阵转置就是将矩阵行列调换位置。</p><p>设 $\mathbf{A}$ 为 $n\times m$ 的矩阵，设 $\mathbf{A^T}$ 为矩阵 $\mathbf{A}$ 的转置，则 $\forall i\in[1,n],j\in[1,m]$：</p><script type="math/tex; mode=display">A^T_{i,j}=A_{j,i}</script><h1 id="二、高斯消元"><a href="#二、高斯消元" class="headerlink" title="二、高斯消元"></a>二、高斯消元</h1><p>高斯消元是求解线性方程组的一个方法。</p><p>如，对于下面这个 $n$ 个未知数的线性方程组，求解每个未知数的值。</p><script type="math/tex; mode=display">\begin{cases}x_1&+2x_2&-x_3&=-6\\2x_1&+x_2&-3x_3&=-9\\-x_1&-x_2&+2x_3&=7\end{cases}</script><p>我们可以由此构造一个 $N$ 行 $N$ 列的增广矩阵 $\mathbf{A}$，其内容为各未知项系数及常数项，如下：</p><script type="math/tex; mode=display">\mathbf{A}=\begin{bmatrix}1&2&-1\\2&1&-3\\-1&-1&2\end{bmatrix}</script><p>同理，我们也可以构造一个列向量 $\mathbf{X}$ 和列向量 $\mathbf{B}$，分别包含各各未知数与常数，如下：</p><script type="math/tex; mode=display">\mathbf{X}=\begin{bmatrix}x_1\\x_2\\x_3\end{bmatrix}\qquad\mathbf{B}=\begin{bmatrix}-6\\-9\\7\end{bmatrix}</script><p>我们就可以由此转换为矩阵方程：</p><script type="math/tex; mode=display">\begin{bmatrix}1&2&-1\\2&1&-3\\-1&-1&2\end{bmatrix}\begin{bmatrix}x_1\\x_2\\x_3\end{bmatrix}=\begin{bmatrix}-6\\-9\\7\end{bmatrix}</script><p>我们的目标是求出矩阵 $\mathbf{X}$。根据矩阵乘法具有结合律，我们可以设法让等号两边同时乘以若干矩阵，使得矩阵 $\mathbf{A}$ 成为单位矩阵，即可求出矩阵 $\mathbf{X}$。也就是说，在主对角线上的数，通过变换，使其成为 $1$，其他数成为 $0$。</p><p>考虑在保证数量关系的前提下消元，使用如下方法：</p><ol><li><p>对这一行消元，使得该行对角线上的数为 $1$。也就是除以这一行对角线上的数即可。</p></li><li><p>对其他行消元，利用对角线上的数和其他行的数的关系，使得其他行不在对角线上的数为 $0$。</p></li></ol><p>如此重复处理，直至形成单位矩阵。</p><p>注意，等号左右两边需要同时处理，才能保证等号成立。所以我们可以直接合并两个矩阵，更方便地直接对一个矩阵进行变换，如下：</p><script type="math/tex; mode=display">\left[\begin{array}{ccc|c}1&2&-1&-6\\2&1&-3&-9\\-1&-1&2&7\end{array}\right]</script><p>使左部分矩阵成为单位矩阵后，右边的列向量就是答案。</p><p>我们可以进行如下操作，即 <strong>初等行变换</strong>：</p><ol><li>用一个非零的数乘到某一行；</li><li>把其中一行的若干倍加到零一行上；</li><li>交换两行的位置。</li></ol><p>进行如下操作：</p><script type="math/tex; mode=display">\left[\begin{array}{ccc|c}1&2&-1&-6\\2&1&-3&-9\\-1&-1&2&7\end{array}\right]\Longrightarrow\left[\begin{array}{ccc|c}1&2&-1&-6\\0&-3&-1&3\\-1&-1&2&7\end{array}\right]\Longrightarrow\left[\begin{array}{ccc|c}1&2&-1&-6\\0&-3&-1&3\\0&1&1&1\end{array}\right]</script><script type="math/tex; mode=display">\Longrightarrow\left[\begin{array}{ccc|c}1&2&-1&-6\\0&1&1&1\\0&-3&-1&3\end{array}\right]\Longrightarrow\left[\begin{array}{ccc|c}1&2&-1&-6\\0&1&1&1\\0&0&2&6\end{array}\right]\Longrightarrow\left[\begin{array}{ccc|c}1&2&-1&-6\\0&1&1&1\\0&0&1&3\end{array}\right]</script><p>然后消去右上角：</p><script type="math/tex; mode=display">\left[\begin{array}{ccc|c}1&2&-1&-6\\0&1&1&1\\0&0&1&3\end{array}\right]\Longrightarrow\left[\begin{array}{ccc|c}1&2&0&-3\\0&1&0&-2\\0&0&1&3\end{array}\right]\Longrightarrow\left[\begin{array}{ccc|c}1&0&0&1\\0&1&0&-2\\0&0&1&3\end{array}\right]</script><p>此时，右边的矩阵就是 $\mathbf{X}$ 矩阵，即，解得：</p><script type="math/tex; mode=display">\begin{cases}x_1=1\\x_2=-2\\x_3=3\end{cases}</script><p>为了更格式化、更方便地处理问题，下面给出高斯消元的标准方法。</p><p><strong>高斯消元法</strong> $\quad$ 对于任意一个存在 $n$ 个数、$n$ 个方程的线性方程组：</p><script type="math/tex; mode=display">\begin{cases}a_{1,1}x_1+a_{1,2}x_2+\cdots+a_{1,n}x_n=b_1\\a_{2,1}x_1+a_{2,2}x_2+\cdots+a_{2,n}x_n=b_2\\\vdots\\a_{n,1}x_1+a_{n,2}x_2+\cdots+a_{n,n}x_n=b_n\\\end{cases}</script><p>构造一个 $N$ 行 $N+1$ 列的矩阵：</p><script type="math/tex; mode=display">\left[\begin{array}{cccc|c}a_{1,1}&a_{1,2}&\cdots&a_{1,n}&b_1\\a_{2,1}&a_{2,2}&\cdots&a_{2,n}&b_2\\\vdots&\vdots&\ddots&\vdots&\vdots\\a_{n,1}&a_{n,2}&\cdots&a_{n,n}&b_n\\\end{array}\right]</script><p>对于每个未知量 $x_i$，找到一个 $x_i$ 的系数非零，但 $x_1\sim x_{i-1}$ 的系数都被消成了 $0$ 的方程，利用初等行变换把其他方程的 $x_i$ 的系数全部消成 $0$。</p><p>需要注意的是，如果有任意一个 $x_i$，找不到非零的方程，则无解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 105</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> a[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n+<span class="number">1</span>;j++) cin&gt;&gt;a[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> nowi=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">        <span class="type">int</span> t;</span><br><span class="line">        <span class="keyword">for</span>(t=nowi;t&lt;=n;t++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[t][j])&gt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t==n+<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=j;i&lt;=n+<span class="number">1</span>;i++) <span class="built_in">swap</span>(a[nowi][i],a[t][i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n+<span class="number">1</span>;i&gt;=j;i--) a[nowi][i]/=a[nowi][j];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==nowi) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=n+<span class="number">1</span>;k&gt;=j;k--)&#123;</span><br><span class="line">                a[i][k]-=a[i][j]*a[nowi][k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nowi++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(nowi&lt;=n)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;No Solution&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,a[i][n+<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、矩阵求逆"><a href="#三、矩阵求逆" class="headerlink" title="三、矩阵求逆"></a>三、矩阵求逆</h1><p><strong>逆矩阵</strong>$\quad$ 对于一个矩阵 $\mathbf{A}$，若存在一个矩阵 $\mathbf{A’}$，有 $\mathbf{AA’=E(单位矩阵)}$，则称 $\mathbf{A’}$ 为 $\mathbf{A}$ 的逆矩阵。</p><p>现在给定一个矩阵 $\mathbf{A}$，求他的逆矩阵  $\mathbf{A’}$。</p><p>我们可以考虑如下的思路。我们可以通过构造多个矩阵，考虑将矩阵 $\mathbf{A}$ 消成单位矩阵，也对 $\mathbf{E}$ 做相同操作，这样一来，就可以得出 $\mathbf{A’}$。</p><p>进而，我们通过矩阵乘法，构造多个矩阵，有：</p><script type="math/tex; mode=display">\mathbf{A_1A_2\cdots A_k A=EA_1A_2\cdots A_k}</script><p>得出答案</p><script type="math/tex; mode=display">\mathbf{A'=A_1A_2\cdots A_k}</script><p>简化考虑，我们的目标是将 $\mathbf{A}$ 消成 $\mathbf{E}$。因为矩阵乘法具有结合律所以我们可以同时在 $\mathbf{A}$ 和原单位矩阵 $\mathbf{E}$ 同时进行高斯消元，目标是使 $\mathbf{A}$ 成为单位矩阵。即对于两部分的矩阵 $\left[\begin{array}{c|c}\mathbf{A}&amp;\mathbf{E}\end{array}\right]$，对左半部分消元即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 405</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll n,a[MAXN][MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    ll w=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) w=w*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++) cin&gt;&gt;a[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i][i+n]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> r=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j][i])&#123;</span><br><span class="line">                r=j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r!=i) <span class="built_in">swap</span>(a[i],a[r]);</span><br><span class="line">        <span class="keyword">if</span>(!a[i][i]) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No Solution&quot;</span>),<span class="number">0</span>;</span><br><span class="line">        ll x=<span class="built_in">qpow</span>(a[i][i],mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k==i) <span class="keyword">continue</span>;</span><br><span class="line">            ll t=a[k][i]*x%mod;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=(n&lt;&lt;<span class="number">1</span>);j++)&#123;</span><br><span class="line">                a[k][j]=((a[k][j]-t*a[i][j])%mod+mod)%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=(n&lt;&lt;<span class="number">1</span>);j++) a[i][j]=a[i][j]*x%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            cout&lt;&lt;a[i][j+n]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、行列式及求值"><a href="#四、行列式及求值" class="headerlink" title="四、行列式及求值"></a>四、行列式及求值</h1><p>行列式和矩阵相似，都是用来解决线性问题的工具。</p><h2 id="4-1-quad-行列式的定义"><a href="#4-1-quad-行列式的定义" class="headerlink" title="4.1$\quad$ 行列式的定义"></a>4.1$\quad$ 行列式的定义</h2><p><strong>行列式</strong>$\quad$ 对于一个 $n$ 阶的方阵，它的行列式记作 $|A|$，其值为：</p><script type="math/tex; mode=display">|A|=\sum_p\prod_{i=1}^n a_{i,p_i}(-1)^{\tau(p)}</script><p>其中，$p$ 为 $1..n$ 的排列，$\tau(p)$ 为排列 $p$ 中的逆序对数。</p><h2 id="4-2-quad-行列式的部分性质"><a href="#4-2-quad-行列式的部分性质" class="headerlink" title="4.2$\quad$ 行列式的部分性质"></a>4.2$\quad$ 行列式的部分性质</h2><h3 id="三角行列式的值"><a href="#三角行列式的值" class="headerlink" title="三角行列式的值"></a>三角行列式的值</h3><p>对于上三角行列式，其值为主对角线的乘积，即：</p><script type="math/tex; mode=display">\begin{vmatrix}a_{1,1}&a_{1,2}&a_{1,3}&\cdots&a_{1,n}\\0&a_{2,2}&a_{2,3}&\cdots&a_{2,n}\\0&0&a_{3,3}&\cdots&a_{3,n}\\\vdots&\vdots&\vdots&\ddots&\vdots\\0&0&0&\cdots&a_{n,n}\\\end{vmatrix}=\prod_{i=1}^n a_{i,i}</script><p>由定义即可推出，证明略。</p><h3 id="某行乘系数-c-，等于整体乘-c"><a href="#某行乘系数-c-，等于整体乘-c" class="headerlink" title="某行乘系数 $c$，等于整体乘 $c$"></a>某行乘系数 $c$，等于整体乘 $c$</h3><p>即：</p><script type="math/tex; mode=display">\begin{vmatrix}a_{1,1}&a_{1,2}&\cdots&a_{1,n}\\a_{2,1}&a_{2,2}&\cdots&a_{2,n}\\\vdots&\vdots&\ddots&\vdots\\ca_{i,1}&ca_{i,2}&\cdots&ca_{i,n}\\\vdots&\vdots&\ddots&\vdots\\a_{n,1}&a_{n,2}&\cdots&a_{n,n}\\\end{vmatrix}=c\begin{vmatrix}a_{1,1}&a_{1,2}&\cdots&a_{1,n}\\a_{2,1}&a_{2,2}&\cdots&a_{2,n}\\\vdots&\vdots&\ddots&\vdots\\a_{i,1}&a_{i,2}&\cdots&a_{i,n}\\\vdots&\vdots&\ddots&\vdots\\a_{n,1}&a_{n,2}&\cdots&a_{n,n}\\\end{vmatrix}</script><p>由定义即可推出，证明略。</p><h3 id="交换两行，符号取反"><a href="#交换两行，符号取反" class="headerlink" title="交换两行，符号取反"></a>交换两行，符号取反</h3><p>即：</p><script type="math/tex; mode=display">\begin{vmatrix}a_{1,1}&a_{1,2}&\cdots&a_{1,n}\\\vdots&\vdots&\ddots&\vdots\\a_{i,1}&a_{i,2}&\cdots&a_{i,n}\\\vdots&\vdots&\ddots&\vdots\\a_{j,1}&a_{j,2}&\cdots&a_{j,n}\\\vdots&\vdots&\ddots&\vdots\\a_{n,1}&a_{n,2}&\cdots&a_{n,n}\\\end{vmatrix}=-\begin{vmatrix}a_{1,1}&a_{1,2}&\cdots&a_{1,n}\\\vdots&\vdots&\ddots&\vdots\\a_{j,1}&a_{j,2}&\cdots&a_{j,n}\\\vdots&\vdots&\ddots&\vdots\\a_{i,1}&a_{i,2}&\cdots&a_{i,n}\\\vdots&\vdots&\ddots&\vdots\\a_{n,1}&a_{n,2}&\cdots&a_{n,n}\\\end{vmatrix}</script><p><strong>证明</strong>$\quad$ 不妨设原行列式为 $|A|$，变换后的矩阵为 $|A’|$，有：</p><script type="math/tex; mode=display">\begin{aligned}|A|=\sum_p (-1)^{\tau(p)}a_{1,p_1}a_{2,p_2}\cdots a_{i,p_i}\cdots a_{j,p_j}\cdots a_{n,p_n}\\|A'|=\sum_p (-1)^{\tau(p)}a_{1,p_1}a_{2,p_2}\cdots a_{i,p_j}\cdots a_{j,p_i}\cdots a_{n,p_n}\end{aligned}</script><p>可以看到，两者的唯一区别就是 $a_{i,p_i},a_{j,p_j}$ 和 $a_{i,p_j},a_{j,p_i}$。</p><p>由于 $p$ 为前排列，所以可以忽略 $p$ 位置的影响，只用考虑调换 $p_i,p_j$ 对 $\tau(p)$ 的影响。</p><p>考虑每一个 $k,i,j\in[1,n],k\not=i,k\not=j,i&lt;j$：</p><ol><li><p>若 $k&lt;i$：调换 $p_i,p_j$ 之后关于 $p_k$ 的逆序对数不变。</p></li><li><p>若 $k&gt;j$：调换 $p_i,p_j$ 之后关于 $p_k$ 的逆序对数也不变。</p></li><li><p>若 $i&lt;k&lt;j$：调换 $p_i,p_j$ 之后关于 $p_k$ 逆序对数会 <strong>成对地变化</strong>。</p></li><li><p>$p_i,p_j$ 位置变化会带来逆序对数变化 $1$ 个。</p></li></ol><p>综上，变化之后 $\tau(p)$ 的 <strong>奇偶性</strong> 会发生变化，也就是 $|A|=-|A’|$。</p><p>证毕。</p><h3 id="若存在两行对应成比例，则行列式值为-0"><a href="#若存在两行对应成比例，则行列式值为-0" class="headerlink" title="若存在两行对应成比例，则行列式值为 $0$"></a>若存在两行对应成比例，则行列式值为 $0$</h3><p><strong>证明</strong>$\quad$ 构造符合要求的行列式并进行推导：</p><script type="math/tex; mode=display">\begin{vmatrix}a_{1,1}&a_{1,2}&\cdots&a_{1,n}\\\vdots&\vdots&\ddots&\vdots\\a_{i,1}&a_{i,2}&\cdots&a_{i,n}\\\vdots&\vdots&\ddots&\vdots\\ca_{j,1}&ca_{j,2}&\cdots&ca_{j,n}\\\vdots&\vdots&\ddots&\vdots\\a_{n,1}&a_{n,2}&\cdots&a_{n,n}\\\end{vmatrix}=c\begin{vmatrix}a_{1,1}&a_{1,2}&\cdots&a_{1,n}\\\vdots&\vdots&\ddots&\vdots\\a_{i,1}&a_{i,2}&\cdots&a_{i,n}\\\vdots&\vdots&\ddots&\vdots\\a_{j,1}&a_{j,2}&\cdots&a_{j,n}\\\vdots&\vdots&\ddots&\vdots\\a_{n,1}&a_{n,2}&\cdots&a_{n,n}\\\end{vmatrix}</script><p>可以发现这个行列式有两行相等，设其为 $|A|$，可知，交换两行后矩阵数值不变，但等于 $-|A|$。故原行列式值为 $0$。</p>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『初丶晴』旧忆</title>
      <link href="/post/b6814f85452d.html"/>
      <url>/post/b6814f85452d.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="欸? 这个『通行证』看着不太对, 再试试看呢..." data-whm="密码不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="1540e0005dd153b620bb433a84d41b90e4eb05e0f023771b91a95eba7b71b116"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章被主人加密了, 小窝要核验主人给的『通行证』.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树链剖分</title>
      <link href="/post/9a0cb8b2d897.html"/>
      <url>/post/9a0cb8b2d897.html</url>
      
        <content type="html"><![CDATA[<p>树链剖分</p><p>树链剖分，就是将树剖分为若干条链，用来维护树上信息，常搭配树上值域线段树，如：</p><ol><li><p>修改<strong>树上两点间的最短路径上</strong>的节点权值</p></li><li><p>查询<strong>树上两点间的最短路径上</strong>的点权和</p></li><li><p>修改以某个点为根的子树的每个节点的点权</p></li><li><p>查询以某个点为根的子树的节点权值和</p></li></ol><p>其中，操作3和4可以直接建立树上值域线段树解决，操作1和2需要进行树链剖分。</p><p>树链剖分有三种方法：重链剖分（复杂度 $O(\log n)$）、长链剖分（复杂度 $O(\sqrt n)$）和实链剖分（常用于LCT维护）。其中，重链剖分最为常见，因此<strong>本节主要记录重链剖分的学习笔记</strong>。</p><h1 id="一、基础定义"><a href="#一、基础定义" class="headerlink" title="一、基础定义"></a>一、基础定义</h1><p><strong>重儿子</strong>：一个节点的所有儿子中，子树大小最大的那一个儿子。如有多种选择，就<strong>只选一个儿子</strong>。</p><p><strong>轻儿子</strong>：一个节点的所有儿子中，不是重儿子的节点。<strong>根节点也是轻儿子。</strong></p><p><strong>重链</strong>：从一个轻儿子开始，沿着重儿子走，连出的极大子链。</p><p><strong>轻链</strong>：不是重链的子链。</p><p><strong>重链定理</strong>$\quad$ 除了根节点以外的任何一个节点的父亲一定在一条重链上。</p><h1 id="二、重链剖分"><a href="#二、重链剖分" class="headerlink" title="二、重链剖分"></a>二、重链剖分</h1><p>重链剖分，需要我们维护一下内容：</p><ol><li><code>fa[MAXN]</code>，即节点的父节点。</li><li><code>dep[MAXN]</code>，即节点深度。</li><li><code>son[MAXN]</code>，即该节点的<strong>重儿子</strong>编号，如果是叶子节点，则 <code>son[p]=0</code>。</li><li><code>top[MAXN]</code>，即该节点所在重链的链头。</li><li><code>sz[MAXN]</code>，即以该节点为根的子树的大小。</li><li><code>dfn[MAXN]</code>，该节点进行 $\text{dfs}$ 的时间戳，即该节点的 $\text{dfs}$ 序。</li><li><code>w[MAXN]</code>，即在 $\text{dfs}$ 序中，该序号节点的权值。</li><li><code>tick</code>，即 $\text{dfs}$ 时间戳。</li></ol><p>前面几个信息可以打包进一个结构体，然后线段树需要另一个结构体。</p><p>重链剖分要求重链上的时间戳一定要连续（方便在线段树上区间修改和查询），所以需要进行两次 $\text{dfs}$。</p><h2 id="2-1-quad-第一次-text-dfs"><a href="#2-1-quad-第一次-text-dfs" class="headerlink" title="2.1$\quad$ 第一次 $\text{dfs}$"></a>2.1$\quad$ 第一次 $\text{dfs}$</h2><p>第一次 $\text{dfs}$ 需要处理出重链剖分的前置信息。</p><p>从根节点开始遍历整棵树。记录节点父亲、子树大小、深度，还有重儿子。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    T[u].fa=fa;</span><br><span class="line">    T[u].sz=<span class="number">1</span>;</span><br><span class="line">    T[u].dep=T[fa].dep+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> tmp=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:g[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(v,u);</span><br><span class="line">        T[u].sz+=T[v].sz;</span><br><span class="line">        <span class="keyword">if</span>(T[v].sz&gt;tmp)&#123;</span><br><span class="line">            tmp=T[v].sz;</span><br><span class="line">            T[u].son=v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-quad-第二次-text-dfs"><a href="#2-2-quad-第二次-text-dfs" class="headerlink" title="2.2$\quad$ 第二次 $\text{dfs} $"></a>2.2$\quad$ 第二次 $\text{dfs} $</h2><p>第二次 $\text{dfs}$ 就可以剖分这棵树了。</p><p>我们进行重链剖分，记录该节点所在的重链的链头和时间戳。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">    T[u].top=t;</span><br><span class="line">    dfn[u]=++tick;</span><br><span class="line">    w[tick]=a[u];</span><br><span class="line">    <span class="keyword">if</span>(!T[u].son) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(T[u].son,t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:g[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==T[u].fa||v==T[u].son) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-quad-建立树上值域线段树"><a href="#2-3-quad-建立树上值域线段树" class="headerlink" title="2.3$\quad$ 建立树上值域线段树"></a>2.3$\quad$ 建立树上值域线段树</h2><p>因为子树的 $\text{dfs}$ 序一个区间，我们就可以建立值域线段树。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    tree[p].l=l,tree[p].r=r;</span><br><span class="line">    tree[p].tag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[p].sum=w[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(l,mid,ls);</span><br><span class="line">    <span class="built_in">build</span>(mid+<span class="number">1</span>,r,rs);</span><br><span class="line">    <span class="built_in">update</span>(p);<span class="comment">//整合子树信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、维护信息"><a href="#三、维护信息" class="headerlink" title="三、维护信息"></a>三、维护信息</h1><h2 id="3-1-quad-进行子树加操作"><a href="#3-1-quad-进行子树加操作" class="headerlink" title="3.1$\quad$ 进行子树加操作"></a>3.1$\quad$ 进行子树加操作</h2><p>因为子树的 $\text{dfs}$ 序是一个区间，可以在线段树上进行区间修改操作（$\text{modify}$），修改的区间就是 ，其$[\text{dfn}[p],\text{dfn}[p]+\text{sz}[p]-1]$中 $p$ 为子树根节点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[p].l&amp;&amp;r&gt;=tree[p].r)&#123;</span><br><span class="line">        tree[p].sum=(tree[p].sum+k*<span class="built_in">len</span>(p))%mod;</span><br><span class="line">        tree[p].tag=(tree[p].tag+k)%mod;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);<span class="comment">//懒标记下传</span></span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modify</span>(l,r,k,ls);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) <span class="built_in">modify</span>(l,r,k,rs);</span><br><span class="line">    <span class="built_in">update</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//in main:</span></span><br><span class="line"><span class="built_in">modify</span>(dfn[x],dfn[x]+T[x].sz<span class="number">-1</span>,z,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="3-2-quad-进行子树求和"><a href="#3-2-quad-进行子树求和" class="headerlink" title="3.2$\quad$进行子树求和"></a>3.2$\quad$进行子树求和</h2><p>类比子树加操作，在线段树上进行区间求和（$\text{query}$），求和区间就是 $[\text{dfn}[p],\text{dfn}[p]+\text{sz}[p]-1]$，其中 $p$ 为子树根节点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[p].l&amp;&amp;r&gt;=tree[p].r) <span class="keyword">return</span> tree[p].sum;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) ans=(ans+<span class="built_in">query</span>(l,r,ls))%mod;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) ans=(ans+<span class="built_in">query</span>(l,r,rs))%mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//in main:</span></span><br><span class="line">cout&lt;&lt;<span class="built_in">query</span>(dfn[x],dfn[x]+T[x].sz<span class="number">-1</span>,<span class="number">1</span>)&lt;&lt;endl;</span><br></pre></td></tr></table></figure><h2 id="3-3-quad-进行路径修改操作"><a href="#3-3-quad-进行路径修改操作" class="headerlink" title="3.3$\quad$ 进行路径修改操作"></a>3.3$\quad$ 进行路径修改操作</h2><p>根据重连定理，除了根节点以外的任何一个节点的父亲一定在一条重链上。所以我们就可以进行重链到重链的转换，从而一点一点地在每一条链上进行区间修改。</p><p>考虑每次选择链头深度高的那条链，将该节点跳到链头并区间修改，此时就改掉了这条链（也就是路径的一部分）上的值，修改区间为 $[\text{dfn}[\text{top}[p]],\text{dfn}[p]]$，其中，$p$ 为该节点，而后跳到链头的父亲，此时就在另一条链上了，可以重复操作直到两节点在同一条重链上。</p><p>如果两节点在同一跳重链上，则可以直接进行区间修改，修改区间为 $[\text{dfn}[x],\text{dfn}[y]]$$，其中 $x,y$ 是两个节点，且防止无效修改操作， $\text{dep}[x]&lt;\text{dep}[y]$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">addOnTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    c%=mod;</span><br><span class="line">    <span class="keyword">while</span>(T[x].top!=T[y].top)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T[T[x].top].dep&lt;T[T[y].top].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="built_in">modify</span>(dfn[T[x].top],dfn[x],c,<span class="number">1</span>);</span><br><span class="line">        x=T[T[x].top].fa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(T[x].dep&gt;T[y].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="built_in">modify</span>(dfn[x],dfn[y],c,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-quad-进行路径求和操作"><a href="#3-4-quad-进行路径求和操作" class="headerlink" title="3.4$\quad$ 进行路径求和操作"></a>3.4$\quad$ 进行路径求和操作</h2><p>思想类似路径修改，只不过把修改操作改成求和。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getSumOnTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(T[x].top!=T[y].top)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T[T[x].top].dep&lt;T[T[y].top].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        ans=(ans+<span class="built_in">query</span>(dfn[T[x].top],dfn[x],<span class="number">1</span>))%mod;</span><br><span class="line">        x=T[T[x].top].fa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(T[x].dep&gt;T[y].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    ans=(ans+<span class="built_in">query</span>(dfn[x],dfn[y],<span class="number">1</span>))%mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、参考代码"><a href="#四、参考代码" class="headerlink" title="四、参考代码"></a>四、参考代码</h1><p>本代码为树链剖分/重链剖分模板。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((tree[p].l+tree[p].r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls (p&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs (p&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> len(x) (tree[x].r-tree[x].l+1)</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">G</span>&#123;</span><br><span class="line">    <span class="type">int</span> sz,dep,top,son,fa;</span><br><span class="line">&#125;T[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">F</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r,sum,tag;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n,m,r,mod,a[MAXN],dfn[MAXN],tick,w[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    T[u].fa=fa;</span><br><span class="line">    T[u].sz=<span class="number">1</span>;</span><br><span class="line">    T[u].dep=T[fa].dep+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> tmp=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:g[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(v,u);</span><br><span class="line">        T[u].sz+=T[v].sz;</span><br><span class="line">        <span class="keyword">if</span>(T[v].sz&gt;tmp)&#123;</span><br><span class="line">            tmp=T[v].sz;</span><br><span class="line">            T[u].son=v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">    T[u].top=t;</span><br><span class="line">    dfn[u]=++tick;</span><br><span class="line">    w[tick]=a[u];</span><br><span class="line">    <span class="keyword">if</span>(!T[u].son) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(T[u].son,t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:g[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==T[u].fa||v==T[u].son) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    tree[p].sum=tree[ls].sum+tree[rs].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    tree[p].l=l,tree[p].r=r;</span><br><span class="line">    tree[p].tag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[p].sum=w[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(l,mid,ls);</span><br><span class="line">    <span class="built_in">build</span>(mid+<span class="number">1</span>,r,rs);</span><br><span class="line">    <span class="built_in">update</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tree[p].tag) <span class="keyword">return</span>;</span><br><span class="line">    tree[ls].sum=(tree[ls].sum+tree[p].tag*<span class="built_in">len</span>(ls))%mod;</span><br><span class="line">    tree[rs].sum=(tree[rs].sum+tree[p].tag*<span class="built_in">len</span>(rs))%mod;</span><br><span class="line">    tree[ls].tag=(tree[ls].tag+tree[p].tag)%mod;</span><br><span class="line">    tree[rs].tag=(tree[rs].tag+tree[p].tag)%mod;</span><br><span class="line">    tree[p].tag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[p].l&amp;&amp;r&gt;=tree[p].r)&#123;</span><br><span class="line">        tree[p].sum=(tree[p].sum+k*<span class="built_in">len</span>(p))%mod;</span><br><span class="line">        tree[p].tag=(tree[p].tag+k)%mod;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modify</span>(l,r,k,ls);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) <span class="built_in">modify</span>(l,r,k,rs);</span><br><span class="line">    <span class="built_in">update</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addOnTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    c%=mod;</span><br><span class="line">    <span class="keyword">while</span>(T[x].top!=T[y].top)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T[T[x].top].dep&lt;T[T[y].top].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="built_in">modify</span>(dfn[T[x].top],dfn[x],c,<span class="number">1</span>);</span><br><span class="line">        x=T[T[x].top].fa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(T[x].dep&gt;T[y].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="built_in">modify</span>(dfn[x],dfn[y],c,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[p].l&amp;&amp;r&gt;=tree[p].r) <span class="keyword">return</span> tree[p].sum;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) ans=(ans+<span class="built_in">query</span>(l,r,ls))%mod;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) ans=(ans+<span class="built_in">query</span>(l,r,rs))%mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getSumOnTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(T[x].top!=T[y].top)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T[T[x].top].dep&lt;T[T[y].top].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        ans=(ans+<span class="built_in">query</span>(dfn[T[x].top],dfn[x],<span class="number">1</span>))%mod;</span><br><span class="line">        x=T[T[x].top].fa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(T[x].dep&gt;T[y].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    ans=(ans+<span class="built_in">query</span>(dfn[x],dfn[y],<span class="number">1</span>))%mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;r&gt;&gt;mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        g[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">        g[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(r,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(r,r);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> op,x,y,z,i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        <span class="keyword">switch</span>(op)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">                cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">                <span class="built_in">addOnTree</span>(x,y,z);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">                cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">                cout&lt;&lt;<span class="built_in">getSumOnTree</span>(x,y)&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">                cin&gt;&gt;x&gt;&gt;z;</span><br><span class="line">                <span class="built_in">modify</span>(dfn[x],dfn[x]+T[x].sz<span class="number">-1</span>,z,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">                cin&gt;&gt;x;</span><br><span class="line">                cout&lt;&lt;<span class="built_in">query</span>(dfn[x],dfn[x]+T[x].sz<span class="number">-1</span>,<span class="number">1</span>)&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合计数</title>
      <link href="/post/425aabd8d0fb.html"/>
      <url>/post/425aabd8d0fb.html</url>
      
        <content type="html"><![CDATA[<p>组合计数</p><p>本章主要记录基础组合数学的有关知识，包括加法原理、乘法原理、排列组合、二项式定理、卢卡斯定理等基本知识。</p><h1 id="一、计数原理"><a href="#一、计数原理" class="headerlink" title="一、计数原理"></a>一、计数原理</h1><p>基础的计数原理包括加法原理和乘法原理，是组合数学的基础。</p><h2 id="1-1-quad-加法原理"><a href="#1-1-quad-加法原理" class="headerlink" title="1.1$\quad$加法原理"></a>1.1$\quad$加法原理</h2><p>若完成一件事情的方法有 $n$ 类，其中第 $i$ 类方法有 $a_i$ 种不同的方法，且这些方法互补重合，则完成这件事一共有 $\sum_{i=1}^na_i$ 种不同的方法。这样的计数原理称为<strong>加法原理</strong>。</p><p><strong>例</strong>$\qquad$中午可以去A、B、C三个街区吃饭，三个街区分别有 $6$、$5$、$8$ 家餐厅，那么中午吃饭有 $6+5+8=19$ 家餐厅可选。</p><h2 id="1-2-quad-乘法原理"><a href="#1-2-quad-乘法原理" class="headerlink" title="1.2$\quad$乘法原理"></a>1.2$\quad$乘法原理</h2><p>若完成一件事情需要 $n$ 个步骤，其中第 $i$ 个步骤有 $a_i$ 种不同的完成方法，且这些步骤互不干扰，则完成这件事一共有 $\prod_{i=1}^na_i$ 种不同的方法。这样的计数原理成为<strong>乘法原理</strong>。</p><p><strong>例</strong>$\quad$餐厅有 $4$ 种主食，$2$ 种配菜，$5$ 种配汤，那么可以组成 $4\times2\times5=40 $ 种套餐。</p><h1 id="二、排列数与组合数"><a href="#二、排列数与组合数" class="headerlink" title="二、排列数与组合数"></a>二、排列数与组合数</h1><h2 id="2-1-quad-排列数"><a href="#2-1-quad-排列数" class="headerlink" title="2.1$\quad$排列数"></a>2.1$\quad$排列数</h2><p>从 $n$ 个不同元素种依次选出 $m$ 个元素排成一列，产生的不同的排列的数量为</p><script type="math/tex; mode=display">A_n^m(\text{或记作}P_n^m)=\dfrac{n!}{(n-m)!}</script><h2 id="2-2-quad-组合数"><a href="#2-2-quad-组合数" class="headerlink" title="2.2$\quad$组合数"></a>2.2$\quad$组合数</h2><p>从 $n$ 个不同元素种依次选出 $m$ 个组成一个集合（不考虑顺序），产生的不同的集合的数量为</p><script type="math/tex; mode=display">C_n^m(\text{或记作}\dbinom{n}{m})=\dfrac{n!}{m!(n-m)!}</script><h2 id="2-3-quad-组合恒等式"><a href="#2-3-quad-组合恒等式" class="headerlink" title="2.3$\quad$组合恒等式"></a>2.3$\quad$组合恒等式</h2><p><strong>恒等式1</strong>$\quad$ 选出一部分再反选，有 $\dbinom{n}{k}=\dbinom{n}{n-k}$。</p><p><strong>恒等式2</strong>$\quad$ 考虑枚举是否选第 $1$ 个，有 $\dbinom{n}{k}=\dbinom{n-1}{k}+\dbinom{n-1}{k-1}$。</p><p><strong>恒等式3</strong>$\quad\dbinom{n}{k}\dbinom{k}{t}=\dbinom{n}{t}\dbinom{n-t}{k-t}$。</p><p>$\qquad$辅助理解：$n$ 个人选 $k$ 个队长再在其中选 $t$ 个大队长，等于 $n$ 个人选 $t$ 个大队长再在剩下 $n-t$ 个选 $k-t$ 个队长。</p><p><strong>恒等式4</strong>$\quad$ 枚举最后一个选在哪里，也可由恒等式1迭代导出，有 $\dbinom{n}{k}=\sum\limits_{i=k}^n\dbinom{i-1}{k-1}$。</p><p><strong>恒等式5</strong>$\quad$ $n+m$ 个选 $k$ 个，枚举前 $n$ 个选多少，有 $\dbinom{n+m}{k}=\sum\limits_{i=0}^k\dbinom{n}{i}\dbinom{m}{k-i}$。</p><p><strong>恒等式6</strong>$\quad$ 枚举第 $a+1$ 个位置，有 $\dbinom{n}{a+b+1}=\sum\limits_{i=a+1}^{n-b}\dbinom{i-1}{a}\dbinom{n-i}{b}$。</p><p>$b=0$ 时退化为恒等式4。</p><p><strong>恒等式7</strong>$\quad$ $\sum\limits_{i=0}^n\dbinom{n}{i}=2^n$。</p><h2 id="2-4-quad-组合数的求法"><a href="#2-4-quad-组合数的求法" class="headerlink" title="2.4$\quad$组合数的求法"></a>2.4$\quad$组合数的求法</h2><h3 id="2-4-1-quad-根据定义求解"><a href="#2-4-1-quad-根据定义求解" class="headerlink" title="2.4.1 $\quad$ 根据定义求解"></a>2.4.1 $\quad$ 根据定义求解</h3><p>求解 $C_n^m\bmod p$ 时，可以计算 $n!\bmod p$ 的值，之后乘上 $m!^{-1}(n-m)!^{-1}\bmod p$ （即逆元）即可。当 $p$ 为质数时可以利用欧拉定理和快速幂求解逆元，其余情况可以线性求解逆元。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">    ll w=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) w=w*a%p;</span><br><span class="line">        a=a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n,ll m,ll p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m&gt;n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (a[n]*<span class="built_in">qpow</span>(a[m],p<span class="number">-2</span>,p)%p)*<span class="built_in">qpow</span>(a[n-m],p<span class="number">-2</span>,p)%p;<span class="comment">//a数组为线性预处理的阶乘数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-quad-递推求解"><a href="#2-4-2-quad-递推求解" class="headerlink" title="2.4.2 $\quad$ 递推求解"></a>2.4.2 $\quad$ 递推求解</h3><p>根据组合恒等式 2</p><script type="math/tex; mode=display">\dbinom{n}{k}=\dbinom{n-1}{k}+\dbinom{n-1}{k-1}</script><p>我们可以递推求解。下面的代码求解出了所有 $\dbinom{i}{j}(0\leq j\leq i\leq n)$，表示为数组 <code>c[i][j]</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    c[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        c[i][<span class="number">0</span>]=c[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">            c[i][j]=(c[i<span class="number">-1</span>][j]+c[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、二项式定理与杨辉三角"><a href="#三、二项式定理与杨辉三角" class="headerlink" title="三、二项式定理与杨辉三角"></a>三、二项式定理与杨辉三角</h1><h2 id="3-1-quad-二项式定理"><a href="#3-1-quad-二项式定理" class="headerlink" title="3.1$\quad$二项式定理"></a>3.1$\quad$二项式定理</h2><script type="math/tex; mode=display">(a+b)^n=\sum\limits_{k=0}^nC_n^ka^kb^{n-k}</script><p><strong>例</strong> $\quad$ $(a+b)^3=a^3+3a^2b+3ab^2+b^3$。</p><h2 id="3-2-quad-杨辉三角"><a href="#3-2-quad-杨辉三角" class="headerlink" title="3.2$\quad$杨辉三角"></a>3.2$\quad$杨辉三角</h2><p>对于每个 $n$，二项式定理拆解后的二项式稀疏构成杨辉三角，如下图。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/bisgz7o3.png" alt=""></p><p>可以发现，三角中每一个数为其左上和右上的两个数之和，可以得出 $C_n^k=C_{n-1}^{k-1}+C_{n-1}^{k}$，即恒等式 2。</p><h1 id="四、卢卡斯定理"><a href="#四、卢卡斯定理" class="headerlink" title="四、卢卡斯定理"></a>四、卢卡斯定理</h1><h2 id="4-1-quad-卢卡斯定理"><a href="#4-1-quad-卢卡斯定理" class="headerlink" title="4.1$\quad$卢卡斯定理"></a>4.1$\quad$卢卡斯定理</h2><p><strong>卢卡斯定理</strong>$\quad$若 $p$ 是质数，则对于任意整数 $1\leq m\leq n$，有：</p><script type="math/tex; mode=display">\dbinom{n}{m}\equiv \dbinom{n\bmod p}{m\bmod p}\dbinom{n/p}{m/p}\pmod p</script><p>求解 $\binom{n}{m}\bmod p$ 时，可以利用公式求解 $\dbinom{n\bmod p}{m\bmod p}\bmod p$，同时递归求解 $\dbinom{n/p}{m/p}\bmod p$，需要预处理出阶乘数组 $a$，在计算 $\dfrac{n!}{m!(n-m)!}$ 时利用逆元求出。因为 $p$ 为质数，所以可以直接用快速幂方法求出逆元。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100005</span></span><br><span class="line">ll t,a[MAXN];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">    ll w=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) w=w*a%p;</span><br><span class="line">        a=a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n,ll m,ll p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m&gt;n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (a[n]*<span class="built_in">qpow</span>(a[m],p<span class="number">-2</span>,p)%p)*<span class="built_in">qpow</span>(a[n-m],p<span class="number">-2</span>,p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">lucas</span><span class="params">(ll n,ll m,ll p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">C</span>(n%p,m%p,p)*<span class="built_in">lucas</span>(n/p,m/p,p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll n,m,p;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;m&gt;&gt;p;</span><br><span class="line">        a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=p;i++) a[i]=a[i<span class="number">-1</span>]*i%p;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">lucas</span>(n+m,m,p)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-扩展卢卡斯定理"><a href="#4-2-扩展卢卡斯定理" class="headerlink" title="4.2 扩展卢卡斯定理"></a>4.2 扩展卢卡斯定理</h2><p>此部分需要同余基础知识点，<del>貌似与卢卡斯定理没有任何关系</del>。</p><p>因为利用卢卡斯定理处理问题存在局限性（$p$ 必须为质数），不能处理普遍情况。此时可以用扩展卢卡斯定理解决普遍情况。</p><p><strong>求解以下问题</strong>：对于组合数 $\dbinom{n}{m}$ ，求 $\dbinom{n}{m}\bmod p$ ，$p$ 不保证为质数。</p><p>如果 $p$ 为质数会方便很多，所以考虑将其拆为若干个模质数的式子。根据唯一分解定理，</p><script type="math/tex; mode=display">P=p_1^{a_1}p_2^{a_2}\cdots p_k^{a_k}</script><p>所以考虑拆分为</p><script type="math/tex; mode=display">\begin{cases}x_1\equiv\dbinom{n}{m}&\pmod {p_1^{a_1}}\\x_2\equiv\dbinom{n}{m}&\pmod {p_2^{a_2}}\\&\cdots\\x_k\equiv\dbinom{n}{m}&\pmod {p_k^{a_k}}\end{cases}</script><p>因为 $\dbinom{n}{m}=\dfrac{n!}{m!(n-m)!}$ ，在模  $p_1^{a_1}$ 意义下不能直接利用逆元化解分母。所以考虑如下拆分：</p><script type="math/tex; mode=display">\dbinom{n}{m}\equiv\dfrac{n!}{m!(n-m)!}\equiv\dfrac{\dfrac{n!}{p^x}}{\dfrac{m!}{p^y}\cdot\dfrac{(n-m)!}{p^z}}\cdot p^{x-y-z}\pmod {p^k}</script><p>$x$ 为 $n!$ 中包含的 $p$ 的因子个数，$y$、$z$  同理。</p><p>考虑逐个解决。因为 $n!$ 中一共有 $\left\lfloor\dfrac{n}{p}\right\rfloor$ 个数是 $p$ 的倍数，然后递归处理其他因数。</p><script type="math/tex; mode=display">n!\equiv p^{\left\lfloor\frac{n}{p}\right\rfloor}(\left\lfloor\frac{n}{p}\right\rfloor)!(\prod\limits_{i=1,i\not\equiv0\pmod p}^{n}i)\pmod{p^k}</script><p>将 $\prod\limits_{i=1,i\not\equiv0\pmod p}^{n}i$  拆分为两个部分：不含有 $p$ 的因子和含有 $p$ 的因子。</p><script type="math/tex; mode=display">n!\equiv p^{\left\lfloor\frac{n}{p}\right\rfloor}(\left\lfloor\frac{n}{p}\right\rfloor)!(\prod\limits_{i=1,i\not\equiv0\pmod p}^{p^k}i)^{\left\lfloor\frac{n}{p^k}\right\rfloor}(\prod\limits_{i=p^k\left\lfloor\frac{n}{p^k}\right\rfloor,i\not\equiv0\pmod p}^{n}i)\pmod{p^k}</script><p>所以考虑设立函数 $f(n)=\dfrac{n!}{p^k}$，所以有</p><script type="math/tex; mode=display">f(n)\equiv\dfrac{n!}{p^k}\equiv p^{\left\lfloor\frac{n}{p}\right\rfloor}(\left\lfloor\frac{n}{p}\right\rfloor)!(\prod\limits_{i=1,i\not\equiv0\pmod p}^{p^k}i)^{\left\lfloor\frac{n}{p^k}\right\rfloor}(\prod\limits_{i=p^k\left\lfloor\frac{n}{p^k}\right\rfloor,i\not\equiv0\pmod p}^{n}i)\pmod{p^k}</script><p>边界：$f(0)=1$。</p><p>这样函数 $f$ 就一定和 $p^k$ 互质了，就可以直接利用扩展欧几里得算法（$\text{exgcd}$）求出逆元（ $\text{inv}$ ），化分母。</p><p>然后还需要求解 $p^{x-y-z}$。考虑设立函数 $g(n)=x$（ $x$ 为 $n!$ 中包含的 $p$ 的因子数），所以有</p><script type="math/tex; mode=display">g(n)=\left\lfloor\frac{n}{p}\right\rfloor+g(\left\lfloor\dfrac{n}{p}\right\rfloor)</script><p>边界：$g(x)=0(x&lt;p)$</p><p>这样就可以求解啦。式子变成了</p><script type="math/tex; mode=display">\dbinom{n}{m}\equiv\dfrac{f(n)}{f(m)f(n-m)}\cdot p^{g(n)-g(m)-g(n-m)}\pmod{p^k}</script><p>然后用中国剩余定理（ $\text{CRT}$ ）合并即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 10005</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll n,m,P,A[MAXN],B[MAXN];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">    ll w=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) w=w*a%p;</span><br><span class="line">        a=a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll x,ll p,ll pk)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    ll a=<span class="number">1</span>,b=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=pk;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i%p) a=a*i%pk;</span><br><span class="line">    &#125;</span><br><span class="line">    a=<span class="built_in">qpow</span>(a,x/pk,pk);</span><br><span class="line">    <span class="keyword">for</span>(ll i=pk*(x/pk);i&lt;=x;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i%p) b=b*(i%pk)%pk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">f</span>(x/p,p,pk)*a%pk*b%pk;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exgcd</span>(b,a%b,y,x);</span><br><span class="line">    y-=a/b*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a,ll p)</span></span>&#123;</span><br><span class="line">    ll x,y;</span><br><span class="line">    <span class="built_in">exgcd</span>(a,p,x,y);</span><br><span class="line">    <span class="keyword">return</span> (x+p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">g</span><span class="params">(ll x,ll p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x/p+<span class="built_in">g</span>(x/p,p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">CmodPk</span><span class="params">(ll p,ll pk)</span></span>&#123;</span><br><span class="line">    ll fx=<span class="built_in">f</span>(n,p,pk),fy=<span class="built_in">f</span>(m,p,pk),fz=<span class="built_in">f</span>(n-m,p,pk);</span><br><span class="line">    fy=<span class="built_in">inv</span>(fy,pk),fz=<span class="built_in">inv</span>(fz,pk);</span><br><span class="line">    <span class="keyword">return</span> fx*fy%pk*fz%pk*<span class="built_in">qpow</span>(p,<span class="built_in">g</span>(n,p)-<span class="built_in">g</span>(m,p)-<span class="built_in">g</span>(n-m,p),pk)%pk;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">crt</span><span class="params">(ll cnt)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">        ll M=P/A[i];</span><br><span class="line">        ll T=<span class="built_in">inv</span>(M,A[i]);</span><br><span class="line">        ans=(ans+B[i]*M%P*T%P)%P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">exlucas</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll tmp=P,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">2</span>;i*i&lt;=P;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tmp%i==<span class="number">0</span>)&#123;</span><br><span class="line">            ll pk=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(tmp%i==<span class="number">0</span>) pk*=i,tmp/=i;</span><br><span class="line">            A[++cnt]=pk;</span><br><span class="line">            B[cnt]=<span class="built_in">CmodPk</span>(i,pk);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tmp&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        A[++cnt]=tmp;</span><br><span class="line">        B[cnt]=<span class="built_in">CmodPk</span>(tmp,tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">crt</span>(cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;P;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">exlucas</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同余</title>
      <link href="/post/2f4ed4efbf3d.html"/>
      <url>/post/2f4ed4efbf3d.html</url>
      
        <content type="html"><![CDATA[<p>同余</p><p>本章主要记录有关同余、费马小定理、欧拉定理、扩展欧几里得算法、裴蜀定理、乘法逆元、威尔逊定理、线性同余方程、中国剩余定理、扩展中国剩余定理、BSGS以及扩展BSGS的学习笔记。</p><p>由于内容复杂且关联较少，建议配备 <code>ctrl+F</code> 进行快乐食用。</p><p>正在继更ing</p><h1 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h1><p>这个板块着重介绍同余的基本知识，虽然多为数学竞赛内容，但也对信息学竞赛有不少帮助，定理和性质为拓展内容。</p><p>本部分参考《初等数论》进行撰写。</p><h2 id="1-1-quad-基本定义、定理与性质"><a href="#1-1-quad-基本定义、定理与性质" class="headerlink" title="1.1$\quad$基本定义、定理与性质"></a>1.1$\quad$基本定义、定理与性质</h2><p><strong>定义1</strong>（<strong>同余</strong>）$\quad$ 设 $m\neq0$。若 $m\mid a-b$，即 $a-b=km$，则称 $m$ 为<strong>模</strong>，$a$ <strong>同于与</strong> $b$ <strong>模</strong> $m$ 以及 $b$ <strong>是</strong> $a$ <strong>对模</strong> $m$ <strong>的剩余</strong>，记作</p><script type="math/tex; mode=display">a\equiv b\pmod{m} \tag{1}</script><p>不然，则称 $a$ <strong>不同余于</strong> $b$ <strong>模</strong> $m$，$b$ <strong>不是</strong> $a$ <strong>对模</strong> $m$ <strong>的剩余</strong>，记作 $a\not\equiv b\pmod{m}$</p><p>式 $(1)$ 称为<strong>模</strong> $m$ <strong>的同余式</strong>，或简称<strong>同余式</strong>。</p><p>由于 $m\mid a-b$ 等价于 $-m\mid a-b$ ，所以同余式 $(1)$ 等价于</p><script type="math/tex; mode=display">a\equiv b\pmod{(-m)}</script><p><strong>定理1</strong>$\quad$ $a$ 同余于 $b$ 模 $m$ 的充要条件是 $a$ 和 $b$ 被 $m$ 除后所得的最小非负余数相等，即若</p><script type="math/tex; mode=display">\begin{aligned}a=q_1m+r_1&,0\leq r_1<m\\b=q_2m+r_2&,0\leq r_2<m,\end{aligned}</script><p>则 $r_1=r_2$。</p><p><strong>性质Ⅰ</strong>$\quad$ 同余是一种等价关系，即有</p><script type="math/tex; mode=display">\begin{aligned}a\equiv a\pmod{m}\\a\equiv b\pmod{m}\iff b\equiv a\pmod{m}\\a\equiv b\pmod{m}\;,\;b\equiv c\pmod{m}\Rightarrow a\equiv c\pmod{m}\end{aligned}</script><p><strong>性质Ⅱ</strong>$\quad$ 同余式可以相加，即若有</p><script type="math/tex; mode=display">a\equiv b\pmod{m}\;,\;c\equiv d\pmod{m}\tag{2}</script><p>则有</p><script type="math/tex; mode=display">a+c\equiv b+d\pmod m</script><p><strong>性质Ⅲ</strong>$\quad$ 同余式可以相乘，即若式 $(2)$ 成立，则</p><script type="math/tex; mode=display">ac\equiv bd\pmod m</script><p><strong>性质Ⅳ</strong>$\quad$ 设 $f(x)=a_nx^n+\cdots+a_0$，$g(x)=b_nx^n+\cdots+b_0$ 是两个整系数多项式，满足</p><script type="math/tex; mode=display">a_j\equiv b_j\pmod m\;,\;0\leq j<n\tag{3}</script><p>那么，若 $a\equiv b\pmod m$，则</p><script type="math/tex; mode=display">f(a)\equiv g(b)\pmod m</script><p>特别地，<strong>对所有整数</strong> $x$ 有</p><script type="math/tex; mode=display">f(x)\equiv g(x)\pmod m\tag{4}</script><p><strong>定义2</strong>$\quad$ 设 $f(x)=a_nx^n+\cdots+a_0$ 和 $g(x)=b_nx^n+\cdots+b_0$ 是两个整系数多项式。当满足条件 $(3)$ 时，称<strong>多项式</strong> $f(x)$ <strong>同余于多项式</strong> $g(x)$ <strong>模</strong> $m$，记作</p><script type="math/tex; mode=display">f(x)\equiv g(x)\pmod m</script><p>当满足 $f(x)\equiv g(x)\pmod m$ 时，称<strong>多项式</strong> $f(x)$ <strong>等价于多项式</strong> $g(x)$ <strong>模</strong> $m$，式 $(4)$称为<strong>模</strong> $m$ <strong>的恒等同余式</strong></p><p><strong>性质Ⅴ</strong>$\quad$ 设 $d\geq1$，$d\mid m$，那么，若式 $(1)$ 成立，则 $a\equiv b\pmod d$</p><p><strong>性质Ⅵ</strong>$\quad$ 设 $d\not=0$，那么 $a\equiv b\pmod m$ 等价于 $da\equiv db\pmod{\left\vert d\right\vert m}$</p><p><strong>性质Ⅶ</strong>$\quad$ 同余式 $ca\equiv cb\pmod m$ 等价于 $a\equiv b\pmod{\frac m{\gcd(c,m)}}$</p><p>特别地，当 $\gcd(c,m)=1$ 时，上述同余式等价于 $a\equiv b\pmod m$</p><p><strong>性质Ⅷ</strong>$\qquad$ 若 $m\geq1$，$\gcd(a,m)=1$，则存在 $c$ 使得</p><script type="math/tex; mode=display">ca\equiv1\pmod m\tag{5}</script><p><strong>定义3</strong>$\quad$ 若存在 $m\geq1$，$\gcd(a,m)=1$，且满足式 $(5)$，我们把 $c$ 称为 $a$ 对模 $m$ 的逆，记作 $a^{-1}\pmod m$ 或 $a^{-1}$</p><p><strong>性质Ⅸ</strong>$\quad$ 同余式组</p><script type="math/tex; mode=display">a\equiv b\pmod{m_j}\;,\;j=1,2,\cdots,k</script><p>同时成立的充要条件是</p><script type="math/tex; mode=display">a\equiv b\pmod{[m_1,m_2,\cdots,m_k]}</script><h2 id="1-2-quad-同余类与剩余系"><a href="#1-2-quad-同余类与剩余系" class="headerlink" title="1.2$\quad$同余类与剩余系"></a>1.2$\quad$同余类与剩余系</h2><p><strong>定义4（同余类和剩余系）</strong>$\quad$ 对于 $\forall a\in [0,m-1]$，集合 $\{a+km\}(k\in\mathbb{Z})$ 的所有数模 $m$ 同余，余数都是 $a$，该集合成为模 $m$ 的<strong>同余类</strong>，简记为 $\overline{a}$。</p><p>模 $m$ 的同余类一共有 $m$ 个，分别为 $\overline{0},\overline{1},\overline{2},\cdots,\overline{m-1}$。它们构成 $m$ 的<strong>完全剩余系</strong>。</p><p>$1\sim m$ 中与 $m$ 互质的数代表的同余类共有 $\phi(m)$ 个，它们构成 $m$ 的<strong>简化剩余系</strong>。</p><h1 id="二、费马小定理和欧拉定理"><a href="#二、费马小定理和欧拉定理" class="headerlink" title="二、费马小定理和欧拉定理"></a>二、费马小定理和欧拉定理</h1><p>前置芝士：欧拉函数。</p><p>利用同余基本知识和欧拉函数，即可证明费马小定理和欧拉定理。</p><h2 id="2-1-quad-费马小定理"><a href="#2-1-quad-费马小定理" class="headerlink" title="2.1$\quad$费马小定理"></a>2.1$\quad$费马小定理</h2><p><strong>定理2（费马小定理）</strong>$\quad$ 若 $p$ 是质数，则对于任意整数 $a$，有</p><script type="math/tex; mode=display">a^p\equiv a\pmod p</script><h2 id="2-2-quad-欧拉定理"><a href="#2-2-quad-欧拉定理" class="headerlink" title="2.2$\quad$欧拉定理"></a>2.2$\quad$欧拉定理</h2><p><strong>定理3（欧拉定理）</strong>$\quad$ 若正整数 $a,n$ 互质，则</p><script type="math/tex; mode=display">a^{\phi(n)}\equiv1\pmod n</script><p>其中，$\phi(n)$ 为欧拉函数。</p><p>特别地，当 $p$ 是质数时，$\phi(p)=p-1$，并且只有 $p$ 的倍数与 $p$ 不互质，所以，只要 $a$ 不是 $p$ 的倍数，就有</p><script type="math/tex; mode=display">a^{p-1}\equiv1\pmod p</script><p>两边同乘 $a$ 就是费马小定理。</p><p><strong>证</strong>$\quad$ 设 $n$ 的简化剩余系为 $\{\overline{a_1},\overline{a_2},\cdots,\overline{a_{\phi(n)}}\}$。对于 $\forall a_i,a_j$，若 $a\times a_i\equiv a\times a_j\pmod n$，则 $a\times(a_i-a_j)\equiv 0$。因为 $a,n$ 互质，所以 $a_i-a_j\equiv 0$，即 $a_i\equiv a_j$。故当 $a_i\not=a_j$ 时，$aa_1,aa_j$ 也代表不同的同余类。</p><p>又因为简化剩余系关于模 $n$ 乘法封闭，故 $\overline{aa_1}$ 也在简化剩余系集合中。因此，集合 $\{\overline{a_1},\overline{a_2},\cdots,\overline{a_{\phi(n)}}\}$ 与集合 $\{\overline{aa_1},\overline{aa_2},\cdots,\overline{aa_{\phi(n)}}\}$ 都能表示 $n$ 的简化剩余系，故有</p><script type="math/tex; mode=display">a^{\phi(n)}\prod\limits_{i=1}^{\phi(n)} a_i\equiv\prod\limits_{i=1}^{\phi(n)}aa_i\equiv \prod\limits_{i=1}^{\phi(n)}a_i\pmod n</script><p>两边同时除以 $\prod\limits_{i=1}^{\phi(n)}a_i$ 可得</p><script type="math/tex; mode=display">a^{\phi(n)}\equiv1\pmod n</script><p>当 $p$ 为质数时，$\phi(p)=p-1$，并且只有 $p$ 的倍数与 $p$ 不互质。所以，只要 $a$ 不是 $p$ 的倍数，$a^{p-1}\equiv1\pmod p$ 显然成立。两边同乘 $a$ 即费马小定理。</p><p><strong>证毕。</strong></p><h2 id="2-3-quad-欧拉定理的推论"><a href="#2-3-quad-欧拉定理的推论" class="headerlink" title="2.3$\quad$欧拉定理的推论"></a>2.3$\quad$欧拉定理的推论</h2><p><strong>推论1（欧拉定理推论）</strong>$\quad$ 若正整数 $a,n$ 互质，则对于任意正整数 $b$，有</p><script type="math/tex; mode=display">a^b\equiv a^{b\mod{\phi(n)}}\pmod n</script><p><strong>证</strong>$\quad$ 设 $b=q\times\phi(n)+r$，其中 $0\leq r&lt;\phi(n)$，即 $r=b\mod{\phi(n)}$。利用欧拉定理有</p><script type="math/tex; mode=display">a^b\equiv a^{q\times\phi(n)+r}\equiv(a^{\phi(n)})^q\times a^r\equiv 1^q\times a^r\equiv a^r\equiv a^{b\mod{\phi(n)}+\phi(n)}\pmod n</script><p><strong>证毕。</strong></p><p>特别地，当 $a,n$ 不一定互质且 $b&gt;\phi(n)$ 时，有</p><script type="math/tex; mode=display">a^b\equiv a^{b\mod{\phi(n)+\phi(n)}}\pmod n</script><h2 id="2-4-quad-光速幂"><a href="#2-4-quad-光速幂" class="headerlink" title="2.4$\quad$光速幂"></a>2.4$\quad$光速幂</h2><p>给定 $a$ 和 $c$，每次询问给出 $b$，求 $a^b\bmod c$。</p><p>我们可以先运用 $a^b\bmod a^{b\bmod \phi(n)+\phi(n)}\pmod c$，将 $b$ 缩小到 $2\phi(c)(&lt;2c)$ 的范围，有</p><script type="math/tex; mode=display">a^b=(a^{\sqrt c})^{\left\lfloor\frac{b}{\sqrt c}\right\rfloor}\times a^{b\bmod \sqrt c}</script><p>其中，$\frac{b}{\sqrt c}&lt;2\sqrt c$，$b\bmod \sqrt c&lt;\sqrt c$</p><p>我们预处理 $(a^{\sqrt c})^i$ 和 $a^j$ 即可 $O(\sqrt c)$ 预处理，$O(1)$ 回答询问。</p><h1 id="三、扩展欧几里得算法"><a href="#三、扩展欧几里得算法" class="headerlink" title="三、扩展欧几里得算法"></a>三、扩展欧几里得算法</h1><p>前置芝士：欧几里得算法。</p><p>本部分着重介绍扩展欧几里得算法、裴蜀定理和乘法逆元相关知识。</p><h2 id="3-1-quad-裴蜀定理"><a href="#3-1-quad-裴蜀定理" class="headerlink" title="3.1$\quad$裴蜀定理"></a>3.1$\quad$裴蜀定理</h2><p><strong>定理4（裴蜀定理）</strong> $\quad$ $\forall a,b\in\mathbb{Z}$，一定存在一组 $x,y\in\mathbb{Z}$，满足</p><script type="math/tex; mode=display">ax+by=\gcd(a,b)</script><p><strong>证</strong>$\qquad$ 在欧几里得算法的最后一步，即 $b=0$ 时，我们一定会得出一组整数 $\begin{cases}x=1\\b=0\end{cases}$，使得 $a\times1+0\times0=\gcd(a,0)$。</p><p>由欧几里得算法得 $\gcd(a,b)=\gcd(b,a\bmod b)$。假设存在一组整数 $x,y$，满足 $bx+(a\bmod b)y=\gcd(b,a\bmod b)$。</p><p>因为 $bx+(a\bmod b)y$</p><p>$\begin{aligned}<br>\;\;&amp;=bx+(a-b\left\lfloor\dfrac{a}{b}\right\rfloor)y \\<br>&amp;=bx+ay-b\left\lfloor\dfrac{a}{b}\right\rfloor y \\<br>&amp;=ay+b(x-b\left\lfloor\dfrac{a}{b}\right\rfloor)<br>\end{aligned}$</p><p>所以，令 $x’=y$，$y’=x-\left\lfloor\dfrac{a}{b}\right\rfloor y$，就得到了 $ax’+by’=\gcd(a,b)$。</p><p>对以上过程应用数学归纳法，可知裴蜀定理一定成立。</p><p><strong>证毕。</strong></p><h2 id="3-2-quad-扩展欧几里得算法"><a href="#3-2-quad-扩展欧几里得算法" class="headerlink" title="3.2$\quad$扩展欧几里得算法"></a>3.2$\quad$扩展欧几里得算法</h2><p>上面证明的过程中，我们通过 $ax+(a\bmod b)y=\gcd(a,b)$ 推出了 $ax’+by’=\gcd(a,b)$。按照欧几里得算法的思路，并给出整数 $x$ 和整数 $y$ 的计算方法成为<strong>扩展欧几里得算法</strong>。</p><p>下面给出扩展欧几里得算法过程：</p><ol><li><p>给定 $a$ 和 $b$，递归 $\operatorname{exgcd}(a,b)$；</p></li><li><p>是否 $b=0$。如果是，返回 $\begin{cases}x=1\\y=0\end{cases}$；如果不是，递归 $\operatorname{exgcd}(b,a\bmod b)$，并重复进行1和2操作，直至条件成立；</p></li><li><p>每次递归结束后，计算 $\begin{cases}x’=y\\y’=x-\left\lfloor\dfrac{a}{b}\right\rfloor y\end{cases}$。</p></li></ol><p>也可以在算法过程中顺便记录 $\gcd(a,b)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll&amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    ll d=<span class="built_in">exgcd</span>(b,a%b,x,y);</span><br><span class="line">    ll temp=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=temp-a/b*y;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll a,b,x,y;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">ll d=<span class="built_in">exgcd</span>(a,b,x,y);</span><br></pre></td></tr></table></figure><p>上述程序求出方程 $ax+by=\gcd(a,b)$ 的一组特解 $x_0,y_0$，并返回 $\gcd(a,b)$，即 $d$。</p><p>对于方程 $ax+by=c$，当且仅当 $d\mid c$ 时有解。我们可以求出 $ax+by=d$ 的一组特解 $x_0,y_0$，然后令 $x_0,y_0$ 同时乘上 $\dfrac{c}{d}$，就得到了<strong>方程</strong> $ax+b=c$ <strong>的特解</strong></p><script type="math/tex; mode=display">\dfrac{c}{d}x_0\;,\;\dfrac{c}{d}y_0</script><p>对于方程 $ax+by=d$，我们将其特解表示为 $x_0,y_0$，有 $a(x+m)+b(y-n)=ax+by+am-bn=d$。因为 $ax+by=d$，可以推出 $am-bn=0\Rightarrow am=bn\Rightarrow \dfrac{a}{b}=\dfrac{n}{m}$。由于 $\gcd(a,b)=d$，故 $m$ 和 $n$ 最小只能取 $\dfrac{b}{d}$ 和 $\dfrac{a}{d}$，能保证 $m$ 和 $n$ 为整数。所以，<strong>方程</strong> $ax+by=d$ <strong>的通解</strong>为</p><script type="math/tex; mode=display">\begin{cases}x_1=x_0+\dfrac{b}{d}k\\ \\y_1=y_0-\dfrac{a}{d}k\end{cases}(k\in\mathbb{Z})</script><h2 id="3-3-quad-线性同余方程"><a href="#3-3-quad-线性同余方程" class="headerlink" title="3.3$\quad$线性同余方程"></a>3.3$\quad$线性同余方程</h2><p>给定整数 $a,b,m$，求一个整数 $x$ 满足 $ax\equiv b\pmod m$，或者给出无解。</p><p><strong>定义5（线性同余方程）</strong>$\qquad$ 在整数域内，关于 $x$ 的同余方程 $ax\equiv b\pmod m$ 称为<strong>一次同余方程</strong>，也称<strong>线性同余方程</strong>。</p><p>$ax\equiv b\pmod m$ 等价于 $m\mid (ax-b)$，一定存在一个整数 $k$，有 $ax+mk=b$。我们可以利用扩展欧几里得算法对其进行计算。</p><h2 id="3-4-quad-乘法逆元"><a href="#3-4-quad-乘法逆元" class="headerlink" title="3.4$\quad$乘法逆元"></a>3.4$\quad$乘法逆元</h2><p><strong>定义6（乘法逆元）</strong>$\qquad$ 若整数 $b,m$ 互质，并且 $b\mid a$，则存在一个整数 $x$，使得 $\dfrac{a}{b}\equiv ax\pmod m$。称 $x$ 为 $b$ <strong>的模</strong> $m$ <strong>乘法逆元</strong>，记为 $b^{-1}\pmod m$。</p><p>因为 $\dfrac{a}{b}\equiv a\times b^{-1}\equiv\dfrac{a}{b}\times b\times b^{-1}\pmod m$，所以 $b\times b^{-1}\equiv1\pmod m$。</p><p>下面是一些求解乘法逆元的方法。</p><p><strong>方法一：解线性同余方程求解乘法逆元</strong></p><p>如果只保证 $b,m$ 互质，那么乘法逆元可以通过求解同余方程 $bx\equiv1\pmod m$ 得到。算法过程已在上文中提及，不再赘述。</p><p><strong>方法二：快速幂求解乘法逆元</strong></p><p>本方法使用有前提条件。</p><p>如果 $m$ 是质数，并用 $p$ 表示 $m$，并且 $b&lt;p$，根据费马小定理， $b^{p-1}\equiv1\pmod p$，即</p><script type="math/tex; mode=display">b\times b^{p-2}\equiv1\pmod p</script><p>因此，<strong>当模数</strong> $p$ <strong>为质数时，</strong>$b^{p-2}$ <strong>即为</strong> $b$ <strong>的乘法逆元</strong>。</p><p>我们直接对 $b^{p-2}$ 进行快速幂计算即可得到答案。</p><p><strong>方法三：线性求解乘法逆元</strong></p><p>给定 $n,p$，求出 $1,2,\cdots,n$ 在模 $p$ 意义下的乘法逆元。</p><p>显而易见，$1^{-1}\equiv1\pmod p$。</p><p>假设当我们递归到 $i(i&gt;1)$ 时已经把前 $i-1$ 个的乘法逆元算出来了，我们设 $j=p\bmod i$，$k=\left\lfloor\dfrac{p}{i}\right\rfloor$，有 $p=ki+j$，即</p><script type="math/tex; mode=display">ki+j\equiv 0\pmod p</script><p>两边同乘 $i^{-1}j^{-1}$ 得</p><script type="math/tex; mode=display">\begin{aligned}kj^{-1}+i^{-1}&\equiv0\pmod p\\i^{-1}&\equiv kj^{-1}\pmod p\\i^{-1}&\equiv \left\lfloor\dfrac{p}{i}\right\rfloor(p\bmod i)^{-1}\pmod p\end{aligned}</script><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;p);</span><br><span class="line">    inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        inv[i]=(<span class="type">long</span> <span class="type">long</span>)(p - p / i) * inv[p % i] % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,inv[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法四：线性求解任意 $n$ 个数的逆元</strong></p><p>任意给定 $n$ 个数 $a_1,a_2,\cdots,a_n$，求它们在模 $p$ 意义下的乘法逆元，其中，$p$ 为质数。</p><p>我们设</p><script type="math/tex; mode=display">s_i=\prod_{i=1}^ia_i</script><p>通过快速幂或者扩展欧几里得算法求得 $s_i$ 的乘法逆元记为 $sv_i$，即</p><script type="math/tex; mode=display">sv_i=s_i^{-1}\pmod p</script><p>我们将 $sv_1$ 乘上 $a_i$，会与 $a_i^{-1}\pmod p$ 相消，得</p><script type="math/tex; mode=display">a_i\times sv_1=sv_{i-1}</script><p>我们就能递推线性求解乘法逆元。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">ll n,p,k,a[MAXN],s[MAXN],t[MAXN];</span><br><span class="line">ll ans=<span class="number">0</span>,temp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans=(<span class="type">long</span> <span class="type">long</span>)ans*a%mod;</span><br><span class="line">        a=(<span class="type">long</span> <span class="type">long</span>)a*a%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">    s[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    t[n+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        s[i]=s[i<span class="number">-1</span>]*a[i]%p;</span><br><span class="line">    &#125;</span><br><span class="line">    t[n+<span class="number">1</span>]=<span class="built_in">qpow</span>(s[n],p<span class="number">-2</span>,p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i;i--)&#123;</span><br><span class="line">        t[i]=t[i+<span class="number">1</span>]*a[i]%p;</span><br><span class="line">    &#125;</span><br><span class="line">    temp=k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ans=(ans+(t[i+<span class="number">1</span>]*s[i<span class="number">-1</span>]%p)*temp)%p;</span><br><span class="line">        temp=temp*k%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-quad-威尔逊定理"><a href="#3-5-quad-威尔逊定理" class="headerlink" title="3.5$\quad$威尔逊定理"></a>3.5$\quad$威尔逊定理</h2><p><strong>定理5（威尔逊定理）</strong>$\quad$ 对于任意素数 $p$，有 $(p-1)!\equiv-1\pmod p$。</p><p><strong>证</strong>$\quad$ 我们知道，$x^2\equiv1\pmod p$ 的解只有 $x\equiv\pm1\pmod p$，所以 $2\sim p-2$ 和逆元两两对应。剩下 $1\times (p-1)\equiv -1\pmod p$。</p><p><strong>证毕。</strong></p><h1 id="四、中国剩余定理"><a href="#四、中国剩余定理" class="headerlink" title="四、中国剩余定理"></a>四、中国剩余定理</h1><p>前置芝士：乘法逆元。</p><p>本节主要介绍有关中国剩余定理和扩展中国剩余定理，是解决线性同余方程组问题的重要方法。</p><h2 id="4-1-quad-中国剩余定理"><a href="#4-1-quad-中国剩余定理" class="headerlink" title="4.1$\quad$中国剩余定理"></a>4.1$\quad$中国剩余定理</h2><p><strong>定理6（中国剩余定理，孙子定理）</strong>$\quad$ 设 $m_1,m_2,\cdots,m_n$ 是两两互质的整数，$m=\prod_{i=1}^n{m_i}$，$M_i=m/m_i$，$t_i$ 是线性同余方程 $M_it_i\equiv1\pmod{m_i}$ 的一个解。对于任意的 $n$个整数 $a_1,a_2,\cdots,a_n$，方程组</p><script type="math/tex; mode=display">\begin{cases}x\equiv a_1\pmod{m_1}\\x\equiv a_2\pmod{m_2}\\\cdots\\x\equiv a_n\pmod{m_n}\end{cases}</script><p>有整数解，解为 $x=\sum_{i=1}^na_iM_it_i$。</p><p><strong>证</strong>$\quad$ 因为 $M_i=m/m_i$ 是除 $m_i$ 之外所有模数的倍数，所以 $\forall k\not=i\;,\;a_iM_it_i\equiv0\pmod{m_k}$。又因为 $a_iM_it_i\equiv a_i\pmod{m_i}$，所以代入 $x=\sum_{i=1}^na_iM_it_i$，原方程组成立。</p><p><strong>证毕。</strong></p><p>按照中国剩余定理，我们可以计算线性同余方程组的一个通解（最小解）。另外，我们可以用扩展欧几里得算法求解逆元。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,a[MAXN],m[MAXN];</span><br><span class="line">ll M,ans,summ[MAXN];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line">    ll w=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) w=w*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exgcd</span>(b,a%b,y,x);</span><br><span class="line">    y-=a/b*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">    M=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;m[i]&gt;&gt;a[i];</span><br><span class="line">        M*=m[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) summ[i]=M/m[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ll x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">exgcd</span>(summ[i],m[i],x,y);</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>) x+=m[i];</span><br><span class="line">        ans+=a[i]*summ[i]*x;</span><br><span class="line">        ans%=M;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-quad-扩展中国剩余定理"><a href="#4-2-quad-扩展中国剩余定理" class="headerlink" title="4.2$\quad$扩展中国剩余定理"></a>4.2$\quad$扩展中国剩余定理</h2><p>中国剩余定理只能处理模数两两互质的情况，无法处理普遍情况。我们可以使用扩展中国剩余定理进行推算。</p><p>对于每两个线性同余方程组 $x\equiv a_1\pmod {m_1}\;,\;x\equiv a_2\pmod{m_2}$，将其转化为不定方程 $x=pm_1+a_1=qm_2+a_2$，移项有 </p><script type="math/tex; mode=display">pm_1-qm_2=a_2-a_1</script><p>有裴蜀定理得，方程组有整数解当且仅当 $\gcd(m_1,m_2)|(a_2-a_1)$。这时我们就可以用扩展欧几里得算法得到一组可行解 $(p,q)$，则原来的两个方程可以合并为</p><script type="math/tex; mode=display">x\equiv m_1p+a_1\pmod{\text{lcm}(m_1,m_2)}</script><p>我们逐一进行合并即可求解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> __int128 ll;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    ll a,m;</span><br><span class="line">&#125;;</span><br><span class="line">queue&lt;node&gt; qu;</span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll&amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    ll d=<span class="built_in">exgcd</span>(b,a%b,x,y);</span><br><span class="line">    ll temp=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=temp-a/b*y;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">lcm</span><span class="params">(ll x,ll y,ll d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x/d*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        qu.<span class="built_in">push</span>(node&#123;b,a&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        node a,b;</span><br><span class="line">        a=qu.<span class="built_in">front</span>();qu.<span class="built_in">pop</span>();</span><br><span class="line">        b=qu.<span class="built_in">front</span>();qu.<span class="built_in">pop</span>();</span><br><span class="line">        ll k1,k2;</span><br><span class="line">        <span class="keyword">if</span>(a.a&gt;b.a) <span class="built_in">swap</span>(a,b);</span><br><span class="line">        ll c=b.a-a.a;</span><br><span class="line">        ll d=<span class="built_in">exgcd</span>(a.m,b.m,k1,k2);</span><br><span class="line">        k1*=c/d;</span><br><span class="line">        k2*=c/d;</span><br><span class="line">        ll q=b.m/d,p=a.m/d;</span><br><span class="line">        <span class="keyword">if</span>(k1&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            ll k=<span class="built_in">ceil</span>((<span class="number">1.0</span>-k1)/q);</span><br><span class="line">            k1+=k*q;</span><br><span class="line">            k2-=k*p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ll k=(k1<span class="number">-1</span>)/q;</span><br><span class="line">            k1-=k*q;</span><br><span class="line">            k2+=k*p;</span><br><span class="line">        &#125;</span><br><span class="line">        node now;</span><br><span class="line">        now.a=k1*a.m+a.a;</span><br><span class="line">        now.m=q*a.m;</span><br><span class="line">        now.a%=now.m;</span><br><span class="line">        qu.<span class="built_in">push</span>(now);</span><br><span class="line">    &#125;</span><br><span class="line">    node ans=qu.<span class="built_in">front</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,(<span class="type">long</span> <span class="type">long</span>)(ans.a%ans.m));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、高次同余方程与BSGS算法"><a href="#五、高次同余方程与BSGS算法" class="headerlink" title="五、高次同余方程与BSGS算法"></a>五、高次同余方程与BSGS算法</h1><h2 id="5-1-quad-BSGS算法"><a href="#5-1-quad-BSGS算法" class="headerlink" title="5.1$\quad$BSGS算法"></a>5.1$\quad$BSGS算法</h2><p>给定 $a,b,p$，已知 $a\perp p$，求解 $x$ 满足</p><script type="math/tex; mode=display">a^x\equiv b\pmod p</script><p>令 $x=A\left\lceil\sqrt p\right\rceil-B$，其中， $0\leq A,B\leq \left\lceil\sqrt p\right\rceil$，有 $a^{A\left\lceil\sqrt p\right\rceil-B}\equiv b\pmod p$，整理得</p><script type="math/tex; mode=display">a^{A\left\lceil\sqrt p\right\rceil}\equiv ba^B\pmod p</script><p>我们逐一枚举 $B$ 即可知道所有 $ba^B$。然后建立 <code>hash</code> 表，逐一计算 $a^{A\left\lceil\sqrt p\right\rceil}$，找到与之相等的 $ba^B$ 即可求出 $x=A\left\lceil\sqrt p\right\rceil-B$。</p><p>时间复杂度 $O(\sqrt p)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">BSGS</span><span class="params">()</span></span>&#123;</span><br><span class="line">    map&lt;ll,ll&gt; hash;</span><br><span class="line">    hash.<span class="built_in">clear</span>();</span><br><span class="line">    b%=p;</span><br><span class="line">    ll t=<span class="built_in">sqrt</span>(p)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">        ll val=b*<span class="built_in">qpow</span>(a,i,p)%p;</span><br><span class="line">        hash[val]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    a=<span class="built_in">qpow</span>(a,t,p);</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>) <span class="keyword">return</span> (b==<span class="number">0</span>?<span class="number">1</span>:<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=t;i++)&#123;</span><br><span class="line">        ll val=<span class="built_in">qpow</span>(a,i,p);</span><br><span class="line">        ll j=hash.<span class="built_in">find</span>(val)==hash.<span class="built_in">end</span>()?<span class="number">-1</span>:hash[val];</span><br><span class="line">        <span class="keyword">if</span>(j&gt;=<span class="number">0</span>&amp;&amp;i*t-j&gt;=<span class="number">0</span>) <span class="keyword">return</span> i*t-j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基环树</title>
      <link href="/post/e57ca2fa6cfe.html"/>
      <url>/post/e57ca2fa6cfe.html</url>
      
        <content type="html"><![CDATA[<p>基环树</p><h1 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h1><p>如果一张无向连通图包含恰好一个环，则称它是一棵<strong>基环树(Pseudotree)</strong>。</p><p>如果一张有向弱连通图每个点的入度都为 ，则称它是一棵 <strong>基环外向树</strong>。</p><p>如果一张有向弱连通图每个点的出度都为 ，则称它是一棵 <strong>基环内向树</strong>。</p><p>多棵树可以组成一个<strong>森林(Forest)</strong> ，多棵基环树可以组成<strong>基环森林(Pseudoforest)</strong> ，多棵基环外向树可以组成<strong>基环外向树森林</strong>，多棵基环内向树可以组成<strong>基环内向森林(Functional graph)</strong> 。</p><h1 id="二、算法实现"><a href="#二、算法实现" class="headerlink" title="二、算法实现"></a>二、算法实现</h1><p>在基环树中，有许多独一无二的性质，这也就成为<del>良心</del>出题人增加题目难度的一种措施。通常会结合<strong>树的直径</strong>进行考察。</p><p>下面就一些例题进行分析</p><p>下面以 <a href="https://www.luogu.com.cn/problem/P4381">[IOI2008] Island</a> 举例。</p><pre><code>题目大意：现有一个基环森林，求出森林中每颗基环树的直径的和。</code></pre><p>基环树直径，就是图中最长链的长度。因为基环树的一些特性，这也成为常考点。<br>显然，基环树的最长链可能有两种情况：</p><ul><li><p>在去掉“环”的某棵子树中。</p></li><li><p>经过“环”，其两端分别在去掉“环”上所有边之后的两颗不同子树中。</p></li></ul><p>我们可以先用一次dfs找出基环树中的“环”，把“环”上的节点做标记，并用数组 <code>ring[]</code> 记录。设环上的节点为 $s_1,s_2,\cdots,s_t$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span>&#123;<span class="comment">//用bool数组进行记录：true表示在环上；false表示不在环上</span></span><br><span class="line">    <span class="keyword">if</span>(temp[x]==<span class="number">1</span>)&#123;<span class="comment">//如果这个点被访问过，说明是环的衔接点，记录，停止深入搜索</span></span><br><span class="line">        temp[x]=<span class="number">2</span>;</span><br><span class="line">        ring[++cnt]=x;</span><br><span class="line">        c[x]=<span class="number">1</span>;<span class="comment">//标记这个点已访问</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp[x]=<span class="number">1</span>;<span class="comment">//标记这个点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=nxt[i])&#123;</span><br><span class="line">        <span class="type">int</span> y=to[i];</span><br><span class="line">        <span class="keyword">if</span>(i!=(last^<span class="number">1</span>)&amp;&amp;<span class="built_in">dfs</span>(y,i))&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp[x]!=<span class="number">2</span>)&#123;<span class="comment">//如果这个点不是环的衔接点</span></span><br><span class="line">                c[x]=<span class="number">1</span>;</span><br><span class="line">                ring[++cnt]=x;</span><br><span class="line">                s[cnt]=s[cnt<span class="number">-1</span>]+edge[i];<span class="comment">//前缀和记录（后面会提到）</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;<span class="comment">//如果这个点是环的衔接点</span></span><br><span class="line">                s[start<span class="number">-1</span>]=s[start]-edge[i];</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从每个 $s_i$ 出发，在不经过环上其他节点的前提下，再次执行dfs，即可访问去掉“环”之后以 $s_i$ 为根的子树。在这样的每棵子树中，按照求树的直径的方法进行树形DP并更新答案，即可处理第一种情况。同时，还可以计算出 $d[s_i]$，表示从节点 $s_i$ 出发走向以 $s_i$ 为根的子树，能够到达的最远节点距离。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tree_dp</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="comment">//树形DP</span></span><br><span class="line">    c[x]=<span class="number">1</span>;<span class="comment">//标记这个点已访问</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=nxt[i])&#123;</span><br><span class="line">        <span class="type">int</span> y=to[i];</span><br><span class="line">        <span class="keyword">if</span>(c[y]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">tree_dp</span>(y);</span><br><span class="line">        treeans=<span class="built_in">max</span>(treeans,d[x]+d[y]+edge[i]);</span><br><span class="line">        d[x]=<span class="built_in">max</span>(d[x],d[y]+edge[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，考虑第二种情况。这相当于找到环上两个不同的节点 $s_i,s_j$，使得 $d[s_i]+d[s_j]+dist(s_i,s_j)$ 最大。其中，$dist(s_i,s_j)$ 表示 $s_i,s_j$ 在环上的距离，有顺时针、逆时针两种走法，取较长的一种。可以将环断开成链再复制一倍，再用单调队列解决。（还可以用前缀和的方法快速求出，下面会提及）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">slove</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    start=cnt+<span class="number">1</span>;<span class="comment">//因为这是一张基环森林，所以要记录入点下标</span></span><br><span class="line">    ll ans_1=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(x,<span class="number">0</span>);<span class="comment">//找环上的点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;=cnt;i++)&#123;</span><br><span class="line">        treeans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">tree_dp</span>(ring[i]);<span class="comment">//对每一个树进行树形DP，找到树上直径</span></span><br><span class="line">        ans_1=<span class="built_in">max</span>(ans_1,treeans);<span class="comment">//记录最大直径</span></span><br><span class="line">    &#125;</span><br><span class="line">    ll ans_2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;=cnt;i++)&#123;<span class="comment">//复制环</span></span><br><span class="line">        dp[i+cnt-start+<span class="number">1</span>]=dp[i]=d[ring[i]];</span><br><span class="line">        s[i+cnt-start+<span class="number">1</span>]=s[i+cnt-start]+s[i]-s[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;=<span class="number">2</span>*cnt-start+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>()&amp;&amp;q.<span class="built_in">front</span>()&lt;=i-cnt+start<span class="number">-1</span>)&#123;<span class="comment">//优先队列，先清除不在区域范围内的点</span></span><br><span class="line">            q.<span class="built_in">pop_front</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q.<span class="built_in">size</span>())&#123;<span class="comment">//如果队列里还有点，进行记录</span></span><br><span class="line">            ans_2=<span class="built_in">max</span>(ans_2,dp[i]+dp[q.<span class="built_in">front</span>()]+s[i]-s[q.<span class="built_in">front</span>()]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>()&amp;&amp;dp[q.<span class="built_in">back</span>()]-s[q.<span class="built_in">back</span>()]&lt;=dp[i]-s[i])&#123;<span class="comment">//清除比这个点小的点</span></span><br><span class="line">            q.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        q.<span class="built_in">push_back</span>(i);<span class="comment">//插入</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(ans_1,ans_2);<span class="comment">//取最大值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要，可以打开<a href="https://www.luogu.com.cn/paste/867bnw9o">完整的代码</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧拉回路</title>
      <link href="/post/9b4a4404d6ab.html"/>
      <url>/post/9b4a4404d6ab.html</url>
      
        <content type="html"><![CDATA[<p>欧拉回路</p><blockquote><p>  2023.09 updated</p></blockquote><h1 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h1><p><strong>欧拉路径</strong>：从图中一个结点出发走出一条道路，每条边恰好经过一次的路径。</p><p><strong>欧拉回路</strong>：从图中任意一个顶点出发走出一条道路，每条边恰好经过一次，并最终回到起点。这样的路径称为“欧拉回路”。（类似于一笔画问题）</p><p><strong>欧拉图</strong>：具有欧拉回路的图。</p><p><strong>半欧拉图</strong>：具有欧拉路径但不具有欧拉回路的图</p><h1 id="二、算法实现"><a href="#二、算法实现" class="headerlink" title="二、算法实现"></a>二、算法实现</h1><p>对于求欧拉回路，我们可以分为两种情况解决：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/bv9xrrv9.png" alt=""></p><ul><li><p><strong>无向图</strong>的欧拉回路(图a、b)：对于无向图，只要是一个<strong>连通图</strong>并且每个点的度是<strong>偶数</strong>，那么这个图就能构成欧拉回路。</p></li><li><p><strong>有向图</strong>的欧拉回路(图c、d)：对于有向图，只要是一个<strong>连通图</strong>并且每个点的<strong>入度等于出度</strong>，那么这个图就能构成欧拉回路。</p></li></ul><p>对于求欧拉路径，我们也可以分为两种情况解决：</p><ul><li><p><strong>无向图</strong>的欧拉路径：对于无向图，只有是一个<strong>连通图</strong>，并且<strong>两个点的度为奇数</strong>，剩余为偶数是，那么这个图就能有欧拉路径。</p></li><li><p><strong>有向图</strong>的欧拉路径：对于有向图，只要是一个<strong>连通图</strong>，并且一<strong>个点的入度等于出度加一，一个点的入度等于出度减一</strong>，其余点入度等于出度时，这个图就有欧拉路径。</p></li></ul><p><strong>一个欧拉图一定有欧拉路径。</strong></p><h2 id="2-1-quad-无向图的欧拉路径"><a href="#2-1-quad-无向图的欧拉路径" class="headerlink" title="2.1 $\quad$ 无向图的欧拉路径"></a>2.1 $\quad$ 无向图的欧拉路径</h2><p>我们首先判断存在性：</p><ul><li>连通；</li><li>奇点个数为 $0$ 或 $2$。</li></ul><p>通常使用<strong>并查集</strong>判断连通性，或者走完所有边，判断是否走到了所有的边（这一步在算法流程中进行，否则会破坏时间复杂度）。</p><p>考虑如果存在奇点，则路径只能从奇点走若干边（顺序是随意的，不妨自己证明一下）再次到达另一个奇点。</p><p>我们找到奇点（或者不存在），然后按边进行 dfs，注意，每条边在欧拉路径中存在且仅存在一次，且顺序随意，所以我们必须标记使用过的边，以避免反复遍历所造成的时间复杂度破坏。我们使用栈记录走过的点，输出时从栈顶以此弹出。</p><p>时间复杂度 $O(m)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> &amp;i=head[u];i;i=nxt[i])&#123;<span class="comment">//使用链式前向星存图，注意i变量要取地址，以标记使用过的边，不会再次遍历。</span></span><br><span class="line"><span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> v=to[i];</span><br><span class="line">vis[i]=vis[i^<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">s[++top]=u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-quad-无向图的欧拉回路"><a href="#2-2-quad-无向图的欧拉回路" class="headerlink" title="2.2 $\quad$ 无向图的欧拉回路"></a>2.2 $\quad$ 无向图的欧拉回路</h2><p>和上面类似地，判断存在性：</p><ul><li>连通图；</li><li>均为偶点。</li></ul><p>随意找一个点开始遍历。注意：因为找的是欧拉回路，<strong>不必要访问或判断没有边相连的点的连通性</strong>。所以，严格地说，找一个有边相连的点开始遍历。</p><p>遍历的注意事项和 2.1 大致相同，注意避免重复遍历。唯一不同的是，因为是欧拉回路，会构成一个环，所以，不必要使用栈记录走过的点。当然，这样记录也没有问题。</p><p>时间复杂度 $O(m)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 1000005</span></span><br><span class="line"><span class="type">int</span> n,m,tot=<span class="number">1</span>,s[MAXN],top,du[MAXN];</span><br><span class="line"><span class="type">int</span> head[MAXN],nxt[MAXN&lt;&lt;<span class="number">1</span>],to[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">bool</span> vis[MAXN&lt;&lt;<span class="number">1</span>],viss[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> &amp;i=head[u];i;i=nxt[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> v=to[i];</span><br><span class="line">vis[i]=vis[i^<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">s[++top]=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">to[++tot]=y,nxt[tot]=head[x],head[x]=tot;</span><br><span class="line">to[++tot]=x,nxt[tot]=head[y],head[y]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="built_in">add</span>(x,y);</span><br><span class="line">du[x]++,du[y]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(du[i])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(top&lt;=m)&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(top) cout&lt;&lt;s[top--]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-quad-有向图的欧拉路径"><a href="#2-3-quad-有向图的欧拉路径" class="headerlink" title="2.3 $\quad$ 有向图的欧拉路径"></a>2.3 $\quad$ 有向图的欧拉路径</h2><p>我们首先判断存在性：</p><ul><li>连通；</li><li>如下两个条件满足其一：<ul><li>所有点入度等于出度；</li><li>“有且仅有一个点出度比入度大一”、“与有且仅有一个点出度比入度小一”两个条件同时成立。</li></ul></li></ul><p>如果满足条件1，随意找点开始遍历（同样抛弃孤立点）；如果满足条件2，找到“出度比入度大一”的点开始遍历，最后一定会回到“出度比入度小一”的点。</p><p>按边进行 dfs，详细内容与 2.1类似，可以用邻接表存图。</p><p>时间复杂度 $O(m)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=now[u];i&lt;g[u].<span class="built_in">size</span>();i=now[u])&#123;</span><br><span class="line"><span class="type">int</span> v=g[u][i];</span><br><span class="line">now[u]++;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">s[++top]=u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-quad-有向图的欧拉回路"><a href="#2-4-quad-有向图的欧拉回路" class="headerlink" title="2.4 $\quad$ 有向图的欧拉回路"></a>2.4 $\quad$ 有向图的欧拉回路</h2><p>首先判断存在性：</p><ul><li>连通；</li><li>每个点的入度等于出度。</li></ul><p>随便找一个非孤立点开始遍历，内容同上。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 1000005</span></span><br><span class="line"><span class="type">int</span> n,m,in[MAXN],out[MAXN],now[MAXN];</span><br><span class="line"><span class="type">int</span> s[MAXN],top;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=now[u];i&lt;g[u].<span class="built_in">size</span>();i=now[u])&#123;</span><br><span class="line"><span class="type">int</span> v=g[u][i];</span><br><span class="line">now[u]++;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">s[++top]=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">g[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">in[y]++;</span><br><span class="line">out[x]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> st=<span class="number">0</span>,numin=<span class="number">0</span>,numout=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(in[i]!=out[i])&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(numin&gt;<span class="number">1</span>||numout&gt;<span class="number">1</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(out[i])&#123;</span><br><span class="line">st=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(st);</span><br><span class="line"><span class="keyword">if</span>(top!=m+<span class="number">1</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(top)&#123;</span><br><span class="line">cout&lt;&lt;s[top--]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、样例练习"><a href="#三、样例练习" class="headerlink" title="三、样例练习"></a>三、样例练习</h1><ul><li><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1878">hdu 1878 欧拉回路</a>：</li></ul><p>一道模板题。主要知识点是欧拉回路，只需要求出是否含有欧拉回路，不需要求路径。<a href="https://www.luogu.com.cn/paste/pvhqvc2s">模板代码</a></p><ul><li><a href="https://www.luogu.com.cn/problem/UVA10054">UVA10054 The Necklace</a>：</li></ul><p>题解见<a href="https://www.luogu.com.cn/blog/liyunchen/solution-uva10054">我的博客</a></p><ul><li><a href="https://www.luogu.com.cn/problem/UVA10129">UVA10129 单词 Play on Words</a>（<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1116">hdu 1116 Play on Words</a>）：</li></ul><p>题解见<a href="https://www.luogu.com.cn/blog/liyunchen/solution-uva10129">我的博客</a></p><ul><li><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5883">hdu 5883 The Best Path</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P1341">P1341 无序字母对</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P3520">P3520 [POI2011]SMI-Garbage</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P2731">P2731 [USACO3.3]骑马修栅栏 Riding the Fences</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有向图的连通性</title>
      <link href="/post/f22be4884efb.html"/>
      <url>/post/f22be4884efb.html</url>
      
        <content type="html"><![CDATA[<p>有向图的连通性</p><h1 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h1><p><strong>强连通</strong>：在有向图 $G$ 中，如果两点 $u$ , $v$ 是互相可达的，则称 $u$ 和 $v$ 是<strong>强连通</strong>的。如果 $G$ 中的任意两个点都是互相可达的，那么 $G$ 就是<strong>强连通图</strong>。</p><p><strong>强连通分量</strong>：如果一个有向图 $G$ 不是强连通图，那么可以把它分成多个子图，其中每个子图的内部是强连通的，而且这些子图已经扩展到最大，不能与子图外的任一点强连通，像这样的一个“极大强连通”子图是$G$的一个<strong>强连通分量</strong>( $\text{Strongly Connected Component}$，$\text{SCC}$ ).</p><p>$Tarjan$算法能在一次DFS中吧所有点都按 $\text{SCC}$ 分开。这并不是不可思议的，它利用了 $\text{SCC}$ 的特点。</p><p><strong>定理：一个 $\text{SCC}$，从其中任何一个点出发。都至少有一条路径能绕回到自己。</strong></p><h1 id="二、算法实现"><a href="#二、算法实现" class="headerlink" title="二、算法实现"></a>二、算法实现</h1><p>在讲解之前，先了解$low$和$num$操作。</p><p>下面是一个例子，下图有三个 $\text{SCC}$，也就是$\{a,b,d,c\}$、$\{e\}$、$\{f\}$.</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/9nl2pcnf.png" alt=""></p><p>图1.a是原图。图1.b是对它做$DFS$，每个点左边的数字标记了$DFS$访问它的顺序，也就是$num[]$值，右边的划线数字是$low[]$值，即能返回到的最远的祖先。每个点的$low[]$初始值等于$num[]$，即连到自己。观察$c$的$low[]$值是如何更新的：它的初始值是$6$，然后有一个回退到$a$，所以更新为$1$；它的递归祖先$d$、$b$的$low[]$值也跟着更新为$1$。$e$和$f$的$low[]$值不能更新。</p><p>图1.b是从$a$开始$DFS$的，$a$成为{$a,b,d,c$}这个$SCC$的祖先.其实，从{$a,b,d,c$}中<strong>任意</strong>一个点开始$DFS$，这个点都会成为这个$SCC$的祖先。认识到这些，可以帮助我们理解后面的解释：可以用栈分离不同的$SCC$。</p><p>图1.b中的$low[]$值有$3$部分，即等于$1$的{$a,b,d,c$}、等于$4$的{$f$}、等于$5$的{$e$}。这就是$3$个$SCC$。</p><p>完成以上步骤，似乎已经就解决了问题。每个点都有了自己的$low[]$值，相同$low[]$值的点属于一个$SCC$。那么只要再对所有点做一个查询，按$low[]$值分开就行了，其复杂度是$O(V)$。</p><p>其实有更好的办法，即在$DFS$的同时把点按$SCC$（有相同的$low[]$值）分开。</p><p>以图2为例，其中有3个$SCC$，即$A$、$E$、$F$。假设从F中的一个点开始$DFS$，$DFS$过程可能会中途跳出$F$，转入$A$或者$E$，总之，最后会进入一个$SCC$。</p><ol><li><p>假设DFS过程是$F$-&gt;$E$-&gt;$A$，最后进入$A$。</p></li><li><p>在$A$这个$SCC$中将完成$A$内所有点的$DFS$过程，也就是说，最后的几步$DFS$会集中在A中的点$a$、$b$、$c$、$d$。这几个点会计算得到相同的$low[]$值，标记为一个$SCC$，这样就好了。</p></li><li><p>$DFS$递归从$A$回到$E$。并在E中完成$E$内部的$DFS$过程。</p></li><li><p>回到$F$，在$F$内完成递归过程。</p></li></ol><p>以上过程如何编程？那你可能想起来，$DFS$搜索是用递归实现的，而递归和栈这种数据结构在本质上是一致的。<strong>所以，可以用栈来帮助处理。</strong></p><ol><li><p>从$F$开始递归搜索，访问到的某些点进入栈；</p></li><li><p>$E$中的某些点进入栈；</p></li><li><p>在$DFS$的最底层，A的所有点将被访问到并进入栈，当前栈顶的几个元素就是$A$的点，标记为同一个$SCC$，并弹出栈；</p></li><li><p>$DFS$回到$E$，在$E$中完成所有点的搜索并且入栈，当前栈顶的元素就是$F$的点，标记为同一个$SCC$，并弹出栈；</p></li><li><p>回到$F$，完成$F$的所有点的搜索并且入栈，当前栈顶的几个元素就是$F$的点，标记为同一个$SCC$，并弹出栈、结束。</p></li></ol><p>为加深对上述过程中栈的理解，我们可以思考最先进入栈的点。每进入一个新的$SCC$，访问并进入栈的第一个点都是这个$SCC$的祖先，它的$num[]$值等于$low[]$值，这个$SCC$中所有点的$low[]$值都等于它。</p><h1 id="三、样例练习"><a href="#三、样例练习" class="headerlink" title="三、样例练习"></a>三、样例练习</h1><ul><li><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1269">hdu 1269 迷宫城堡</a>：</li></ul><p>一道模板题。<a href="https://www.luogu.com.cn/paste/6u1aax1d">代码</a></p><ul><li><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1827">hdu 1827 Summer Holiday</a>: Tarjan 缩点模板题。</p></li><li><p><a href="https://www.luogu.com.cn/problem/P3387">P3387 【模板】缩点</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P2341">P2341 [USACO03FALL][HAOI2006]受欢迎的牛 G</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P2863">P2863 [USACO06JAN]The Cow Prom S</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P2746">P2746 [USACO5.3]校园网Network of Schools</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P1407">P1407 [国家集训队]稳定婚姻</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P2194">P2194 HXY烧情侣</a></p></li><li><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3072">hdu 3072 Intelligence System</a>: Tarjan+贪心。</p></li><li><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3836">hdu 3836 Equivalent Sets</a></p></li><li><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3639">hdu 3639 Hawk-and-Chicken</a>: 强连通分量+缩点。</p></li><li><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3861">hdu 3861 The King’s Problem</a>： 最小路径覆盖。</p></li><li><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1530">hdu 1530 Maximum Clique</a>: 最大团简单题目。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/post/e5fab92033d0.html"/>
      <url>/post/e5fab92033d0.html</url>
      
        <content type="html"><![CDATA[<p>线段树</p><p>线段树，OI中重要的数据结构，用于维护区间信息，也可以辅助维护。线段树的性能比树状数组强（但是码量大），普遍复杂度在 $O(\log n)$ 左右。</p><h1 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h1><p>线段树是一种二叉树，也就是对于一个线段，我们会用一个二叉树来表示。比如说一个长度为4的线段，我们可以表示成这样：<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/dvvdl05x.png" alt=""></p><p>这是什么意思呢？ 如果你要表示线段的和，那么最上面的根节点的权值表示的是这个线段 $1\sim 4$ 的和。根的两个儿子分别表示这个线段中 $1\sim 2$ 的和，与 $3\sim 4$ 的和。以此类推。</p><p>然后我们还可以的到一个性质：节点i的权值=她的左儿子权值+她的右儿子权值。因为 $1\sim 4$ 的和就是等于 $1\sim 2$ 的和加上 $3\sim 4$ 的和。</p><p>根据这个思路，我们就可以建树了，我们设一个结构体 <code>tree</code>，<code>tree[i].l</code> 和 <code>tree[i].r</code> 分别表示这个点代表的线段的左右下标， <code>tree[i].sum</code> 表示这个节点表示的线段和。</p><p>我们知道，一颗二叉树，她的左儿子和右儿子编号分别是 $p\times2$ 和 $p\times2+1$。</p><p>再根据刚才的性质，得到式子：<code>tree[i].sum=tree[i*2].sum+tree[i*2+1].sum</code> 就可以建一颗线段树了！</p><p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="comment">//递归建树</span></span><br><span class="line">    tree[i].l=l;tree[i].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;<span class="comment">//如果这个节点是叶子节点</span></span><br><span class="line">        tree[i].sum=input[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(i*<span class="number">2</span>,l,mid);<span class="comment">//分别构造左子树和右子树</span></span><br><span class="line">    <span class="built_in">build</span>(i*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    tree[i].sum=tree[i*<span class="number">2</span>].sum+tree[i*<span class="number">2</span>+<span class="number">1</span>].sum;<span class="comment">//刚才我们发现的性质return ;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>嗯，这就是线段树的构建，你可能会问为什么要开好几倍的内存去储存一条线段。这是因为我们还没有让这个过大的数组干一些实事，那么什么是实事呢？让我们进入下一部（在你看懂这一部的情况下）</p><h1 id="二、简单的线段树"><a href="#二、简单的线段树" class="headerlink" title="二、简单的线段树"></a>二、简单的线段树</h1><h2 id="2-1-quad-单点修改，区间查询"><a href="#2-1-quad-单点修改，区间查询" class="headerlink" title="2.1$\quad$单点修改，区间查询"></a>2.1$\quad$单点修改，区间查询</h2><p>其实这一章开始才是真正的线段树，我们要用线段树干什么？答案是维护一个线段（或者区间），比如你想求出一个 $1\sim 100$ 区间中， $4\sim 67$ 这些元素的和，你会怎么做？朴素的做法是 <code>for(i=4;i&lt;=67;i++) sum+=a[i]</code>，这样固然好，但是算得太慢了。</p><p>我们想一种新的方法，先想一个比较好画图的数据，比如一个长度为4的区间，分别是1、2、3、4,我们想求出第 $1\sim 3$ 项的和。按照上一部说的，我们要建出一颗线段树，其中点权（也就是红色）表示和：<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/vf6zzggf.png" alt=""></p><p>然后我们要求 $1\sim 3$ 的和，我们先从根节点开始查询，发现她的左儿子 $1\sim 2$ 这个区间和答案区间 $1\sim 3$ 有交集，那么我们跑到左儿子这个区间。</p><p>然后，我们发现这个区间 $1\sim 2$ 被完全包括在答案区间 $1\sim 3$ 这个区间里面，那就把她的值3返回。</p><p>我们回到了 $1\sim 4$ 区间，发现她的右儿子 $3\sim 4$ 区间和答案区间 $1\sim 3$ 有交集，那么我们走到 $3\sim 4$ 区间</p><p>到了 $3\sim 4$ 区间，我们发现她并没有完全包含在答案区间 $1\sim 3$ 里面，但发现她的左儿子 $3\sim 3$ 区间和 $1\sim 3$ 区间又交集，那么久走到 $3\sim 3$ 区间</p><p>到了 $3\sim 3$ 区间，发现其被答案区间完全包含，就返回她的值3一直到最开始</p><p>$3\sim 32$ 区间的 $3+1\sim 2$ 区间的3=6，我们知道了 $1\sim 3$ 区间和为6。</p><p>我们总结一下，线段树的查询方法：</p><ol><li>如果这个区间被完全包括在目标区间里面，直接返回这个区间的值</li><li>如果这个区间的左儿子和目标区间有交集，那么搜索左儿子</li><li>如果这个区间的右儿子和目标区间有交集，那么搜索右儿子</li></ol><p>写成代码，就会变成这样：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">search</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].l&gt;=l &amp;&amp; tree[i].r&lt;=r)<span class="comment">//如果这个区间被完全包括在目标区间里面，直接返回这个区间的值</span></span><br><span class="line">        <span class="keyword">return</span> tree[i].sum;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].r&lt;l || tree[i].l&gt;r)  <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//如果这个区间和目标区间毫不相干，返回0</span></span><br><span class="line">    <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>].r&gt;=l)  s+=<span class="built_in">search</span>(i*<span class="number">2</span>,l,r);<span class="comment">//如果这个区间的左儿子和目标区间又交集，那么搜索左儿子</span></span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>+<span class="number">1</span>].l&lt;=r)  s+=<span class="built_in">search</span>(i*<span class="number">2</span>+<span class="number">1</span>,l,r);<span class="comment">//如果这个区间的右儿子和目标区间又交集，那么搜索右儿子</span></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>关于那几个if的条件一定要看清楚，最好背下来，以防考场上脑抽推错。</p><p>然后,我们怎么修改这个区间的单点，其实这个相对简单很多，你要把区间的第 <code>dis</code> 位加上 $k$。</p><p>那么你从根节点开始，看这个 <code>dis</code> 是在左儿子还是在右儿子，在哪往哪跑，</p><p>然后返回的时候，还是按照 <code>tree[i].sum=tree[i*2].sum+tree[i*2+1].sum</code> 的原则，更新所有路过的点。</p><p>如果不理解，我还是画个图吧，其中紫色是去的路径，粉色是返回的路径，回来时候红色的+标记就是把这个点加上这个值。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/n4ptxjmh.png" alt=""></p><p>把这个过程变成代码，就是这个样子：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> dis,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].l==tree[i].r)&#123;<span class="comment">//如果是叶子节点，那么说明找到了</span></span><br><span class="line">        tree[i].sum+=k;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dis&lt;=tree[i*<span class="number">2</span>].r)  <span class="built_in">add</span>(i*<span class="number">2</span>,dis,k);<span class="comment">//在哪往哪跑</span></span><br><span class="line">    <span class="keyword">else</span>  <span class="built_in">add</span>(i*<span class="number">2</span>+<span class="number">1</span>,dis,k);</span><br><span class="line">    tree[i].sum=tree[i*<span class="number">2</span>].sum+tree[i*<span class="number">2</span>+<span class="number">1</span>].sum;<span class="comment">//返回更新</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-2-quad-区间修改，单点查询"><a href="#2-2-quad-区间修改，单点查询" class="headerlink" title="2.2$\quad$区间修改，单点查询"></a>2.2$\quad$区间修改，单点查询</h2><p>区间修改和单点查询，我们的思路就变为：如果把这个区间加上 $k$，相当于把这个区间涂上一个 $k$ 的标记，然后单点查询的时候，就从上跑道下，把沿路的标记加起来就好。</p><p>这里面给区间贴标记的方式与上面的区间查找类似，原则还是那三条，只不过第一条：如果这个区间被完全包括在目标区间里面，直接返回这个区间的值变为了如果这个区间如果这个区间被完全包括在目标区间里面，讲这个区间标记 $k$。</p><p>具体做法很像，这里贴上代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].l&gt;=l &amp;&amp; tree[i].r&lt;=r)&#123;<span class="comment">//如果这个区间被完全包括在目标区间里面，讲这个区间标记k</span></span><br><span class="line">        tree[i].sum+=k;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>].r&gt;=l)</span><br><span class="line">        <span class="built_in">add</span>(i*<span class="number">2</span>,l,r,k);</span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>+<span class="number">1</span>].l&lt;=r)</span><br><span class="line">        <span class="built_in">add</span>(i*<span class="number">2</span>+<span class="number">1</span>,l,r,k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后就是单点查询了，这个更好理解了，就是 <code>dis</code> 在哪往哪跑，把路径上所有的标价加上就好了：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> dis)</span></span>&#123;</span><br><span class="line">    ans+=tree[i].num;<span class="comment">//一路加起来</span></span><br><span class="line">    <span class="keyword">if</span>(tree[i].l==tree[i].r)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(dis&lt;=tree[i*<span class="number">2</span>].r)</span><br><span class="line">        <span class="built_in">search</span>(i*<span class="number">2</span>,dis);</span><br><span class="line">    <span class="keyword">if</span>(dis&gt;=tree[i*<span class="number">2</span>+<span class="number">1</span>].l)</span><br><span class="line">        <span class="built_in">search</span>(i*<span class="number">2</span>+<span class="number">1</span>,dis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>不知不觉，这第二章已经结束。这样的简单（原谅我用这个词）线段树，还可除了求和，还可以求区间最小最大值，还可以区间染色。</p><p>但是！这样的线段树展现不出来她的魅力，因为区间求和，树状数组比她少了一个很大的常熟。二区间最值，ST的那神乎其技的$O(n)$查询也能完爆她。这是为什么？因为线段树的魅力还没有展现出来，她最美丽的地方：$\text{pushdown}$ 还未展现于世，如果你已经对这一章充足的了解，并且能不看博客把洛谷上树状数组模板1、2都能写出来，那么请你进入下一部。</p><h1 id="三、进阶线段树"><a href="#三、进阶线段树" class="headerlink" title="三、进阶线段树"></a>三、进阶线段树</h1><p>区间修改、区间查询，你可能会认为，把上一章里面的这两个模块加在一起就好了，然后你就会发现你大错特错。</p><p>因为如果对于1~4这个区间，你把1~3区间+1，相当于把节点1~2和3标记，但是如果你查询2~4时，你会发现你加的时没有标记的2节点和没有标记的3~4节点加上去，结果当然是错的。</p><p>那么我们应该怎么办？这时候 $\text{pushdown}$ 的作用就显现出来了。</p><p>你会想到，我们只需要在查询的时候，如果我们要查的2节点在1~2区间的里面，那我们就可以把1~2区间标记的那个+1给推下去这样就能顺利地加上了。<br>怎么记录这个标记呢？我们需要记录一个“懒标记” $\text{lazytage}$，来记录这个区间</p><p>区间修改的时候，我们按照如下原则：</p><ol><li>如果当前区间被完全覆盖在目标区间里，讲这个区间的 <code>sum+k*(tree[i].r-tree[i].l+1)</code></li><li>如果没有完全覆盖，则先下传懒标记</li><li>如果这个区间的左儿子和目标区间有交集，那么搜索左儿子</li><li><p>如果这个区间的右儿子和目标区间有交集，那么搜索右儿子</p><p>然后查询的时候，将这个懒标记下传就好了，下面图解一下：</p></li></ol><p>如图，区间1~4分别是1、2、3、4，我们要把1~3区间+1。因为1~2区间被完全覆盖，所以将其+2，并将紫色的 $\text{lazytage}+1$，3区间同理<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/xcs9o21v.png" alt=""></p><p>注意我们处理完这些以后，还是要按照 <code>tree[i].sum=tree[i*2].sum+tree[i*2+1].sum</code> 的原则返回，代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].r&lt;=r &amp;&amp; tree[i].l&gt;=l)<span class="comment">//如果当前区间被完全覆盖在目标区间里，讲这个区间的sum+k*(tree[i].r-tree[i].l+1)</span></span><br><span class="line">    &#123;</span><br><span class="line">        tree[i].sum+=k*(tree[i].r-tree[i].l+<span class="number">1</span>);</span><br><span class="line">        tree[i].lz+=k;<span class="comment">//记录lazytage</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_down</span>(i);<span class="comment">//向下传递</span></span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>].r&gt;=l)</span><br><span class="line">        <span class="built_in">add</span>(i*<span class="number">2</span>,l,r,k);</span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>+<span class="number">1</span>].l&lt;=r)</span><br><span class="line">        <span class="built_in">add</span>(i*<span class="number">2</span>+<span class="number">1</span>,l,r,k);</span><br><span class="line">    tree[i].sum=tree[i*<span class="number">2</span>].sum+tree[i*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中的 $\text{pushdown}$，就是把自己的 $\text{lazytage}$ 归零，并给自己的儿子加上，并让自己的儿子加上 $k\times(r-l+1)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].lz!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[i*<span class="number">2</span>].lz+=tree[i].lz;<span class="comment">//左右儿子分别加上父亲的lz</span></span><br><span class="line">        tree[i*<span class="number">2</span>+<span class="number">1</span>].lz+=tree[i].lz;</span><br><span class="line">        init mid=(tree[i].l+tree[i].r)/<span class="number">2</span>;</span><br><span class="line">        tree[i*<span class="number">2</span>].data+=tree[i].lz*(mid-tree[i*<span class="number">2</span>].l+<span class="number">1</span>);<span class="comment">//左右分别求和加起来</span></span><br><span class="line">        tree[i*<span class="number">2</span>+<span class="number">1</span>].data+=tree[i].lz*(tree[i*<span class="number">2</span>+<span class="number">1</span>].r-mid);</span><br><span class="line">        tree[i].lz=<span class="number">0</span>;<span class="comment">//父亲lz归零</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询的时候，和上一章的几乎一样，就是也要像修改一样加入 $\text{pushdown}$，这里用图模拟一下。我们要查询2~4区间的和，这是查询前的情况，所有紫色的代表 $\text{lazytage}$<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/ky84qvuc.png" alt=""></p><p>然后，我们查到区间1~2时，发现这个区间并没有被完全包括在目标区间里，于是我们就 $\text{pushdown}$，$\text{lazytage}$ 下传，并让每个区间 <code>sum</code> 加上 $(r-l)\text{lazytage}$。<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/rbaq35e6.png" alt=""></p><p>然后查到2~2区间，发现被完全包含，所以就返3，再搜索到3~4区间，发现被完全包含，那么直接返回8，最后3+8=11就是答案</p><p>这里是代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">search</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].l&gt;=l &amp;&amp; tree[i].r&lt;=r)</span><br><span class="line">        <span class="keyword">return</span> tree[i].sum;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].r&lt;l || tree[i].l&gt;r)  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">push_down</span>(i);</span><br><span class="line">    <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>].r&gt;=l)  s+=<span class="built_in">search</span>(i*<span class="number">2</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>+<span class="number">1</span>].l&lt;=r)  s+=<span class="built_in">search</span>(i*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，到了这里，我们就学会了用线段树进行区间加减操作，大家可以完成洛谷的线段树模板1</p><h1 id="四、乘法（根号）线段树"><a href="#四、乘法（根号）线段树" class="headerlink" title="四、乘法（根号）线段树"></a>四、乘法（根号）线段树</h1><h2 id="4-1-quad-乘法线段树"><a href="#4-1-quad-乘法线段树" class="headerlink" title="4.1$\quad$乘法线段树"></a>4.1$\quad$乘法线段树</h2><p>如果这个线段树只有乘法，那么直接加入 $\text{lazytage}$ 变成乘，然后 <code>tree[i].sum*=k</code> 就好了。但是，如果我们是又加又乘，那就不一样了。</p><p>当 $\text{lazytage}$ 下标传递的时候，我们需要考虑，是先加再乘还是先乘再加。我们只需要对 $\text{lazytage}$ 做这样一个处理。</p><p>$\text{lazytage}$分为两种，分别是加法的 <code>plz</code> 和乘法的 <code>mlz</code>。</p><p>$mlz$很简单处理，$pushdown$时直接$\times$父亲的就可以了，那么加法呢？</p><p>我们需要把原先的 <code>plz</code> 乘上父亲的 <code>mlz</code> 再加上父亲的 <code>plz</code>。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">long</span> <span class="type">long</span> i)</span></span>&#123;<span class="comment">//注意这种级别的数据一定要开long long</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> k1=tree[i].mlz,k2=tree[i].plz;</span><br><span class="line">    tree[i&lt;&lt;<span class="number">1</span>].sum=(tree[i&lt;&lt;<span class="number">1</span>].sum*k1+k2*(tree[i&lt;&lt;<span class="number">1</span>].r-tree[i&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>))%p;<span class="comment">//</span></span><br><span class="line">    tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum=(tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum*k1+k2*(tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>))%p;</span><br><span class="line">    tree[i&lt;&lt;<span class="number">1</span>].mlz=(tree[i&lt;&lt;<span class="number">1</span>].mlz*k1)%p;</span><br><span class="line">    tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mlz=(tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mlz*k1)%p;</span><br><span class="line">    tree[i&lt;&lt;<span class="number">1</span>].plz=(tree[i&lt;&lt;<span class="number">1</span>].plz*k1+k2)%p;</span><br><span class="line">    tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].plz=(tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].plz*k1+k2)%p;</span><br><span class="line">    tree[i].plz=<span class="number">0</span>;</span><br><span class="line">    tree[i].mlz=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后加法和减法的函数同理，维护 $\text{lazytage}$ 的时候加法标记一定要记得现乘再加。</p><p>值得一提的是，计算$\times$2时一定要改成 $i&lt;&lt;1$ 这样能解决很多时间。</p><h2 id="4-2-quad-根号线段树"><a href="#4-2-quad-根号线段树" class="headerlink" title="4.2$\quad$根号线段树"></a>4.2$\quad$根号线段树</h2><p>其实，根号线段树和除法线段树一样。她们乍眼一看感觉直接用 <code>lazytage</code> 标记除了多少，但是实际上，会出现精度问题。</p><p>C++的除法是向下取整，很明显，$\dfrac{a+b}{k}!=\dfrac{a}{k}+\dfrac{b}{k}$（在向下取整的情况下），而根号，很明显$\sqrt{a}+\sqrt{b}!=\sqrt{a+b}$ 那么怎么办？</p><p>第一个想法就是暴力，对于每个要改动的区间l~r,把里面的每个点都单独除，但这样就会把时间复杂度卡得比大暴力都慢（因为多个常数），所以怎么优化？</p><p>我们对于每个区间，维护她的最大值和最小值，然后每次修改时，如果这个区间的最大值根号和最小值的根号一样，说明这个区间整体根号不会产生误差，就直接修改（除法同理）</p><p>其中， <code>lazytage</code> 把除法当成减法，记录的是这个区间里每个元素减去的值。</p><p>下面是根号线段树的修改过程：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Sqrt</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].l&gt;=l &amp;&amp; tree[i].r&lt;=r &amp;&amp; (tree[i].minn-(<span class="type">long</span> <span class="type">long</span>)<span class="built_in">sqrt</span>(tree[i].minn))==(tree[i].maxx-(<span class="type">long</span> <span class="type">long</span>)<span class="built_in">sqrt</span>(tree[i].maxx)))&#123;<span class="comment">//如果这个区间的最大值最小值一样</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> u=tree[i].minn-(<span class="type">long</span> <span class="type">long</span>)<span class="built_in">sqrt</span>(tree[i].minn);<span class="comment">//计算区间中每个元素需要减去的</span></span><br><span class="line">        tree[i].lz+=u;</span><br><span class="line">        tree[i].sum-=(tree[i].r-tree[i].l+<span class="number">1</span>)*u;</span><br><span class="line">        tree[i].minn-=u;</span><br><span class="line">        tree[i].maxx-=u;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].r&lt;l || tree[i].l&gt;r)  <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">push_down</span>(i);</span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>].r&gt;=l)  <span class="built_in">Sqrt</span>(i*<span class="number">2</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>+<span class="number">1</span>].l&lt;=r)  <span class="built_in">Sqrt</span>(i*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">    tree[i].sum=tree[i*<span class="number">2</span>].sum+tree[i*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">    tree[i].minn=<span class="built_in">min</span>(tree[i*<span class="number">2</span>].minn,tree[i*<span class="number">2</span>+<span class="number">1</span>].minn);<span class="comment">//维护最大值和最小值</span></span><br><span class="line">    tree[i].maxx=<span class="built_in">max</span>(tree[i*<span class="number">2</span>].maxx,tree[i*<span class="number">2</span>+<span class="number">1</span>].maxx);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;&quot;i&quot;&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;tree[i].sum&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后 <code>pushdown</code> 没什么变化，就是要记得 <code>tree[i].minn$、$tree[i].maxx</code> 也要记得 <code>-lazytage</code>。</p><h1 id="五、样例练习"><a href="#五、样例练习" class="headerlink" title="五、样例练习"></a>五、样例练习</h1><ul><li><p><a href="https://www.luogu.com.cn/problem/P3374">P3374 树状数组模板1</a>：单点修改，区间查询</p></li><li><p><a href="https://www.luogu.com.cn/problem/P3368">P3368 树状数组模板2</a>：区间修改，单点查询</p></li><li><p><a href="https://www.luogu.com.cn/problem/P3372">P3372 线段树模板1</a>区间加法：</p></li><li><p><a href="https://www.luogu.com.cn/problem/P3373">P3373 线段树模板2</a>区间乘法：</p></li><li><p><a href="https://www.luogu.com.cn/problem/P4588">P4588 [TJOI2018]数学计算</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P1502">P1502 窗口的星星</a>：离散化</p></li><li><p><a href="https://www.luogu.com.cn/problem/P2471">P2471 [SCOI2007]降雨量</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P3722">P3722 [AH2017/HNOI2017]影魔</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P4198">P4198 楼房重建</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P4513">P4513 小白逛公园</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P4145">P4145 上帝造题的七分钟 2 / 花神游历各国</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P2023">P2023 [AHOI2009] 维护序列</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
