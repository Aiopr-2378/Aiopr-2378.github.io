<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>有上下界的网络流</title>
      <link href="/post/20e971a77f0b.html"/>
      <url>/post/20e971a77f0b.html</url>
      
        <content type="html"><![CDATA[<p>有上下界的网络流</p><h1 id="一无源汇上下界网络可行流">一、无源汇上下界网络可行流</h1><blockquote><p> <strong>无源汇上下界网络可行流</strong>  给定 <spanclass="math inline">\(n\)</span> 个点，<spanclass="math inline">\(m\)</span> 条边，每条边 <spanclass="math inline">\(e\)</span> 有一个流量下界 <spanclass="math inline">\(l_e\)</span> 和流量上界 <spanclass="math inline">\(r_e\)</span>，求一种可行方案使得在所有点满足流量平衡条件的前提下，所有边满足流量限制。</p></blockquote><p>这是一个判定。不同于一般的网络流，这个模型中没有源点与汇点，而且增加了每条边的流量限制<spanclass="math inline">\([l_e,r_e]\)</span>，而一般的网络流只有最大流量限制，可以视为特殊的上下界网络流（<spanclass="math inline">\(l_e=0\)</span>）。</p><p>首先考虑消除下界流量带来的影响。因为下界流量是必须流到的，不妨先强制流满下界流量。而这也带来了影响——这样操作之后每个点的初始含流量不再为<spanclass="math inline">\(0\)</span>，可以理解成，操作之后，每个节点多余若干流量或缺少若干流量，<strong>这是由于强制流满下界而未保证流量守恒导致的</strong>。</p><p>这样，记 <span class="math inline">\(left_i\)</span> 表示节点 <spanclass="math inline">\(i\)</span> 经过上述操作所剩余（用正表示） /缺少（用负表示）的流量，并建立超级源点 <spanclass="math inline">\(s\)</span> 与超级汇点 <spanclass="math inline">\(t\)</span>：</p><ul><li>若 <spanclass="math inline">\(left_i&gt;0\)</span>，即该节点流满下界时剩余 <spanclass="math inline">\(left_i\)</span> 单位流量，应多补给 <spanclass="math inline">\(left_i\)</span>单位流量才能保证流满边的下界并流量守恒，所以需要<strong>从源点 <spanclass="math inline">\(s\)</span> 向 <spanclass="math inline">\(i\)</span> 连流量为 <spanclass="math inline">\(left_i\)</span> 的边</strong>；</li><li>若 <spanclass="math inline">\(left_i&lt;0\)</span>，即该节点流满下界时缺少 <spanclass="math inline">\(left_i\)</span> 单位流量，应少供给 <spanclass="math inline">\(left_i\)</span>单位流量才能保证流满边的下界并流量守恒，所以需要<strong>从 <spanclass="math inline">\(i\)</span> 向汇点 <spanclass="math inline">\(t\)</span> 连流量为 <spanclass="math inline">\(-left_i\)</span> 的边</strong>。</li></ul><p>上面两个连边方式容易记混淆，务必深刻理解。</p><p>然后正常从超级源点 <span class="math inline">\(s\)</span> 到超级汇点<span class="math inline">\(t\)</span>跑网络流。<strong>网络有可行流当且仅当从超级源点流出的边均流满。</strong></p><p>下面是算法流程：</p><ol type="1"><li>强制流满每条边的下界 <spanclass="math inline">\(l_e\)</span>，并根据流量记录每个点应剩余 /缺少的流量值 <span class="math inline">\(left_i\)</span>。</li><li>建立超级源点 <span class="math inline">\(s\)</span> 与超级汇点 <spanclass="math inline">\(t\)</span>，按上述方式进行连边。</li><li>从 <span class="math inline">\(s\)</span> 到 <spanclass="math inline">\(t\)</span> 进行常规网络流算法。</li><li>检验网络流量是否与超级源点 <span class="math inline">\(s\)</span>的出边流量和相等，相等则有可行流，否则没有。</li></ol><p>模板题 <a href="https://loj.ac/p/115">LOJ #155.无源汇有上下界可行流</a>，参考代码如下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 50005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="type">int</span> n,m,lft[MAXN],s,t,total,ans,idx[MAXN];</span><br><span class="line"><span class="type">int</span> head[MAXN],to[MAXN],nxt[MAXN],edge[MAXN],tot=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> now[MAXN],dep[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v,l,r;</span><br><span class="line">&#125;a[MAXN];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    to[++tot]=y,edge[tot]=c,nxt[tot]=head[x],head[x]=tot;</span><br><span class="line">    to[++tot]=x,edge[tot]=<span class="number">0</span>,nxt[tot]=head[y],head[y]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="built_in">sizeof</span>(dep));</span><br><span class="line">    dep[s]=<span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    now[s]=head[s];</span><br><span class="line">    <span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">            <span class="type">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span>(edge[i]&amp;&amp;!dep[v])&#123;</span><br><span class="line">                dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">                now[v]=head[v];</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">                <span class="keyword">if</span>(v==t) flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t) <span class="keyword">return</span> flow;</span><br><span class="line">    <span class="type">int</span> rest=flow;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=now[u];i;i=nxt[i],now[u]=i)&#123;</span><br><span class="line">        <span class="type">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(edge[i]&amp;&amp;dep[v]==dep[u]+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="built_in">dinic</span>(v,<span class="built_in">min</span>(edge[i],rest));</span><br><span class="line">            <span class="keyword">if</span>(!k) dep[v]=<span class="number">0</span>;</span><br><span class="line">            edge[i]-=k;</span><br><span class="line">            edge[i^<span class="number">1</span>]+=k;</span><br><span class="line">            rest-=k;</span><br><span class="line">            <span class="keyword">if</span>(!rest) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow-rest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    s=n+<span class="number">1</span>,t=n+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i].u&gt;&gt;a[i].v&gt;&gt;a[i].l&gt;&gt;a[i].r;</span><br><span class="line">        lft[a[i].u]-=a[i].l;</span><br><span class="line">        lft[a[i].v]+=a[i].l;</span><br><span class="line">        idx[i]=tot+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">add</span>(a[i].u,a[i].v,a[i].r-a[i].l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(lft[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">add</span>(s,i,lft[i]);</span><br><span class="line">            total+=lft[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">add</span>(i,t,-lft[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> flow;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>())&#123;</span><br><span class="line">        <span class="keyword">while</span>(flow=<span class="built_in">dinic</span>(s,inf)) ans+=flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans==total)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) cout&lt;&lt;a[i].r-edge[idx[i]]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二有源汇上下界网络可行流">二、有源汇上下界网络可行流</h1><blockquote><p><strong>有源汇上下界网络可行流</strong>  给定 <spanclass="math inline">\(n\)</span> 个点，<spanclass="math inline">\(m\)</span> 条边，每条边 <spanclass="math inline">\(e\)</span> 有一个流量下界 <spanclass="math inline">\(l_e\)</span> 和流量上界 <spanclass="math inline">\(r_e\)</span>，给定源点 <spanclass="math inline">\(s\)</span> 和汇点 <spanclass="math inline">\(t\)</span>，求一种可行方案使得在所有点满足流量平衡条件的前提下，所有边满足流量限制。</p></blockquote><p>加入一条从汇点 <span class="math inline">\(t\)</span> 连向源点 <spanclass="math inline">\(s\)</span> 的流量上下界为 <spanclass="math inline">\([0,+\infty)\)</span>的边，转化成无源汇上下界网络可行流。之后新建超级源点 <spanclass="math inline">\(S\)</span> 与超级汇点 <spanclass="math inline">\(T\)</span>，按上节方式连边进行网络最大流算法进行判定即可。</p><p>另外，我们还可以根据残量网图中 <spanclass="math inline">\(t\rightarrow s\)</span>的边的剩余流量计算出网络可行流的大小。</p><h1 id="三有源汇上下界网络最大流">三、有源汇上下界网络最大流</h1><blockquote><p><strong>有源汇上下界网络最大流</strong>  给定 <spanclass="math inline">\(n\)</span> 个点，<spanclass="math inline">\(m\)</span> 条边，每条边 <spanclass="math inline">\(e\)</span> 有一个流量下界 <spanclass="math inline">\(l_e\)</span> 和流量上界 <spanclass="math inline">\(r_e\)</span>，给定源点 <spanclass="math inline">\(s\)</span> 和汇点 <spanclass="math inline">\(t\)</span>，求网络中的最大流，使得在所有点满足流量平衡条件的前提下，所有边满足流量限制。</p></blockquote><p>先进行有源汇上下界网络可行流算法，之后得到残量网图与可行流大小。删除额外建立的<span class="math inline">\(t\rightarrow s\)</span>边，重新在<strong>残量网图</strong>上以 <spanclass="math inline">\(s\)</span> 为源点，<spanclass="math inline">\(t\)</span> 为汇点进行最大流算法。</p><p>则网络中的最大流为可行流与残量网图最大流之和。</p><p>模板题 <a href="https://loj.ac/p/116">LOJ #116.有源汇有上下界最大流</a>，参考代码如下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 50005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="type">int</span> n,m,s,t,res[MAXN],ans;</span><br><span class="line"><span class="type">int</span> head[MAXN],nxt[MAXN],to[MAXN],edge[MAXN],tot=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> now[MAXN],d[MAXN];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y,l,r;</span><br><span class="line">&#125;e[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">    to[++tot]=y,edge[tot]=w,nxt[tot]=head[x],head[x]=tot;</span><br><span class="line">    to[++tot]=x,edge[tot]=<span class="number">0</span>,nxt[tot]=head[y],head[y]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="built_in">sizeof</span>(d));</span><br><span class="line">    d[s]=<span class="number">1</span>;</span><br><span class="line">    now[s]=head[s];</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">            <span class="type">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span>(edge[i]&amp;&amp;!d[v])&#123;</span><br><span class="line">                d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">                now[v]=head[v];</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">                <span class="keyword">if</span>(v==t) flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t) <span class="keyword">return</span> flow;</span><br><span class="line">    <span class="type">int</span> rest=flow;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=now[u];i;i=nxt[i],now[u]=i)&#123;</span><br><span class="line">        <span class="type">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(edge[i]&amp;&amp;d[v]==d[u]+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="built_in">dinic</span>(v,<span class="built_in">min</span>(edge[i],rest));</span><br><span class="line">            <span class="keyword">if</span>(!k) d[v]=<span class="number">0</span>;</span><br><span class="line">            edge[i]-=k;</span><br><span class="line">            edge[i^<span class="number">1</span>]+=k;</span><br><span class="line">            rest-=k;</span><br><span class="line">            <span class="keyword">if</span>(!rest) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow-rest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> s0,t0;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s0&gt;&gt;t0;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;e[i].x&gt;&gt;e[i].y&gt;&gt;e[i].l&gt;&gt;e[i].r;</span><br><span class="line">        res[e[i].x]-=e[i].l;</span><br><span class="line">        res[e[i].y]+=e[i].l;</span><br><span class="line">        <span class="built_in">add</span>(e[i].x,e[i].y,e[i].r-e[i].l);</span><br><span class="line">    &#125;</span><br><span class="line">    s=n+<span class="number">1</span>,t=n+<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(res[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">add</span>(s,i,res[i]);</span><br><span class="line">            num+=res[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">add</span>(i,t,-res[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">add</span>(t0,s0,inf);</span><br><span class="line">    <span class="type">int</span> flow,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>())&#123;</span><br><span class="line">        <span class="keyword">while</span>(flow=<span class="built_in">dinic</span>(s,inf)) cnt+=flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt!=num)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;please go home to sleep&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s=s0,t=t0;</span><br><span class="line">    ans=edge[tot];</span><br><span class="line">    edge[tot]=edge[tot<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>())&#123;</span><br><span class="line">        <span class="keyword">while</span>(flow=<span class="built_in">dinic</span>(s,inf)) ans+=flow;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四有源汇上下界网络最小流">四、有源汇上下界网络最小流</h1><blockquote><p><strong>有源汇上下界网络最小流</strong>  给定 <spanclass="math inline">\(n\)</span> 个点，<spanclass="math inline">\(m\)</span> 条边，每条边 <spanclass="math inline">\(e\)</span> 有一个流量下界 <spanclass="math inline">\(l_e\)</span> 和流量上界 <spanclass="math inline">\(r_e\)</span>，给定源点 <spanclass="math inline">\(s\)</span> 和汇点 <spanclass="math inline">\(t\)</span>，求网络中的最小流，使得在所有点满足流量平衡条件的前提下，所有边满足流量限制。</p></blockquote><p>与一般网络流不同，因为每条边添加了下界限制，所以网络最小流不一定为<span class="math inline">\(0\)</span>，另需算法计算。</p><p>这个算法与上节大致类似，唯一不同在于：在残量网图中，进行源点为 <spanclass="math inline">\(t\)</span>，汇点为 <spanclass="math inline">\(s\)</span>的最大流算法。答案就是可行流大小减去上述计算的最大流大小。</p><p>这个操作实际上是通过反向网络的最大值尽可能大地消去网络可行流，求出最小流。</p><p>模板题 <a href="https://loj.ac/p/117">LOJ #117.有源汇有上下界最小流</a>，参考代码如下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 500005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="type">int</span> n,m,s,t,res[MAXN],ans;</span><br><span class="line"><span class="type">int</span> head[MAXN],nxt[MAXN],to[MAXN],edge[MAXN],tot=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> now[MAXN],d[MAXN];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y,l,r;</span><br><span class="line">&#125;e[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">    to[++tot]=y,edge[tot]=w,nxt[tot]=head[x],head[x]=tot;</span><br><span class="line">    to[++tot]=x,edge[tot]=<span class="number">0</span>,nxt[tot]=head[y],head[y]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="built_in">sizeof</span>(d));</span><br><span class="line">    d[s]=<span class="number">1</span>;</span><br><span class="line">    now[s]=head[s];</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">            <span class="type">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span>(edge[i]&amp;&amp;!d[v])&#123;</span><br><span class="line">                d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">                now[v]=head[v];</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">                <span class="keyword">if</span>(v==t) flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> flow)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t) <span class="keyword">return</span> flow;</span><br><span class="line">    <span class="type">int</span> rest=flow;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=now[u];i;i=nxt[i],now[u]=i)&#123;</span><br><span class="line">        <span class="type">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(edge[i]&amp;&amp;d[v]==d[u]+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> k=<span class="built_in">dinic</span>(v,<span class="built_in">min</span>(edge[i],rest));</span><br><span class="line">            <span class="keyword">if</span>(!k) d[v]=<span class="number">0</span>;</span><br><span class="line">            edge[i]-=k;</span><br><span class="line">            edge[i^<span class="number">1</span>]+=k;</span><br><span class="line">            rest-=k;</span><br><span class="line">            <span class="keyword">if</span>(!rest) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow-rest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> s0,t0;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s0&gt;&gt;t0;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;e[i].x&gt;&gt;e[i].y&gt;&gt;e[i].l&gt;&gt;e[i].r;</span><br><span class="line">        res[e[i].x]-=e[i].l;</span><br><span class="line">        res[e[i].y]+=e[i].l;</span><br><span class="line">        <span class="built_in">add</span>(e[i].x,e[i].y,e[i].r-e[i].l);</span><br><span class="line">    &#125;</span><br><span class="line">    s=n+<span class="number">1</span>,t=n+<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(res[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">add</span>(s,i,res[i]);</span><br><span class="line">            num+=res[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">add</span>(i,t,-res[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">add</span>(t0,s0,inf);</span><br><span class="line">    <span class="type">int</span> flow,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>())&#123;</span><br><span class="line">        <span class="keyword">while</span>(flow=<span class="built_in">dinic</span>(s,inf)) cnt+=flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt!=num)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;please go home to sleep&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s=t0,t=s0;</span><br><span class="line">    ans=edge[tot];</span><br><span class="line">    edge[tot]=edge[tot<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>())&#123;</span><br><span class="line">        <span class="keyword">while</span>(flow=<span class="built_in">dinic</span>(s,inf)) ans-=flow;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1id="五无源汇上下界网络最小费用可行流">五、无源汇上下界网络最小费用可行流</h1><blockquote><p><strong>无源汇上下界网络最小费用可行流</strong>  给定 <spanclass="math inline">\(n\)</span> 个点，<spanclass="math inline">\(m\)</span> 条边，每条边 <spanclass="math inline">\(e\)</span> 有一个流量下界 <spanclass="math inline">\(l_e\)</span> 、流量上界 <spanclass="math inline">\(r_e\)</span>，和单位流量花费 <spanclass="math inline">\(c_e\)</span>，求一种花费最小的可行方案使得在所有点满足流量平衡条件的前提下，所有边满足流量限制。</p></blockquote><p>与无源汇上下界网络可行流算法类似。唯一不同点在于将最大流算法替换为费用流算法。</p><p>需要注意的是，与超级源点与超级汇点连的边的费用为 <spanclass="math inline">\(0\)</span>。</p>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多项式乘法与快速傅里叶变换(FFT)</title>
      <link href="/post/a12cc0ec4a59.html"/>
      <url>/post/a12cc0ec4a59.html</url>
      
        <content type="html"><![CDATA[<p>多项式乘法与快速傅里叶变换(FFT)</p><h1 id="一前置知识">一、前置知识</h1><p>本节介绍多项式前置知识、复数及单位根的相关内容。</p><h2 id="多项式">1.1   多项式</h2><p>设 <span class="math inline">\(A(x)\)</span> 为一个 <spanclass="math inline">\(n\)</span> 次多项式，则可以表示为 <spanclass="math display">\[A(x)=\sum\limits_{i=0}^n a_ix^i\]</span> 其中，<span class="math inline">\(a_i\)</span> 为多项式第<span class="math inline">\(i\)</span> 项的系数。</p><p>一个多项式在 <span class="math inline">\(x_0\)</span> 处的取值 <spanclass="math inline">\(A(x_0)\)</span> 为其在 <spanclass="math inline">\(x_0\)</span> 上的一个<strong>点值</strong>。</p><p>一个 <span class="math inline">\(n\)</span> 次多项式可以用 <spanclass="math inline">\(n+1\)</span> 个点值表示出来。由 <spanclass="math inline">\(n+1\)</span>个对应位置上的点值能<strong>唯一表示一个多项式</strong>。</p><p>形式化地，一个多项式可以由 <span class="math inline">\(n+1\)</span>个点 <span class="math inline">\((x_i,y_i)\)</span>唯一确定，其中，<span class="math inline">\(y_i=\sum\limits_{j=0}^na_jx_i^j\)</span>。</p><h2 id="复数">1.2   复数</h2><p>设 <span class="math inline">\(a,b\in \mathbf R\)</span>，令 <spanclass="math inline">\(i^2=-1\)</span>，称形如 <spanclass="math inline">\(a+bi\)</span>的数为<strong>复数</strong>。其中，称 <spanclass="math inline">\(a\)</span> 为复数的<strong>实部</strong>，<spanclass="math inline">\(b\)</span> 为复数的<strong>虚部</strong>。<spanclass="math inline">\(a=0\)</span> 的数称为<strong>纯虚数</strong>。</p><p>在二维平面中，用横坐标表示实部，用纵坐标表示虚部，这样的平面为<strong>复平面</strong>。在复平面中，对于复数<span class="math inline">\(a+bi\)</span>，令其坐标为 <spanclass="math inline">\((a,b)\)</span>，定义其<strong>模长</strong>为<spanclass="math inline">\(r=\sqrt{a^2+b^2}\)</span>，即该点到坐标原点的距离。称<span class="math inline">\(\theta\)</span> 表示该连线与 <spanclass="math inline">\(x\)</span>轴非负半轴的正夹角为<strong>辐角</strong>，不难发现，一个复数可以用有序数对<span class="math inline">\((\theta,r)\)</span> 唯一表示。</p><p>称圆心在原点，半径为 <span class="math inline">\(1\)</span>的圆为<strong>单位圆</strong>，则单位圆上的复数可以唯一表示为 <spanclass="math inline">\((\cos\theta,\sin\theta)\)</span>，其中 <spanclass="math inline">\(\theta\)</span> 为辐角。</p><p><strong>复数的加法</strong>   对于两个复数 <spanclass="math inline">\(x=a+bi\)</span> 与 <spanclass="math inline">\(y=c+di\)</span>，定义 <spanclass="math inline">\(x+y=(a+c)+(b+d)i\)</span>。</p><p><strong>复数的乘法</strong>   对于两个复数 <spanclass="math inline">\(x=a+bi\)</span> 与 <spanclass="math inline">\(y=c+di\)</span>，定义 <spanclass="math inline">\(xy=(a+bi)(c+di)=(ac-bd)+(bc+ad)i\)</span>。其几何意义为辐角相加，模长相乘。</p><p>在 C++ 中给出了复数的标准库 <code>&lt;complex&gt;</code>，通过声明<code>#include&lt;complex&gt;</code> 引入头文件，通过<code>complex&lt;_type&gt; a;</code> 声明一个实部虚部为<code>_type</code> 类型的复数。该元素分别有两个值，即<code>a=&#123;_real,_imag&#125;</code>。其中，<code>_real</code>值为该复数的<strong>实部</strong>，<code>_imag</code>值为复数的<strong>虚部</strong>。通过调用 <code>a.real()</code> 与<code>a.imag()</code> 分别访问该复数的实部与虚部。</p><h2 id="单位根">1.3   单位根</h2><p>对于是 <span class="math inline">\(2\)</span> 的正整数幂次的整数<span class="math inline">\(n\)</span>，记单位辐角为 <spanclass="math inline">\(\frac{2\pi} n\)</span>，定义 <spanclass="math inline">\(\omega_n^k\)</span> 表示一个模长为 <spanclass="math inline">\(1\)</span>，辐角为 <spanclass="math inline">\(\frac{2k\pi}n\)</span> 的复数，其坐标为 <spanclass="math inline">\((\cos\frac{2k\pi}n,\sin\frac{2k\pi}n)\)</span>​。</p><p>单位根有以下性质：</p><ul><li><spanclass="math inline">\(\omega_{n}^{k}=\cos\frac{2k\pi}n+i\sin\frac{2k\pi}n\)</span>。根据定义可知。</li><li><spanclass="math inline">\(\omega_{n}^{k+n}=\omega_{n}^{k}\)</span>。相当于辐角多转<spanclass="math inline">\(2\pi\)</span>，根据诱导公式可知三角函数值相等。</li><li><spanclass="math inline">\(\omega_{2n}^{2k}=\omega_{n}^{k}\)</span>。根据定义可知。</li><li><span class="math inline">\(\omega_{n}^{k+\fracn2}=-\omega_{n}^{k}\)</span>，相当于辐角多转 <spanclass="math inline">\(\pi\)</span>​，根据诱导公式可知三角函数值为相反数。</li><li><spanclass="math inline">\((\omega_{n}^{k})^m=\omega_{n}^{mk}\)</span>，可以由复数乘法的几何意义推得。</li></ul><h1 id="二快速傅里叶变换fft">二、快速傅里叶变换(FFT)</h1><p><strong>接下来只讨论多项式项数 <span class="math inline">\(n\)</span>为 <span class="math inline">\(2\)</span>的正整数幂次的多项式函数。</strong></p><p>对于 <span class="math inline">\(n\)</span> 项多项式函数 <spanclass="math inline">\(A(x)=\sum\limits_{i=0}^{n-1}a_ix^i\)</span>，定义向量 <spanclass="math inline">\((a_0,a_1,\cdots,a_{n-1})\)</span>为其系数。按照每项次数进行奇偶分类，有 <span class="math display">\[A(x)=(a_0+a_2x^2+a_4x^4+\cdots+a_{n-2}x^{n-2})+x(a_1+a_3x^3+\cdots+a_{n-1}x^{n-1})\]</span> 分别定义 <span class="math display">\[\begin{aligned}A_1(x)&amp;=a_0+a_2x+a_4x^2+\cdots+a_{n-2}x^{\frac n 2 -1} \\A_2(x)&amp;=a_1+a_3x+a_5x^2+\cdots+a_{n-1}x^{\frac n 2 -1}\end{aligned}\]</span> 不难有 <span class="math display">\[A(x)=A_1(x^2)+xA_2(x^2)\]</span> 分别求其在 <span class="math inline">\(\omega_{n}^{k}(0\le k&lt;\frac n2)\)</span> 上的点值，有 <span class="math display">\[\begin{aligned}A(\omega_{n}^{k})&amp;=A_1(\omega_{n}^{2k})+\omega_{n}^{k}A_2(\omega_{n}^{2k})\\&amp;=A_1(\omega_{n/2}^{k})+\omega_{n}^{k}A_2(\omega_{n/2}^{k})\end{aligned}\tag 1\]</span> 与 <span class="math display">\[\begin{aligned}A(\omega_{n}^{k+n/2})&amp;=A_1(\omega_{n}^{2k+n})+\omega_{n}^{k+n/2}A_2(\omega_{n}^{2k+n})\\&amp;=A_1(\omega_{n/2}^{k})-\omega_{n}^{k}A_2(\omega_{n/2}^{k})\end{aligned}\tag 2\]</span> 发现上两式的形式类似，而我们将问题从 <spanclass="math inline">\(n\)</span> 的范围递归地划分到 <spanclass="math inline">\(\frac n 2\)</span> 的范围内。这帮助我们在 <spanclass="math inline">\(O(n\log n)\)</span> 的时间复杂度内求出 <spanclass="math inline">\(n\)</span> 个点的点值，这 <spanclass="math inline">\(n\)</span> 个点为 <spanclass="math inline">\(\omega_{n-1}^{0}\sim\omega_{n-1}^{n-1}\)</span>。</p><p>上述过程称为<strong>快速傅里叶变换</strong>。</p><p>这时候我们已经可以通过递归的办法实现，但由于递归实现常数较大，下面介绍迭代实现的办法。</p><p>因为每一次递归都要奇偶分组，下图展示的原始系数数列下标与分组后的序列下标的关系。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=TZWVkjBu" alt="1101696-20180212074250859-1560811086.png" style="zoom: 80%;" /></p><p>发现后序列的二进制表示是原序列的二进制表示的反串（高低位颠倒）。我们可以按照这个性质对系数数列重新排序后迭代地计算。</p><p>即 <span class="math inline">\(trans_i\)</span> 表示后序列第 <spanclass="math inline">\(i\)</span> 个位置上对应的原序列下标，可以通过<span class="math inline">\(trans_i=trans_{\lfloor n/2\rfloor}\times2+(i\bmod 2)^{n-1}\)</span> 得到。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typedef complex&lt;double&gt; cd;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FFT</span><span class="params">(cd *a)</span></span>&#123; <span class="comment">// a为多项式的系数向量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;i++) <span class="keyword">if</span>(i&lt;trans[i]) <span class="built_in">swap</span>(a[i],a[trans[i]]); <span class="comment">//下标置换</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;lim;k&lt;&lt;=<span class="number">1</span>)&#123; <span class="comment">//枚举段长，合并两个 n&#x27;=k 的区间</span></span><br><span class="line">        cd e=&#123;<span class="built_in">cos</span>(pi/k),<span class="built_in">sin</span>(pi/k)&#125;; <span class="comment">//定义单位根</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;i+=k*<span class="number">2</span>)&#123;</span><br><span class="line">            cd w=&#123;<span class="number">1</span>,<span class="number">0</span>&#125;; <span class="comment">//当前的复数幂</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">                cd x=a[i+j],y=w*a[i+j+k];</span><br><span class="line">                a[i+j]=x+y;</span><br><span class="line">                a[i+j+k]=x-y;</span><br><span class="line">                w*=e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三快速傅里叶逆变换ifft">三、快速傅里叶逆变换(IFFT)</h1><p>对于多项式 <spanclass="math inline">\(A(x)=\sum\limits_{i=0}^{n-1}a_ix^i\)</span>，其中<span class="math inline">\((a_0,a_1,\cdots,a_{n-1})\)</span>为其系数向量。对其进行快速傅里叶变换后得到 <spanclass="math inline">\((y_0,y_1,y_2,\cdots,y_{n-1})\)</span>，称为其 FFT向量。通过 FFT向量反解出系数向量的过程是<strong>快速傅里叶逆变换(IFFT)</strong>。</p><p>考虑多项式 <spanclass="math inline">\(B(x)=\sum\limits_{i=0}^{n-1}y_ix^i\)</span>，即系数为FFT 向量的新多项式。对于其在 <spanclass="math inline">\(\omega_{n}^{-k}\)</span> 处的点值 <spanclass="math display">\[c_k=\sum\limits_{i=0}^{n-1}y_i(\omega_{n}^{-k})^i\]</span> 我们试图找到 <span class="math inline">\(c_k\)</span> 与 <spanclass="math inline">\(a_k\)</span> 之间的关系，则可反解出 <spanclass="math inline">\(a_k\)</span>。对上面式子进行求解： <spanclass="math display">\[\begin{aligned}c_k&amp;=\sum_{i=0}^{n-1}y_i\left(\omega_{n}^{-k} \right)^i \\&amp;=\sum_{i=0}^{n-1}\left(\sum_{j=0}^{n-1}a_j(\omega_{n}^{i})^j\right)\left(\omega_{n}^{-k} \right)^i \\&amp;=\sum_{i=0}^{n-1}\sum_{j=0}^{n-1}a_j\left(\omega_{n}^{j}\right)^i\left(\omega_{n}^{-k} \right)^i \\&amp;=\sum_{i=0}^{n-1}\sum_{j=0}^{n-1}a_j\left(\omega_{n}^{j-k}\right)^i \\&amp;=\sum_{j=0}^{n-1}a_j\left(\sum_{i=0}^{n-1}\left(\omega_{n}^{j-k}\right)^i \right)\end{aligned}\tag 3\]</span> 令 <spanclass="math inline">\(S(x)=\sum\limits_{i=0}^{n-1}x^i\)</span>，有 <spanclass="math display">\[\begin{aligned}S(\omega_{n}^{k})&amp;=1+\omega_{n}^{k}+(\omega_{n}^{k})^2+\cdots+(\omega_{n}^{k})^{n-1}\\\omega_{n}^{k}S(\omega_{n}^{k})&amp;=\omega_{n}^{k}+(\omega_{n}^{k})^2+(\omega_{n}^{k})^2+\cdots+(\omega_{n}^{k})^n\end{aligned}\]</span> 两式相减得到 <span class="math display">\[S(\omega_{n}^{k})=\dfrac{(\omega_{n}^{k})^n-1}{\omega_{n}^{k}-1}=\dfrac{1-1}{\omega_{n}^{k}-1}\]</span> 当 <spanclass="math inline">\(\omega_{n}^{k}\not=1\)</span>，即 <spanclass="math inline">\(k\not=0\)</span> 时，<spanclass="math inline">\(S(\omega_{n}^{k})=0\)</span>；</p><p>当 <span class="math inline">\(\omega_{n}^{k}=1\)</span>，即 <spanclass="math inline">\(k=0\)</span> 时，根据定义有 <spanclass="math inline">\(S(\omega_{n}^{k})=n\)</span>。</p><p>对于 <span class="math inline">\((3)\)</span> 式，用 <spanclass="math inline">\(S(\omega_{n}^{j-k})\)</span> 表示 <spanclass="math inline">\(\sum\limits_{i=0}^{n-1}(\omega_{n}^{j-k})^i\)</span>，因为其在<span class="math inline">\(\omega_{n}^{0}\)</span> 处才有值，所以 <spanclass="math display">\[\begin{aligned}c_k&amp;=\sum_{j=0}^{n-1}a_jS(\omega_{n}^{j-k}) \\&amp;=na_k\end{aligned}\]</span> 即 <span class="math display">\[a_k=\dfrac {c_k} n\tag 4\]</span> 这样，我们再次利用 FFT 求出多项式 <spanclass="math inline">\(B(x)\)</span> 在 <spanclass="math inline">\(\omega_{n}^{-k}\)</span> 上的点值 <spanclass="math inline">\(c_k\)</span>，可以反解出 <spanclass="math inline">\(a_k\)</span>，时间复杂度 <spanclass="math inline">\(O(n\log n)\)</span>。</p><p>不难发现 IFFT 与 FFT 有许多相同之处，并且需要利用 FFT 求出点值 <spanclass="math inline">\(c_k\)</span>，于是求解 IFFT 的时候直接更改 <spanclass="math inline">\(\omega_{n}^{k}\)</span> 为 <spanclass="math inline">\(\omega_{n}^{-k}\)</span> 即可利用 FFT 求解出 <spanclass="math inline">\(c_k\)</span>，再除以 <spanclass="math inline">\(n\)</span> 得到 <spanclass="math inline">\(a_k\)</span>。</p><h1 id="四多项式乘法">四、多项式乘法</h1><p>对于两个多项式 <span class="math inline">\(A(x)=\sum\limits_{i=0}^na_ix^i\)</span> 和 <span class="math inline">\(B(x)=\sum\limits_{i=0}^mb_ix^i\)</span>，定义<strong>多项式乘法</strong> <spanclass="math inline">\(C(x)=A(x)\times B(x)\)</span> 为 <spanclass="math display">\[c_{i}=\sum_{j=0}^{i}a_jb_{i-j}\]</span> 其中 <span class="math inline">\(c_i\)</span> 为多项式 <spanclass="math inline">\(C(x)\)</span> 的第 <spanclass="math inline">\(i\)</span> 项系数。所得的多项式 <spanclass="math inline">\(C(x)\)</span> 是一个 <spanclass="math inline">\(n+m\)</span> 次多项式，共有 <spanclass="math inline">\(n+m+1\)</span> 项。</p><p>朴素的多项式乘法时间复杂度为 <spanclass="math inline">\(O(n^2)\)</span> 级别，利用 FFT 可以在 <spanclass="math inline">\(O(n\log n)\)</span>的复杂度内求解，大致思路如下图所示。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=QFtPBYKS" /></p><p>算法流程如下：</p><ol type="1"><li>分别对 <span class="math inline">\(A(x),B(x)\)</span> 多项式求出其在<span class="math inline">\(\omega_{n}^{k}\)</span> 处的点值，利用 FFT做到时间复杂度 <span class="math inline">\(O(n\log n)\)</span>；</li><li>每个位置上的点值对应相乘，所得点值就是多项式 <spanclass="math inline">\(C(x)\)</span> 在对应位置上的点值；</li><li>根据点值利用 IFFT 反解出 <spanclass="math inline">\(c_k\)</span>，时间复杂度 <spanclass="math inline">\(O(n\log n)\)</span>。</li></ol><p>关键点在于将系数表示转换为点值表示，这样在对应位置上的点值只与当前位置有关，做到了位置分离，进而便于求解。</p><p>需要注意的是，在求解 FFT 与 IFFT 中，多项式项数 <spanclass="math inline">\(n\)</span> 需要是 <spanclass="math inline">\(2\)</span>的<strong>正整数次幂</strong>，这要求我们在计算的时候需要将下标上届扩展到大于<span class="math inline">\(n+m\)</span> 的 <spanclass="math inline">\(2\)</span> 的幂次。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Luogu P3803 【模板】多项式乘法（FFT）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 4000005</span></span><br><span class="line"><span class="keyword">typedef</span> complex&lt;<span class="type">double</span>&gt; cd;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.</span>);</span><br><span class="line"><span class="type">int</span> n,m,lim,trans[MAXN];</span><br><span class="line">cd a[MAXN],b[MAXN],c[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FFT</span><span class="params">(cd *a,<span class="type">int</span> op)</span></span>&#123; <span class="comment">//通过添加系数 op 将 FFT 与 IFFT 的前半部分合二为一</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;i++) <span class="keyword">if</span>(i&lt;trans[i]) <span class="built_in">swap</span>(a[i],a[trans[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;lim;k&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        cd e=&#123;<span class="built_in">cos</span>(pi/k),<span class="built_in">sin</span>(pi/k)*op&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;i+=k*<span class="number">2</span>)&#123;</span><br><span class="line">            cd w=&#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">                cd x=a[i+j],y=w*a[i+j+k];</span><br><span class="line">                a[i+j]=x+y;</span><br><span class="line">                a[i+j+k]=x-y;</span><br><span class="line">                w*=e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> w=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)) ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;</span><br><span class="line">        w=w*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=m;i++) cin&gt;&gt;b[i];</span><br><span class="line">    <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">    lim=<span class="number">1</span>;<span class="keyword">while</span>(lim&lt;=n+m) lim&lt;&lt;=<span class="number">1</span>,len++; <span class="comment">//扩展 lim 到 2 的幂次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;i++) trans[i]=((trans[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(len<span class="number">-1</span>)));</span><br><span class="line">    <span class="built_in">FFT</span>(a,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">FFT</span>(b,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;i++) c[i]=a[i]*b[i];</span><br><span class="line">    <span class="built_in">FFT</span>(c,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;i++) c[i]/=lim; <span class="comment">// IFFT 的最后一步</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n+m;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,<span class="built_in">int</span>(c[i].<span class="built_in">real</span>()+<span class="number">0.5</span>)); <span class="comment">// 避免精度误差</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三角恒等变换</title>
      <link href="/post/b58f72002ca0.html"/>
      <url>/post/b58f72002ca0.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>微积分学习笔记 - 05 三角恒等变换</p><p>进入 <ahref="/categories/微积分学习笔记/">传送门</a>，阅读刊载在专栏《微积分学习笔记》下的全部文章。</p></blockquote><h1 id="九三角恒等变换">九、三角恒等变换</h1><p>本节作为数学基础，为后面章节做铺垫且<strong>与微积分暂时无关</strong>。三角公式只涉及三个三角函数<span class="math inline">\(\sin,\cos,\tan\)</span>，剩余三个三角函数<span class="math inline">\(\cot,\sec,\csc\)</span>的公式可自行扩展，因不常用而略去。</p><p>本节公式大多为高一内容，稍作补充完善。基本公式不作证明，拓展内容部分有公式证明。</p><h2 id="和角公式">9.1   和角公式</h2><p>下面给出三角函数的和角公式。</p><p><strong>和角公式</strong>   给定两角 <spanclass="math inline">\(A,B\)</span>，则有： <span class="math display">\[\begin{aligned}\sin(A+B)&amp;=\sin(A)\cos(B)+\cos(A)\sin(B)\\\cos(A+B)&amp;=\cos(A)\cos(B)-\sin(A)\sin(B)\\\tan(A+B)&amp;=\dfrac{\tan(A)+\tan(B)}{1-\tan(A)\tan(B)}\end{aligned}\]</span></p><h2 id="差角公式">9.2   差角公式</h2><p>下面给出三角函数的差角公式。</p><p><strong>差角公式</strong>   给定两角 <spanclass="math inline">\(A,B\)</span>，则有： <span class="math display">\[\begin{aligned}\sin(A-B)&amp;=\sin(A)\cos(B)-\cos(A)\sin(B)\\\cos(A-B)&amp;=\cos(A)\cos(B)+\sin(A)\sin(B)\\\tan(A-B)&amp;=\dfrac{\tan(A)-\tan(B)}{1+\tan(A)\tan(B)}\end{aligned}\]</span></p><h2 id="倍角公式">9.3   倍角公式</h2><p>下面给出三角函数的倍角公式。</p><p><strong>倍角公式</strong>   给定角 <spanclass="math inline">\(A\)</span>，则有： <span class="math display">\[\begin{aligned}\sin(2A)&amp;=2\sin(A)\cos(A) \\\cos(2A)&amp;=\cos^2(A)-\sin^2(A)=2\cos^2(A)-1=1-2\sin^2(A) \\\tan(2A)&amp;=\dfrac{2\tan(A)}{1-\tan^2(A)}\end{aligned}\]</span> 上述公式可直接由和角公式推得。</p><h2 id="降幂公式">9.4   降幂公式</h2><p>下面给出三角函数的降幂公式。</p><p><strong>降幂公式</strong>   给定角 <spanclass="math inline">\(A\)</span>，则有： <span class="math display">\[\begin{aligned}    \sin(A)\cos(A)&amp;=\dfrac12\sin(2A)\\    \sin^2(A)&amp;=\dfrac{1-\cos(2A)}{2} \\    \cos^2(A)&amp;=\dfrac{1+\cos(2A)}{2}\end{aligned}\]</span> 降幂公式由正弦函数和余弦函数的倍角公式推得。</p><h2 id="辅助角公式">9.5   辅助角公式</h2><p>下面给出三角函数的辅助角公式。</p><p><strong>辅助角公式</strong>   给定角 <spanclass="math inline">\(\alpha\)</span>，实数 <spanclass="math inline">\(a,b\)</span> 为常数，则有： <spanclass="math display">\[a\sin\alpha+b\cos\alpha=\sqrt{a^2+b^2}\sin(\alpha+\varphi)\]</span> 其中，<span class="math inline">\(\tan\varphi=\dfrac ba\)</span>。</p><blockquote><p><strong>证明</strong>   将原式进行如下变形： <spanclass="math display">\[  \begin{aligned}  a\sin\alpha+b\cos\alpha&amp;=\sqrt{a^2+b^2}(\sin\alpha\cdot\dfrac{a}{\sqrt{a^2+b^2}}+\cos\alpha\cdot\dfrac{b}{\sqrt{a^2+b^2}})\\  &amp;=\sqrt{a^2+b^2}(\sin \alpha \cdot \cos \varphi+\cos\alpha\cdot\sin\varphi) \\  &amp;=\sqrt{a^2+b^2}\sin(\alpha+\varphi)  \end{aligned}  \]</span> 其中 <span class="math inline">\(\varphi\)</span> 满足 <spanclass="math inline">\(\tan\varphi=\dfrac ba,\varphi\in[-\pi,\pi)\)</span>。</p><p><strong>证毕。</strong></p></blockquote><h2 id="万能公式">9.6   万能公式</h2><p>下面给出三角函数万能公式，<del>很遗憾没有找到更加文雅一点的名字</del>。</p><p><strong>万能公式</strong>   给定角 <spanclass="math inline">\(\alpha\)</span>，记 <spanclass="math inline">\(t=\tan \dfrac{\alpha}2\)</span>，则有： <spanclass="math display">\[\begin{aligned}\sin\alpha &amp;=\dfrac{2t}{1+t^2}\\\cos\alpha &amp;=\dfrac{1-t^2}{1+t^2}\\\tan\alpha &amp;=\dfrac{2t}{1-t^2}\end{aligned}\]</span></p><blockquote><p><strong>证明</strong>   令 <span class="math inline">\(t=\tan \dfrac\alpha 2\)</span>，则根据二倍角公式有 <span class="math display">\[  \tan \alpha = \dfrac{2\tan \dfrac \alpha 2}{1-\tan ^2 \dfrac \alpha2}=\dfrac {2t}{1-t^2}  \]</span> 根据三角函数几何意义，令一点坐标为 <spanclass="math inline">\((1-t^2,2t)\)</span>，则该点到原点的距离 <spanclass="math inline">\(r=1+t^2\)</span>，显然有 <spanclass="math display">\[  \sin \alpha =\dfrac{2t}{1+t^2}\quad ,\quad \cos \alpha=\dfrac{1-t^2}{1+t^2}  \]</span> <strong>证毕</strong>。</p></blockquote><h2 id="和差化积公式">9.7   和差化积公式</h2><p>下面给出三角函数的和差化积公式。</p><p><strong>和差化积公式</strong>   给定角 <spanclass="math inline">\(\alpha\)</span> 与 <spanclass="math inline">\(\beta\)</span>，则有： <spanclass="math display">\[\begin{aligned}\sin\alpha +\sin\beta&amp;=2\sin\dfrac{\alpha +\beta} 2\cos\dfrac{\alpha -\beta} 2 \\\sin\alpha -\sin\beta&amp;=2\cos\dfrac{\alpha +\beta} 2\sin\dfrac{\alpha -\beta} 2 \\\cos\alpha +\cos\beta&amp;=2\cos\dfrac{\alpha +\beta} 2\cos\dfrac{\alpha -\beta} 2 \\\cos\alpha -\cos\beta&amp;=-2\sin\dfrac{\alpha+\beta} 2\sin\dfrac{\alpha -\beta} 2\end{aligned}\]</span> 上面四个公式可以由倍角公式推得，证明不再赘述。</p><h2 id="积化和差公式">9.8   积化和差公式</h2><p>下面给出三角函数的积化和差公式。</p><p><strong>积化和差公式</strong>   给定角 <spanclass="math inline">\(\alpha\)</span> 与 <spanclass="math inline">\(\beta\)</span>，则有： <spanclass="math display">\[\begin{aligned}\sin\alpha\cos\beta&amp;=\dfrac 12[\sin(\alpha+\beta)+\sin(\alpha-\beta)] \\\cos\alpha\sin\beta&amp;=\dfrac 12[\sin(\alpha+\beta)-\sin(\alpha-\beta)] \\\cos\alpha\cos\beta&amp;=\dfrac 12[\cos(\alpha+\beta)+\cos(\alpha-\beta)] \\\sin\alpha\cos\beta&amp;=-\dfrac 12[\cos(\alpha+\beta)-\cos(\alpha-\beta)] \\\end{aligned}\]</span> 上面四个公式可以由和角公式与差角公式推得，证明不再赘述。</p>]]></content>
      
      
      <categories>
          
          <category> 微积分学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二项式反演</title>
      <link href="/post/169f0aee837e.html"/>
      <url>/post/169f0aee837e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>组合数学学习笔记 02 二项式反演</p><p>进入<ahref="/categories/组合数学学习笔记/">分类索引</a>，阅读该专题下的往期笔记。</p></blockquote><h1 id="二二项式反演">二、二项式反演</h1><h2 id="基本形式">2.1   基本形式</h2><p>对于定义在域 <span class="math inline">\(X\)</span> 上的实值函数<span class="math inline">\(F(n)\)</span> 与 <spanclass="math inline">\(G(n)\)</span>，若由如下递推关系 <spanclass="math display">\[G(n)=\sum\limits_{i=0}^n\binom n i F(i) \tag{1}\]</span> 得到 <span class="math inline">\(G(n)\)</span> 关于 <spanclass="math inline">\(F(i)\)</span>的表达式，则可以通过如下的递推关系通过 <spanclass="math inline">\(G(i)\)</span> 反解 <spanclass="math inline">\(F(n)\)</span>： <span class="math display">\[\boxed{F(n)=\sum\limits_{i=0}^n\binom n i (-1)^{n-i} G(i) \tag{2}}\]</span> 上述通过 <span class="math inline">\(G\)</span> 反解 <spanclass="math inline">\(F\)</span>的过程称为<strong>二项式反演</strong>。</p><p>要证明二项式反演，下面引入两个二项式系数引理。</p><p><strong>引理 1</strong>   <span class="math inline">\(\dbinom ni\dbinom i k=\dbinom n k \dbinom {n-k} {i-k}\)</span>。</p><blockquote><p><strong>证明</strong>   考虑组合意义：在 <spanclass="math inline">\(n\)</span> 个元素中先取出 <spanclass="math inline">\(i\)</span> 个元素，再在 <spanclass="math inline">\(i\)</span> 个元素中取出 <spanclass="math inline">\(k\)</span> 个元素的方案数，显然等价于，在 <spanclass="math inline">\(n\)</span> 个元素中直接取出 <spanclass="math inline">\(k\)</span> 个元素，而后在剩下 <spanclass="math inline">\(n-k\)</span> 个元素中再选出来 <spanclass="math inline">\(i-k\)</span> 个元素的方案数。</p></blockquote><p><strong>引理 2</strong>   <spanclass="math inline">\(\sum\limits_{i=0}^n(-1)^{i}\dbinom nk=[n=0]\)</span>。</p><blockquote><p><strong>证明</strong>   考虑二项式定理在 <spanclass="math inline">\(x=1,y=-1\)</span>​ 时的特殊情况，有 <spanclass="math inline">\(\sum\limits_{i=0}^n\dbinom n i(-1)^i1^{n-i}=0^n=[n=0]\)</span>。</p></blockquote><p>下面给出二项式反演的证明。</p><p><strong>证明</strong>   将 <span class="math inline">\((1)\)</span>式直接代入 <span class="math inline">\((2)\)</span>式，应用引理 1，有<span class="math display">\[\begin{aligned}F(n)&amp;=\sum\limits_{i=0}^n\binom n i(-1)^{n-i}\sum\limits_{j=0}^i\binom i j F(j) \\&amp;=\sum\limits_{i=0}^n\sum\limits_{j=0}^i\binom n i \binom i j(-1)^{n-i}F(j)\\&amp;=\sum\limits_{i=0}^n\sum\limits_{j=0}^i\binom n j \binom {n-j}{i-j} (-1)^{n-i}F(j)\\&amp;=\sum\limits_{j=0}^n\binom n j F(j)\sum_{i=j}^n(-1)^{n-i}\binom{n-j} {i-j}\end{aligned}\]</span> 令 <span class="math inline">\(t=i-j\)</span>，则 <spanclass="math inline">\(i=t+j\)</span>，应用引理 2，继续推上面的式子，有<span class="math display">\[\begin{aligned}F(n)&amp;=\sum\limits_{j=0}^n\binom n j F(j)\sum_{i=j}^n(-1)^{n-i}\binom{n-j} {i-j} \\&amp;=\sum\limits_{j=0}^n\binom n jF(j)\sum\limits_{t=0}^{n-j}(-1)^{n-t-j}\binom {n-j}{t} \\&amp;=\sum\limits_{j=0}^n\binom n j F(j)[n-j=0] \\&amp;=\binom n n F(n) \\&amp;=F(n)\end{aligned}\]</span> <strong>证毕</strong>。</p><h2 id="第二种形式">2.2   第二种形式</h2><p>还是对于定义在域 <span class="math inline">\(X\)</span> 上的实值函数<span class="math inline">\(F(n)\)</span> 与 <spanclass="math inline">\(G(n)\)</span>，若由如下递推关系 <spanclass="math display">\[G(n)=\sum\limits_{i=n}^m\binom i n F(i) \tag{3}\]</span> 则可以通过下面的递推关系利用 <spanclass="math inline">\(G(i)\)</span> 反解 <spanclass="math inline">\(F(n)\)</span>： <span class="math display">\[\boxed{F(n)=\sum\limits_{i=n}^m\binom i n (-1)^{i-n}G(i) \tag{4}}\]</span> 下面给出这种形式的证明。</p><p><strong>证明</strong>   将 <span class="math inline">\((3)\)</span>式直接代入 <span class="math inline">\((4)\)</span>式，再次利用上述引理，有 <span class="math display">\[\begin{aligned}F(n)&amp;=\sum\limits_{i=n}^m\binom i n(-1)^{i-n}\sum\limits_{j=i}^m\binom j iF(j) \\&amp;=\sum\limits_{i=n}^m\sum\limits_{j=i}^m\binom j i \binom i n(-1)^{i-n}F(j) \\&amp;=\sum\limits_{i=n}^m\sum\limits_{j=i}^m\binom j n \binom {j-n}{i-n} (-1)^{i-n}F(j) \\&amp;=\sum\limits_{j=n}^m\binom j n F(j)\sum\limits_{i=n}^j\binom{j-n}{i-n}(-1)^{i-n}\end{aligned}\]</span> 令 <span class="math inline">\(t=i-n\)</span>，则 <spanclass="math inline">\(i=t+n\)</span>，继续推上面的式子，有 <spanclass="math display">\[\begin{aligned}F(n)&amp;=\sum\limits_{j=n}^m\binom j n F(j)\sum\limits_{i=n}^j\binom{j-n}{i-n}(-1)^{i-n} \\&amp;=\sum\limits_{j=n}^m\binom j n F(j)\sum\limits_{t=0}^{j-n}(-1)^{t}\binom {j-n}{t} \\&amp;=\sum\limits_{j=n}^m\binom j n F(j) [j-n=0] \\&amp;=\binom n n F(n) \\&amp;=F(n)\end{aligned}\]</span> <strong>证毕</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 组合数学学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二项式定理与二项式系数</title>
      <link href="/post/25bc084a1f5a.html"/>
      <url>/post/25bc084a1f5a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>组合数学学习笔记 01 二项式定理与二项式系数</p><p>进入<ahref="/categories/组合数学学习笔记/">分类索引</a>，阅读该专题下的往期笔记。</p></blockquote><p>本章节介绍二项式定理与相关推论定理，在组合数学中有重要作用。</p><h1 id="一二项式定理与二项式系数">一、二项式定理与二项式系数</h1><h2 id="二项式定理">1.1   二项式定理</h2><p><strong>定理 1（二项式定理）</strong>   设 <spanclass="math inline">\(n\)</span> 是正整数。对所有的 <spanclass="math inline">\(x\)</span> 和 <spanclass="math inline">\(y\)</span>，有 <span class="math display">\[(x+y)^n=\sum\limits_{k=0}^n\binom nk x^{n-k}y^k\tag 1\]</span></p><blockquote><p><strong>证明</strong>   考虑把 <spanclass="math inline">\((x+y)^n\)</span> 展开，结果有 <spanclass="math inline">\(2^n\)</span> 项，每一项都可以写成 <spanclass="math inline">\(x^{n-k}y^k\)</span> 的形式。对于每个形式，相当于在<span class="math inline">\(n\)</span> 个因子中选择 <spanclass="math inline">\(k\)</span> 个选择 <spanclass="math inline">\(x\)</span>，故其系数为 <spanclass="math inline">\(\binom n k\)</span>​。</p></blockquote><h2 id="组合相关推论">1.2   组合相关推论</h2><p>如果对于二项式定理，取 <spanclass="math inline">\(y=1\)</span>，则有如下特殊形式。</p><p><strong>定理 2</strong>   设 <span class="math inline">\(n\)</span>为正整数。对于所有的 <span class="math inline">\(x\)</span>，有 <spanclass="math display">\[(1+x)^n=\sum\limits_{k=0}^n \binom n k x^k\tag{2}\]</span> 证明略去。</p><p><strong>定理 3</strong>   对于正整数 <spanclass="math inline">\(n,k\)</span>，有 <span class="math display">\[k\binom n k =n\binom {n-1}{k-1}\tag{3}\]</span></p><blockquote><p><strong>证明</strong>   如果 <spanclass="math inline">\(k&gt;n\)</span>，则 <spanclass="math inline">\(\binom n k=0\)</span>。否则，有 <spanclass="math display">\[k\binom n k =\dfrac{n(n-1)\cdots (n-k+1)}{k(k-1)\cdots 1}\timesk=\dfrac{n(n-1)\cdots (n-k+1)}{(k-1)(k-2)\cdots 1}\]</span> 而又有 <span class="math display">\[n\binom {n-1}{k-1}=\dfrac{(n-1)(n-2)\cdots (n-k+1)}{(k-1)(k-2)\cdots1}\times n=\dfrac{n(n-1)\cdots (n-k+1)}{(k-1)(k-2)\cdots 1}=k\binom n k\]</span> 得证。</p></blockquote><p>显然根据组合意义，有 <span class="math display">\[\sum\limits_{k=0}^n\binom n k=2^n\tag{4}\]</span> 下面给出另一有关定理。</p><p><strong>定理 4</strong>   对于正整数 <spanclass="math inline">\(n&gt;1\)</span>，有如下二式成立 <spanclass="math display">\[\begin{aligned}\binom n 0 +\binom n 2 +\binom n 4 + \cdots &amp;= 2^{n-1} \\\binom n 1 +\binom n 3 +\binom n 5 + \cdots &amp;= 2^{n-1}\end{aligned}\tag{5}\]</span></p><blockquote><p><strong>证明</strong>   对于二项式定理 <spanclass="math inline">\(\sum\limits_{k=0}^n\binom n kx^{n-k}y^k\)</span>，取 <span class="math inline">\(x=1,y=-1\)</span>时可以得到 <span class="math display">\[\binom n 0 -\binom n 1+\binom n 2-\cdots +(-1)^n\binom n n =0\]</span> 移项可得 <span class="math display">\[\binom n 0+\binom n 2+\cdots =\binom n 1+\binom n 3+\cdots\\]</span> 根据 <span class="math inline">\((4)\)</span>式可以得到上式左右两边加和为 <spanclass="math inline">\(2^n\)</span>，故可知左右两边分别等于 <spanclass="math inline">\(2^{n-1}\)</span>。</p><p>得证。</p></blockquote><p><strong>定理 5</strong>   对于任意正整数 <spanclass="math inline">\(n\)</span>，有 <span class="math display">\[nx(1+x)^{n-1}=\sum\limits_{k=1}^n k\binom n k x^k\tag 6\]</span></p><blockquote><p><strong>证明</strong>   对 <span class="math inline">\((2)\)</span>式两边关于 <span class="math inline">\(x\)</span> 求导，得到 <spanclass="math display">\[n(1+x)^{n-1}=\sum\limits_{k=1}^nk\binom n k x^{k-1}\]</span> 两边同乘 <span class="math inline">\(x\)</span> 即可得证。</p></blockquote><p>对于上述定理还有一个特殊形式，当 <spanclass="math inline">\(x=1\)</span> 时，有 <span class="math display">\[n2^{n-1}=\sum\limits_{k=1}^nk\binom nk \tag 7\]</span> 如果对上述定理再同时关于 <spanclass="math inline">\(x\)</span> 求导，可以得到 <spanclass="math display">\[n(n+1)2^{n-2}=\sum\limits_{k=1}^n k^2\binom nk\tag 8\]</span> <strong>定理 6</strong>  关于帕斯卡三角形各行上的数字的平方和，有如下等式 <spanclass="math display">\[\sum\limits_{k=0}^n \binom nk^2=\binom {2n} n\tag 9\]</span></p><blockquote><p><strong>证明</strong>   设 <span class="math inline">\(S\)</span>为一个大小为 <span class="math inline">\(2n\)</span> 的集合，将其分为<span class="math inline">\(A,B\)</span> 两个大小均为 <spanclass="math inline">\(n\)</span> 的不交集合。考虑选出 <spanclass="math inline">\(S\)</span> 的每一个 <spanclass="math inline">\(n\)</span> 子集，设其中元素在 <spanclass="math inline">\(A\)</span> 集合中的有 <spanclass="math inline">\(k\)</span> 个，则在 <spanclass="math inline">\(B\)</span> 集合中的有 <spanclass="math inline">\(n-k\)</span> 个，其中 <spanclass="math inline">\(0\le k\le n\)</span>。</p><p>按照 <span class="math inline">\(k\)</span> 的大小建立 <spanclass="math inline">\(k+1\)</span> 个集合 <spanclass="math inline">\(\mathscr{C}_k\)</span>，表示由包含 <spanclass="math inline">\(k\)</span> 个 <spanclass="math inline">\(A\)</span> 集合中的元素与 <spanclass="math inline">\(n-k\)</span> 个 <spanclass="math inline">\(B\)</span> 集合组成的 <spanclass="math inline">\(n\)</span> 子集的集合。显然有 <spanclass="math display">\[\binom {2n} n=\sum\limits_{i=0}^n | \mathscr C_i|\]</span> 考虑每一个 <span class="math inline">\(\mathscr C_i\)</span>的元素个数，其中每个 <span class="math inline">\(n\)</span> 子集包含的<span class="math inline">\(k\)</span> 个 <spanclass="math inline">\(A\)</span> 中元素有 <spanclass="math inline">\(\binom n k\)</span> 种，<spanclass="math inline">\(B\)</span> 中元素有 <spanclass="math inline">\(\binom n {n-k}\)</span> 中，故有 <spanclass="math display">\[\sum\limits_{i=0}^n |\mathscr C_i|=\sum\limits_{i=0}^n \binom n k\binomn {n-k}=\sum\limits _{i=0}^n \binom n k^2=\binom {2n} n\]</span> 得证。</p></blockquote><p><strong>定理 7</strong>   对于正整数 <spanclass="math inline">\(n,k\)</span>，有 <span class="math display">\[\binom {n+1}{k+1}=\sum\limits_{i=0}^n\binom i k\]</span></p><blockquote><p><strong>证明</strong>   对于二项式 <span class="math inline">\(\binomn k\)</span> 不断应用基本公式 <span class="math inline">\(\binom nk=\binom {n-1} k+\binom {n-1}{k-1}\)</span>，可以得到 <spanclass="math display">\[\binom nk=\binom 0k+\binom 0{k-1}+\cdots +\binom {n-2}{k-1}+\binom{n-1}{k-1}\]</span> 根据 <span class="math inline">\(\binom 0k=0\)</span>消去该项，并用 <span class="math inline">\(n+1\)</span> 取代 <spanclass="math inline">\(n\)</span>，用 <spanclass="math inline">\(k+1\)</span> 取代 <spanclass="math inline">\(k\)</span> 得证。</p></blockquote><h2 id="二项式系数的单峰性">1.3   二项式系数的单峰性</h2><p>通过考察帕斯卡三角的某一行，不难发现单峰性 <spanclass="math display">\[\binom n1&lt;\binom n2&lt;\cdots &lt;\binom nt,\binom nt&gt;\binomn{t+1}&gt;\cdots&gt;\binom nn\]</span> 当 <span class="math inline">\(n\)</span> 为奇数时，最大值点<span class="math inline">\(t=\lfloor\dfrac n2\rfloor\)</span>。</p><p>当 <span class="math inline">\(n\)</span> 为偶数时，有两个最大值点<span class="math inline">\(\dfrac n2\)</span> 和 <spanclass="math inline">\(\dfrac n2+1\)</span>。</p><h2 id="sperner-定理">1.4   Sperner 定理</h2><p>对于一个 <span class="math inline">\(n\)</span> 元素集合 <spanclass="math inline">\(S\)</span>，定义 <spanclass="math inline">\(S\)</span> 的子集的集合 <spanclass="math inline">\(\mathscr C\)</span>是一条<strong>链</strong>，当且仅当对于 <spanclass="math inline">\(\mathscr C\)</span>​​的每一对子集，总有包含与被包含关系。</p><p>定义 <span class="math inline">\(S\)</span>的一条<strong>最大链</strong>为元素个数最多的子集集合 <spanclass="math inline">\(\mathscr C\)</span>。</p><p>定义 <span class="math inline">\(S\)</span> 的子集的集合 <spanclass="math inline">\(\mathscr C\)</span>是一条<strong>反链</strong>，当且仅当 <spanclass="math inline">\(\mathscr C\)</span>的每对元素都没有包含与被包含关系。</p><p><strong>定理 8（Sperner 定理）</strong>   设 <spanclass="math inline">\(S\)</span> 为 <spanclass="math inline">\(n\)</span> 元素集合，则 <spanclass="math inline">\(S\)</span> 的一个反链上至多包含 <spanclass="math inline">\(\dbinom n{\lfloor\frac n2\rfloor}\)</span>个集合。</p><blockquote><p><strong>证明</strong>   考虑什么样的集合 <spanclass="math inline">\(\mathscr C\)</span>会成为<strong>最大链</strong>。不难发现，当形如 <spanclass="math inline">\(\mathscrC=\{\{a_1\},\{a_1,a_2\},\cdots,\{a_1,a_2,\cdots a_n\}\}\)</span>的时候会成为最大链，最大链长度为 <spanclass="math inline">\(n\)</span>，其中 <spanclass="math inline">\(a_1,a_2\cdots a_n\)</span> 为一个 <spanclass="math inline">\(1\sim n\)</span>的<strong>排列</strong>，最大链个数为 <spanclass="math inline">\(n!\)</span>。</p><p>当我们考虑一个 <span class="math inline">\(S\)</span> 的子集 <spanclass="math inline">\(A\)</span> 的时候，固定 <spanclass="math inline">\(|A|=k\)</span> 时，发现<strong>包含集合 <spanclass="math inline">\(A\)</span> 的最大链的个数</strong>为 <spanclass="math display">\[k!(n-k)!\]</span> 在构成的最大链中，其中有 <spanclass="math inline">\(k!\)</span> 个是包含于 <spanclass="math inline">\(A\)</span> 的集合数目，<spanclass="math inline">\((n-k)!\)</span> 是包含 <spanclass="math inline">\(A\)</span>​ 的集合数目。</p><p>同时不难发现：<strong>每条链至多能包含任意一个反链的一个成员</strong>，反证不难。</p><p>现在要求反链的最大长度，根据上述引理，可以唯一转化为求包含反链成员的不同最大链长度。</p><p>设 <span class="math inline">\(\mathscr A\)</span> 是反链，<spanclass="math inline">\(A\)</span> 是反链中的一个元素，<spanclass="math inline">\(\mathscr C\)</span> 是包含 <spanclass="math inline">\(A\)</span> 的最大链。设 <spanclass="math inline">\(\beta=|\mathscr A|\)</span> 同时等于合法的最大链<span class="math inline">\(\mathscr C\)</span> 的个数。根据上述论证，有<span class="math inline">\(\beta\le n!\)</span>。如果 <spanclass="math inline">\(|A|=k\)</span>，则有 <spanclass="math inline">\(k!(n-k)!\)</span> 个包含 <spanclass="math inline">\(A\)</span> 的最大链 <spanclass="math inline">\(\mathscr C\)</span>。</p><p>设 <span class="math inline">\(\alpha _k\)</span> 是反链 <spanclass="math inline">\(\mathscr A\)</span> 中大小为 <spanclass="math inline">\(k\)</span> 的元素个数，有 <spanclass="math inline">\(|\mathscr A|=\sum\limits_{k=0}^n\alpha_k\)</span>，于是 <span class="math display">\[\beta=\sum\limits_{k=0}^n \alpha_k k!(n-k)!\le n!\]</span> 通过化简得到 <span class="math display">\[\sum\limits_{k=0}^n\dfrac{\alpha_k}{\dbinom nk}\le 1\]</span> 根据二项式系数的单峰性，当 <spanclass="math inline">\(k=\lfloor \dfrac n2 \rfloor\)</span> 的时候 <spanclass="math inline">\(\dbinom nk\)</span> 最大，于是有 <spanclass="math display">\[|\mathscr A|\le \sum\limits_{k=0}^n\alpha _k\le \binom n {\lfloor \dfracn2 \rfloor}\]</span> 得证。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 组合数学学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指数、对数、双曲函数的导数与极限</title>
      <link href="/post/cb74d1c1ba84.html"/>
      <url>/post/cb74d1c1ba84.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>微积分学习笔记 - 04 指数、对数、双曲函数的导数与极限</p><p>进入 <ahref="/categories/微积分学习笔记/">传送门</a>，阅读刊载在专栏《微积分阅读笔记》下的全部文章。</p></blockquote><h1 id="六指数函数与对数函数的导数">六、指数函数与对数函数的导数</h1><p>本节通过对自然常数 <span class="math inline">\(\mathrm{e}\)</span>的探究推出指数与对数函数的导数。请务必在阅读本节前了解指数与对数的基本运算性质。</p><h2 id="mathrme-的定义与相关极限">6.1   <spanclass="math inline">\(\mathrm{e}\)</span> 的定义与相关极限</h2><p><strong><span class="math inline">\(\mathrm{e}\)</span>的定义</strong>   对于极限，定义 <span class="math display">\[\mathrm{e}=\lim\limits_{h\to 0^+}(1+h)^{\frac1h}\]</span> 关于它的求解与证明暂时略去。通过上述极限可以推出许多性质。</p><p>考虑极限 <span class="math display">\[L=\lim\limits_{n\to \infty}(1+\dfrac rn)^n\]</span> 令 <span class="math inline">\(h=\dfrac rn\)</span>，这样<span class="math inline">\(n=\dfrac rh\)</span>，对上述极限变形，有<span class="math display">\[L=\lim\limits_{h\to 0^+}(1+h)^{\frac rh}=\lim\limits_{h\to0^+}((1+h)^{\frac 1h})^r=\mathrm{e}^r\]</span> 注意此时变成了 <span class="math inline">\(h\to 0^+\)</span>处的极限。这样，就有重要极限 <span class="math display">\[\boxed{\lim\limits_{n\to \infty}(1+\dfrac xn)^n=\mathrm{e}^x}\tag{1}\]</span> 特殊地，当 <span class="math inline">\(x=1\)</span> 时，有<span class="math display">\[\boxed{\lim\limits_{n\to \infty}(1+\dfrac 1n)^n=\mathrm{e}}\]</span> 对于极限 <span class="math inline">\((1)\)</span>，令 <spanclass="math inline">\(h=\dfrac 1n\)</span>，有 <spanclass="math display">\[\lim\limits_{h\to 0^+}(1+rh)^{\frac 1h}=\mathrm{e}^r\]</span> 注意极限位置。得出另一个重要极限 <span class="math display">\[\boxed{\lim\limits_{h\to 0^+}(1+xh)^{\frac 1h}=\mathrm{e}^x}\]</span> 特殊地，当 <span class="math inline">\(x=1\)</span> 时，有<span class="math display">\[\boxed{\lim\limits_{h\to 0^+}(1+h)^{\frac 1h}=\mathrm{e}}\]</span></p><h2 id="对数函数与指数函数的导数">6.2   对数函数与指数函数的导数</h2><p>使用导数的定义，令 <spanclass="math inline">\(f(x)=\log_bx\)</span>，则有 <spanclass="math display">\[\begin{aligned}f&#39;(x)&amp;=\lim\limits_{h\to0}\dfrac{f(x+h)-f(x)}{h}=\lim\limits_{h\to 0}\dfrac{\log_b(x+h)-\log_bx}h\\&amp;=\lim\limits_{h\to 0}\dfrac 1h\log_b(\dfrac{x+h}x)\\&amp;=\lim\limits_{h\to 0}\log_b(1+\dfrac hx)^{\frac 1h}\end{aligned}\]</span> 上一节中，我们证明了 <span class="math display">\[\lim\limits_{h\to 0^+}(1+rh)^{\frac 1h}=\mathrm{e}^r\]</span> 不妨令 <span class="math inline">\(r=\dfrac 1x\)</span>，则有<span class="math display">\[\begin{aligned}f&#39;(x)&amp;=\lim\limits_{h\to 0}\log_b(1+\dfrac hx)^{\frac1h}=\log_b(\mathrm{e}^\frac1x)\\&amp;=\dfrac{\ln \mathrm{e}^\frac 1x}{\ln b}\\&amp;=\dfrac 1{x\ln b}\end{aligned}\]</span> 这就证明了<strong>对数函数的导数</strong>为 <spanclass="math display">\[\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\log_bx=\dfrac 1{x\ln b}}\]</span> 特殊地，自然对数的导数为 <span class="math display">\[\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\ln x=\dfrac 1x}\]</span> 接下来推导指数函数的导数。对于指数函数 <spanclass="math inline">\(y=a^x\)</span>，等价于 <spanclass="math inline">\(x=\log_ay\)</span>。现在关于 <spanclass="math inline">\(y\)</span> 求导，有： <spanclass="math display">\[\dfrac{\mathrm{d}x}{\mathrm{d}y}=\dfrac1{x\ln a}\]</span> 根据链式求导法则，<spanclass="math inline">\(\dfrac{\mathrm{d}x}{\mathrm{d}x}=\dfrac{\mathrm{d}y}{\mathrm{d}x}\dfrac{\mathrm{d}x}{\mathrm{d}y}=1\)</span>，可以上下颠倒得到：<span class="math display">\[\dfrac{\mathrm{d}y}{\mathrm{d}x}=y\ln a=a^x\ln a\]</span> 这就证明了<strong>指数函数的导数</strong>为 <spanclass="math display">\[\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}a^x=a^x\ln a}\]</span> 特殊地，以自然常数为底数的指数，导数为 <spanclass="math display">\[\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\mathrm{e}^x=\mathrm{e}^x}\]</span> 这是一个独特的公式。发现它的导数还是它自己。</p><h2 id="伸缩函数的导数">6.3   伸缩函数的导数</h2><p>这里的<strong>伸缩函数</strong>，定义为：对于函数 <spanclass="math inline">\(y=f(x)\)</span>，则其伸缩函数为 <spanclass="math inline">\(y&#39;=f(ax)\)</span>，其中，<spanclass="math inline">\(a\)</span> 为常数。</p><p>对伸缩函数求导，即 <spanclass="math inline">\(\dfrac{\mathrm{d}}{\mathrm{d}x}f(ax)\)</span>，根据链式求导法则，令 <spanclass="math inline">\(u=ax\)</span>，则 <spanclass="math inline">\(y=f(u)\)</span>，有 <span class="math display">\[\dfrac{\mathrm{d}y}{\mathrm{d}x}=\dfrac{\mathrm{d}y}{\mathrm{d}u}\dfrac{\mathrm{d}u}{\mathrm{d}x}=af&#39;(u)=af&#39;(ax)\]</span> 可以发现，伸缩函数的导数与原本函数的导数相比，前面多了 <spanclass="math inline">\(a\)</span> 的常数。</p><p>这个规律对指数对数函数、三角函数同样适用，例如，<spanclass="math inline">\(y=\mathrm{e}^{-3x}\)</span>，则其导数为 <spanclass="math inline">\(\dfrac{\mathrm{d}y}{\mathrm{d}x}=-3\mathrm{e}^{-3x}\)</span>。</p><h2 id="取对数求导法">6.4   取对数求导法</h2><p>对于类似 <span class="math inline">\(y=f(x)^{g(x)}\)</span>一类指数与底数均为 <span class="math inline">\(x\)</span>的函数的导数问题，通常使用取对数求导法，具体地：</p><ul><li>对等号两边取自然对数，使指数移下来成为系数得到类似 <spanclass="math inline">\(\ln y=g(x)\ln f(x)\)</span> 的式子；</li><li>对等号两边进行隐函数求导，有 <span class="math inline">\(\dfrac1y\dfrac{\mathrm{d}y}{\mathrm{d}x}=\dfrac{\mathrm{d}}{\mathrm{d}x}g(x)\lnf(x)\)</span>；</li><li>对等式化简，完成求解。</li></ul><blockquote><p><strong>例子</strong>   求解导数 <spanclass="math inline">\(\dfrac{\mathrm{d}}{\mathrm{d}x}x^{\sin(x)}\)</span>。</p></blockquote><p>令 <spanclass="math inline">\(y=x^{\sin(x)}\)</span>，对等式两边取对数得到 <spanclass="math inline">\(\ln y=\sin(x)\ln x\)</span>，对隐函数求导有 <spanclass="math display">\[\dfrac 1y \dfrac{\mathrm{d}y}{\mathrm{d}x}=\cos(x)\ln x+\dfrac{\sin(x)}x\]</span> 化简得到 <span class="math display">\[\dfrac{\mathrm{d}y}{\mathrm{d}x}x^{\sin(x)}=(\cos(x)\ln x+\dfrac{\sin(x)}x)x^{\sin(x)}\]</span></p><h1 id="七指数函数与对数函数的极限">七、指数函数与对数函数的极限</h1><p>本节将借助指数函数与对数函数的导数，求解二者在特殊位置的极限与变化率。将其变化率与其他初等函数比较，会有重要的性质。</p><h2 id="涉及-mathrm-e-的极限">7.1   涉及 <spanclass="math inline">\(\mathrm e\)</span> 的极限</h2><p>涉及 <span class="math inline">\(\mathrm e\)</span>的极限，通常借助重要结论求解： <span class="math display">\[\lim\limits_{h\to 0^+}(1+h)^{\frac 1h}=\mathrm{e}\tag{2}\]</span></p><blockquote><p><strong>例子</strong>   求解极限 <spanclass="math inline">\(\lim\limits_{h\to0}(1+h^2)^{\frac1{3h^2}}\)</span>。</p></blockquote><p>容易发现，这个式子形式很像 <span class="math inline">\((2)\)</span>式，不妨就通过这个突破点思考。令 <spanclass="math inline">\(x=h^2\)</span>，则原极限等价于 <spanclass="math display">\[\lim\limits_{x\to 0}(1+x^2)^{\frac 1{x}\cdot \frac 13}=\mathrm e ^{\frac13}\]</span> 便可求解。</p><h2 id="指数函数的行为">7.2   指数函数的行为</h2><p>下面是指数函数 <span class="math inline">\(y=\mathrm e^x\)</span>的图像。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=OEon7oi0" style="zoom:67%;" /></p><p>根据指数函数图像，不难发现指数函数 <spanclass="math inline">\(y=a^x(a&gt;1)\)</span> 有两个重要极限 <spanclass="math display">\[\lim\limits_{x\to \infty}a^x=\infty\quad,\quad \lim\limits_{x\to-\infty}a^x=0\]</span> 当 <span class="math inline">\(0&lt;a&lt;1\)</span>是有相反的性质 <span class="math display">\[\lim\limits_{x\to \infty}a^x=0\quad,\quad \lim\limits_{x\to-\infty}a^x=\infty\]</span> <strong>指数函数增长迅速</strong>：对于任意多项式函数 <spanclass="math inline">\(f(x)\)</span>，都有 <spanclass="math inline">\(\boxed{\lim\limits_{x\to\infty}\dfrac{f(x)}{\mathrm e^x}=0}\)</span>。</p><p>下面分析指数函数在 <span class="math inline">\(0\)</span>附近的行为。</p><p>根据函数过定点，显然有 <span class="math inline">\(\lim\limits_{x\to0}\mathrm e^x=1\)</span>。</p><p>设 <span class="math inline">\(f(x)=\mathrm e^x\)</span>，其导数为<span class="math inline">\(\mathrm e^x\)</span>，在 <spanclass="math inline">\(x=0\)</span> 时为 <spanclass="math inline">\(1\)</span>。换一种方式分析，根据导数定义有： <spanclass="math display">\[\begin{aligned}\lim\limits_{h\to 0}\dfrac{\mathrm e^{x+h}+\mathrm e^x}h=\mathrm e^x\end{aligned}\]</span> 在 <span class="math inline">\(x\to 0\)</span> 时有 <spanclass="math display">\[\lim\limits_{h\to 0}\dfrac{\mathrm e^h-1}h=1\]</span></p><h2 id="对数函数的行为">7.3   对数函数的行为</h2><p>下面是对数函数 <span class="math inline">\(y=\ln x\)</span>的图像。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=wRfD30Hf" style="zoom: 67%;" /></p><p>根据指数函数图像，不难发现指数函数 <span class="math inline">\(y=\log_ax(a&gt;1)\)</span> 有两个重要极限 <span class="math display">\[\lim\limits_{x\to 0^+}\log_ax=-\infty\quad,\quad \lim\limits_{x\to\infty}\log_ax=\infty\]</span> 当 <span class="math inline">\(0&lt;a&lt;1\)</span>是有相反的性质 <span class="math display">\[\lim\limits_{x\to 0^+}a^x=\infty\quad,\quad \lim\limits_{x\to-\infty}\log_ax=-\infty\]</span> <strong>对数函数增长缓慢</strong>：对于任意多项式函数 <spanclass="math inline">\(f(x)\)</span>，都有 <spanclass="math inline">\(\boxed{\lim\limits_{x\to \infty}\dfrac{\lnx}{f(x)}=0}\)</span></p><p>对于极限 <span class="math inline">\(\lim\limits_{x\to 0^+}x\lnx\)</span>，令 <span class="math inline">\(t=\dfrac 1x\)</span>，则有：<span class="math display">\[\lim\limits_{x\to 0^+}x\ln x=\lim\limits_{t\to \infty}\dfrac 1t\ln\dfrac 1t=\lim\limits_{t\to \infty}\dfrac{-\ln t}t=0\]</span> 得到结论，<strong>对数函数在 <spanclass="math inline">\(0\)</span> 附近增长缓慢</strong>：<spanclass="math inline">\(\forall a&gt;0,\boxed{\lim\limits_{x\to 0^+}x^a\lnx=0}\)</span>。</p><h1 id="八双曲函数的导数">八、双曲函数的导数</h1><p>下面探究一下<strong>双曲函数</strong>。双曲函数与三角函数有比较相似的性质。</p><h2 id="双曲正弦函数与双曲余弦函数">8.1  双曲正弦函数与双曲余弦函数</h2><p>下面给出定义：</p><ul><li><strong>双曲正弦函数</strong>：<spanclass="math inline">\(\sinh(x)=\dfrac{\mathrm e^x-\mathrme^{-x}}2\)</span>；</li><li><strong>双曲余弦函数</strong>：<spanclass="math inline">\(\cosh(x)=\dfrac{\mathrm e^x+\mathrme^{-x}}2\)</span>。</li></ul><p>会发现，<spanclass="math inline">\(\cosh^2(x)-\sinh^2(x)=\dfrac{\mathrme^{2x}+\mathrm e^{-2x}+2}4-\dfrac{\mathrm e^{2x}+\mathrme^{-2x}2}4=1\)</span>，得出与三角函数很像的结论： <spanclass="math display">\[\cosh^2(x)-\sinh^2(x)=1\]</span> 接下来对两式求导： <span class="math display">\[\dfrac{\mathrm{d}}{\mathrm{d}x}\sinh(x)=\dfrac{\mathrm{d}}{\mathrm{d}x}(\dfrac{\mathrme^x-\mathrm e^{-x}}2)=\dfrac{\mathrm e^x+\mathrm e^{-x}}2=\cosh(x)\]</span></p><p><span class="math display">\[\dfrac{\mathrm{d}}{\mathrm{d}x}\cosh(x)=\dfrac{\mathrm{d}}{\mathrm{d}x}(\dfrac{\mathrme^x+\mathrm e^{-x}}2)=\dfrac{\mathrm e^x-\mathrm e^{-x}}2=\sinh(x)\]</span></p><p>发现二者互为导数，即： <span class="math display">\[\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\sinh(x)=\cosh(x)}\quad,\quad\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\cosh(x)=\sinh(x)}\]</span> 下面是两函数的图像。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=kC7j0DFk" style="zoom:67%;" /></p><h2 id="其他双曲函数">8.2   其他双曲函数</h2><p>借助双曲正弦与双曲余弦函数的定义，推出下面四种双曲函数的定义与导数：</p><ul><li><strong>双曲正切函数</strong>：<spanclass="math inline">\(\tanh(x)=\dfrac{\sinh(x)}{\cosh(x)}=\dfrac{\mathrme^x-\mathrm e^{-x}}{\mathrm e^x+\mathrm e^{-x}}\)</span>；</li><li><strong>双曲余切函数</strong>：<spanclass="math inline">\(\coth(x)=\dfrac{\cosh(x)}{\sinh(x)}=\dfrac{\mathrme^x+\mathrm e^{-x}}{\mathrm e^x-\mathrm e^{-x}}\)</span>；</li><li><strong>双曲正割函数</strong>：<spanclass="math inline">\(\text{sech}(x)=\dfrac1{\cosh(x)}=\dfrac2{\mathrme^x+\mathrm e^{-x}}\)</span>；</li><li><strong>双曲余割函数</strong>：<spanclass="math inline">\(\text{csch}(x)=\dfrac1{\sinh(x)}=\dfrac2{\mathrme^x-\mathrm e^{-x}}\)</span>。</li></ul><p>从 <span class="math inline">\(\cosh^2(x)-\sinh^2(x)=1\)</span>可以推出： <span class="math display">\[1-\tanh^2(x)=\text{sech}^2(x)\]</span> 与双曲正弦与双曲正切函数类似，它们的导数为： <spanclass="math display">\[\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\tanh(x)=\text{sech}^2(x)}\quad,\quad\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\coth(x)=-\text{csch}^2(x)}\]</span></p><p><span class="math display">\[\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\text{sech}(x)=-\text{sech}(x)\tanh(x)}\quad,\quad\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\text{csch}(x)=-\text{csch}(x)\coth(x)}\]</span></p><p>下面是这四个函数的图像。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=O08RO95A" style="zoom:67%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 微积分学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隐函数求导</title>
      <link href="/post/daf7d27a167b.html"/>
      <url>/post/daf7d27a167b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>微积分学习笔记 - 03 隐函数求导</p><p>进入 <ahref="/categories/微积分学习笔记/">传送门</a>，阅读刊载在专栏《微积分阅读笔记》下的全部文章。</p></blockquote><h1 id="五隐函数求导">五、隐函数求导</h1><p>这一节与其他节相关很少，但后面也要经常用到，所以只好单拎出来。</p><h2 id="隐函数求导">5.1   隐函数求导</h2><p>考虑两个导数 <span class="math display">\[\dfrac{\mathrm{d}}{\mathrm{d}x}(x^2) \quad,\quad\dfrac{\mathrm{d}}{\mathrm{d}x}(y^2)\]</span> 前者显然为 <spanclass="math inline">\(2x\)</span>，但后者却不一定。这主要取决于变量<span class="math inline">\(y\)</span> 与变量 <spanclass="math inline">\(x\)</span> 间的变化关系。</p><p>那怎样求它的导数呢？参考链式求导法则，变量 <spanclass="math inline">\(x\)</span> 的改变会导致变量 <spanclass="math inline">\(y\)</span> 的改变，而变量 <spanclass="math inline">\(y\)</span> 的改变又会导致 <spanclass="math inline">\(y^2\)</span> 的改变。</p><p>令 <span class="math inline">\(u=y^2\)</span>，则 <spanclass="math inline">\(\dfrac{\mathrm{d}u}{\mathrm{d}y}=2y\)</span>，则：<span class="math display">\[\dfrac{\mathrm{d}}{\mathrm{d}x}(y^2)=\dfrac{\mathrm{d}u}{\mathrm{d}y}\dfrac{\mathrm{d}y}{\mathrm{d}x}=2y\dfrac{\mathrm{d}y}{\mathrm{d}x}\]</span> 这就求出了它的导数。显然，若 <spanclass="math inline">\(x\)</span> 与 <spanclass="math inline">\(y\)</span> 毫不相干的时候，导数就为 <spanclass="math inline">\(0\)</span>。</p><blockquote><p><strong>例子</strong>   对于圆的方程 <spanclass="math inline">\(x^2+y^2=4\)</span>，求圆上各点的切线的斜率。</p></blockquote><p>对于这个例子，因为 <span class="math inline">\(y\)</span> 并不是<span class="math inline">\(x\)</span>的函数，并不能直接求导，可以通过在等式两边同时加上 <spanclass="math inline">\(\dfrac{\mathrm{d}}{\mathrm{d}x}\)</span>对隐函数求导，即： <span class="math display">\[\begin{aligned}\dfrac{\mathrm{d}}{\mathrm{d}x}(x^2+y^2)&amp;=\dfrac{\mathrm{d}}{\mathrm{d}x}4\\\dfrac{\mathrm{d}}{\mathrm{d}x}(x^2)+\dfrac{\mathrm{d}}{\mathrm{d}x}(y^2)&amp;=0\\2x+2y\dfrac{\mathrm{d}y}{\mathrm{d}x}&amp;=0\\\dfrac{\mathrm{d}y}{\mathrm{d}x}&amp;=-\dfrac xy\end{aligned}\]</span> 只需要对圆上的每个点 <spanclass="math inline">\((x,y)\)</span> 对应求导即可。</p><p>对于求隐函数导数的问题，通常采用以下方法：</p><ul><li>对原方程进行简化；</li><li>对等式两边同时对一个变量求导，即同时乘上 <spanclass="math inline">\(\dfrac{\mathrm{d}}{\mathrm{d}x}\)</span>，并化简；</li><li>若需求出曲线上某点的切线方程，则需代入对应 <spanclass="math inline">\(x,y\)</span> 求解。</li></ul><h2 id="隐函数求二阶导">5.2   隐函数求二阶导</h2><p>隐函数求二阶导的方法和普通函数类似——在一阶导的基础上求导。</p><blockquote><p><strong>例子</strong>   求函数 <spanclass="math inline">\(2y+\sin(y)=\dfrac{x^2}\pi +1\)</span> 的二阶导<spanclass="math inline">\(\dfrac{\mathrm{d}^2y}{\mathrm{d}x^2}\)</span>。</p></blockquote><p>对隐函数先求一阶导，有：</p><p><span class="math display">\[2\dfrac{\mathrm{d}y}{\mathrm{d}x}+\cos(y)\dfrac{\mathrm{d}y}{\mathrm{d}x}=\dfrac{2x}\pi\tag{1}\]</span> 在 <span class="math inline">\((1)\)</span>上进而对其求二阶导： <span class="math display">\[\begin{aligned}\dfrac{\mathrm{d}}{\mathrm{d}x}(2\dfrac{\mathrm{d}y}{\mathrm{d}x})+\dfrac{\mathrm{d}}{\mathrm{d}x}(\cos(y)\dfrac{\mathrm{d}y}{\mathrm{d}x})&amp;=\dfrac{\mathrm{d}}{\mathrm{d}x}(\dfrac{2x}\pi)\\2\dfrac{\mathrm{d}^2y}{\mathrm{d}x^2}-\sin(y)(\dfrac{\mathrm{d}y}{\mathrm{d}x})^2+\cos(y)\dfrac{\mathrm{d}^2y}{\mathrm{d}x^2}&amp;=\dfrac2\pi\\\end{aligned}\]</span> 化简得到 <span class="math display">\[2\dfrac{\mathrm{d}^2y}{\mathrm{d}x^2}=(\dfrac{\mathrm{d}y}{\mathrm{d}x})^2+\dfrac2\pi\]</span> 下面解决 <spanclass="math inline">\(\dfrac{\mathrm{d}y}{\mathrm{d}x}\)</span>的求解，根据 <span class="math inline">\((1)\)</span> 得： <spanclass="math display">\[\dfrac{\mathrm{d}y}{\mathrm{d}x}=\dfrac{2x}{\pi(2+\cos(y))}\]</span> 代入得 <span class="math display">\[\begin{aligned}\dfrac{\mathrm{d}^2y}{\mathrm{d}x^2}&amp;=\dfrac{(\dfrac{2x}{\pi(2+\cos(y))})^2+\dfrac2\pi}{2}\\&amp;=\dfrac{2x^2}{\pi^2(2+\cos(y))^2}+\frac1\pi\end{aligned}\]</span></p>]]></content>
      
      
      <categories>
          
          <category> 微积分学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三角函数的极限和导数</title>
      <link href="/post/9b5899dde65e.html"/>
      <url>/post/9b5899dde65e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>微积分学习笔记 - 02 三角函数的极限和导数</p><p>进入 <ahref="/categories/微积分学习笔记/">传送门</a>，阅读刊载在专栏《微积分阅读笔记》下的全部文章。</p></blockquote><h1 id="三三角函数的极限">三、三角函数的极限</h1><p>本节简短记录几个比较重要的三角函数极限，对后文推出三角函数的导数有重要作用。</p><h2 id="正弦函数的极限">3.1   正弦函数的极限</h2><p>首先考虑一个重要极限 <span class="math display">\[\lim\limits_{x\to 0}\dfrac{\sin(x)}{x}\]</span> 这个极限的求解将借助单位圆完成。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=4CRL3xmn" /></p><p>三角形 OAC、扇形 OAB、三角形 ODB 的面积分别等于 <spanclass="math inline">\(\dfrac{\sin(x)}{2}\)</span>，<spanclass="math inline">\(\dfrac x 2\)</span>，<spanclass="math inline">\(\dfrac{\tan(x)} 2\)</span>，有不等关系 <spanclass="math display">\[\sin(x)&lt;x&lt;\tan(x)\]</span> 对于 <span class="math inline">\(x&gt;0\)</span>的情况进一步转化可得 <span class="math display">\[\cos(x)&lt;\dfrac{\sin(x)}x&lt;1\]</span> 使用三明治定理，在 <span class="math inline">\(x=0\)</span>的位置，<span class="math inline">\(\cos(x)=1\)</span>，所以得到右极限<span class="math display">\[\lim\limits_{x\to 0^+}\dfrac{\sin(x)}{x}=1\]</span> 由于上述函数是奇函数，不难得到双侧极限 <spanclass="math display">\[\boxed{\lim\limits_{x\to 0}\dfrac{\sin(x)}{x}=1}\]</span> 求解正弦函数的极限，通常利用正弦函数的值域特征 <spanclass="math inline">\(-1\le \sin(x)\le 1\)</span> 简化问题。</p><h2 id="余弦函数的极限">3.2   余弦函数的极限</h2><p>显然，我们有极限 <span class="math display">\[\lim \limits_{x\to 0}\cos(x)=1\]</span> 接下来考虑极限 <span class="math display">\[\lim \limits_{x\to 0}\dfrac{1-\cos(x)}{x}\]</span> 尝试让分子出现 <spanclass="math inline">\(1-\cos^2(x)\)</span>，从而出现 <spanclass="math inline">\(\sin^2(x)\)</span>，借助正弦函数极限求解。 <spanclass="math display">\[\begin{aligned}\lim \limits_{x\to 0}\dfrac{1-\cos(x)}{x}&amp;=\lim\limits_{x\to0}\dfrac{1-\cos(x)}{x}\times \dfrac{1+\cos(x)}{1+\cos(x)} \\&amp;=\lim \limits_{x\to 0}\dfrac{1-\cos^2(x)}{x(1+\cos(x))}\\&amp;=\lim \limits_{x\to 0}\dfrac{\sin^2(x)}{x}\times\dfrac{1}{1+\cos(x)}\\&amp;=\lim \limits_{x\to 0}\sin(x)\times \dfrac{\sin(x)}{x}\times\dfrac{1}{1+\cos(x)}\\&amp;=0\times 1\times \dfrac{1}{1+1}\\&amp;=0\end{aligned}\]</span> 所以得到重要结论 <span class="math display">\[\boxed{\lim \limits_{x\to 0}\dfrac{1-\cos(x)}{x}=0}\]</span> 考虑另一个极限 <span class="math display">\[\lim \limits_{x\to 0}\dfrac{1-\cos(x)}{x^2}\]</span> 借助上面的思路，不难得到 <span class="math display">\[\begin{aligned}\lim \limits_{x\to 0}\dfrac{1-\cos(x)}{x^2}&amp;=\lim \limits_{x\to0}\dfrac{1-\cos(x)}{x^2}\times \dfrac{1+\cos(x)}{1+\cos(x)}\\&amp;=\lim \limits_{x\to 0}\dfrac{1-\cos^2(x)}{x^2}\times\dfrac{1}{1+cos(x)}\\&amp;=\lim \limits_{x\to 0}(\dfrac{\sin(x)}{x})^2\times\dfrac{1}{1+\cos(x)}\\&amp;=1^2\times \dfrac{1}{1+1}\\&amp;=\dfrac12\end{aligned}\]</span></p><h2 id="正切函数的极限">3.3   正切函数的极限</h2><p>考虑极限 <span class="math display">\[\lim \limits_{x\to 0}\dfrac{\tan(x)}{x}\]</span> 作变换 <spanclass="math inline">\(\tan(x)=\dfrac{\sin(x)}{\cos(x)}\)</span> 可得<span class="math display">\[\begin{aligned}\lim \limits_{x\to 0}\dfrac{\tan(x)}{x}&amp;=\lim \limits_{x\to0}\dfrac{\dfrac{\sin(x)}{\cos(x)}}{x}\\&amp;=\lim \limits_{x\to 0}\dfrac{sin(x)}{x}\times \dfrac1{cos(x)}\\&amp;=1\times \dfrac11\\&amp;=1\end{aligned}\]</span> 这也就证明了 <span class="math display">\[\boxed{\lim \limits_{x\to 0}\dfrac{\tan(x)}{x}=1}\]</span></p><h1 id="四三角函数的导数">四、三角函数的导数</h1><p>借助第三节的推论，可以推出六种三角函数的导数。本节将对它们分别推出与证明。</p><p>下面是六种三角函数的导数对照表： <span class="math display">\[\begin{array}{|c|c|}f(x)=&amp;f&#39;(x)=\\\sin(x)&amp;\cos(x)\\\cos(x)&amp;-\sin(x)\\\tan(x)&amp;\sec^2(x)\\\cot(x)&amp;-\csc^2(x)\\\sec(x)&amp;\sec(x)\tan(x)\\\csc(x)&amp;-\csc(x)\cot(x)\end{array}\]</span></p><h2 id="正弦函数的导数">4.1   正弦函数的导数</h2><p>借助第三节中的两个极限 <span class="math display">\[\lim \limits_{h\to 0}\dfrac{\sin(h)}{h}=1\quad,\quad \lim \limits_{h\to0}\dfrac{1-\cos(h)}{h}=0\]</span> 直接使用导数定义与和角公式，令 <spanclass="math inline">\(f(x)=\sin(x)\)</span>，推出： <spanclass="math display">\[\begin{aligned}f&#39;(x)&amp;=\lim \limits_{h\to 0}\dfrac{f(x+h)-f(x)}{h}=\lim\limits_{h\to 0}\dfrac{\sin(x+h)-\sin(h)}{h}\\&amp;=\lim \limits_{h\to0}\dfrac{\sin(x)\cos(h)+\cos(x)\sin(h)-\sin(x)}h\\&amp;=\lim \limits_{h\to 0}\dfrac{\sin(x)(\cos(h)-1)+\cos(x)\sin(h)}h\\&amp;=\lim \limits_{h\to 0}(\sin(x)\times\dfrac{\cos(h)-1}h+\cos(x)\times \dfrac{\sin(h)}h)\\&amp;=\sin(x)\times 0+\cos(x)\times 1\\&amp;=\cos(x)\end{aligned}\]</span> 得出其导数为 <span class="math display">\[\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\sin(x)=\cos(x)}\]</span></p><h2 id="余弦函数的导数">4.2   余弦函数的导数</h2><p>令 <spanclass="math inline">\(f(x)=\cos(x)\)</span>，借助和角公式可得得到：<span class="math display">\[\begin{aligned}f&#39;(x)&amp;=\lim \limits_{h\to 0}\dfrac{f(x+h)-f(x)}h=\lim\limits_{h\to 0}\dfrac{\cos(x+h)-\cos(x)}h\\&amp;=\lim \limits_{h\to0}\dfrac{\cos(x)\cos(h)-\sin(x)\sin(h)-\cos(x)}h\\&amp;=\lim \limits_{h\to 0}\cos(x)\times\dfrac{\cos(h)-1}h-\sin(x)\times \dfrac{\sin(h)}h\\&amp;=\cos(x)\times 0-\sin(x)\times 1\\&amp;=-\sin(x)\end{aligned}\]</span> 得出其导数为 <span class="math display">\[\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\cos(x)=-\sin(x)}\]</span></p><h2 id="正切函数的导数">4.3   正切函数的导数</h2><p>令 <spanclass="math inline">\(y=\tan(x)=\dfrac{\sin(x)}{\cos(x)}\)</span>，再令<spanclass="math inline">\(u=\sin(x),v=\cos(x)\)</span>，使用商法则得到：<span class="math display">\[\begin{aligned}\dfrac{\mathrm{d}y}{\mathrm{d}x}&amp;=\dfrac{v\dfrac{\mathrm{d}u}{\mathrm{d}x}-u\dfrac{\mathrm{d}v}{\mathrm{d}x}}{v^2}=\dfrac{\cos(x)\cos(x)-\sin(x)(-\sin(x))}{\cos^2(x)}\\&amp;=\dfrac{1}{\cos^2(x)}\\&amp;=\sec^2(x)\end{aligned}\]</span> 得出其导数为 <span class="math display">\[\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\tan(x)=\sec^2(x)}\]</span></p><h2 id="余切函数的导数">4.4   余切函数的导数</h2><p>令 <spanclass="math inline">\(y=\cot(x)=\dfrac{\cos(x)}{\sin(x)}\)</span>，再令<spanclass="math inline">\(u=\cos(x),v=\sin(x)\)</span>，使用商法则得到：<span class="math display">\[\begin{aligned}\dfrac{\mathrm{d}y}{\mathrm{d}x}&amp;=\dfrac{v\dfrac{\mathrm{d}u}{\mathrm{d}x}-u\dfrac{\mathrm{d}v}{\mathrm{d}x}}{v^2}=\dfrac{\sin(x)(-\sin(x))-\cos(x)\cos(x)}{\sin^2(x)}\\&amp;=\dfrac{-1}{\sin^2(x)}\\&amp;=-\csc^2(x)\end{aligned}\]</span> 得到其导数为 <span class="math display">\[\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\cot(x)=\csc^2(x)}\]</span></p><h2 id="正割函数的导数">4.5   正割函数的导数</h2><p>令 <spanclass="math inline">\(y=\sec(x)=\dfrac1{\cos(x)}\)</span>，再令 <spanclass="math inline">\(u=\cos(x)\)</span>，则 <spanclass="math inline">\(y=\dfrac1{u}\)</span>，使用链式求导法则得到：<span class="math display">\[\begin{aligned}\dfrac{\mathrm{d}y}{\mathrm{d}x}&amp;=\dfrac{\mathrm{d}y}{\mathrm{d}u}\dfrac{\mathrm{d}u}{\mathrm{d}x}=-\dfrac1{\cos^2(x)}(-\sin(x))\\&amp;=\dfrac1{\cos(x)}\times\dfrac{\sin(x)}{\cos(x)}\\&amp;=\sec(x)\tan(x)\end{aligned}\]</span> 得出其导数为 <span class="math display">\[\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\sec(x)=\sec(x)\tan(x)}\]</span></p><h2 id="余割函数的导数">4.6   余割函数的导数</h2><p>令 <spanclass="math inline">\(y=\csc(x)=\dfrac1{\sin(x)}\)</span>，再令 <spanclass="math inline">\(u=\sin(x)\)</span>，则 <spanclass="math inline">\(y=\dfrac1{u}\)</span>，使用链式求导法则得到：<span class="math display">\[\begin{aligned}\dfrac{\mathrm{d}y}{\mathrm{d}x}&amp;=\dfrac{\mathrm{d}y}{\mathrm{d}u}\dfrac{\mathrm{d}u}{\mathrm{d}x}=-\dfrac1{\sin^2(x)}\cos(x)\\&amp;=-\dfrac1{\sin(x)}\times\dfrac{\cos(x)}{\sin(x)}\\&amp;=-\csc(x)\cot(x)\end{aligned}\]</span> 得出其导数为 <span class="math display">\[\boxed{\dfrac{\mathrm{d}}{\mathrm{d}x}\csc(x)=-\csc(x)\cot(x)}\]</span></p>]]></content>
      
      
      <categories>
          
          <category> 微积分学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极限导论与微分</title>
      <link href="/post/449b1b41ce2d.html"/>
      <url>/post/449b1b41ce2d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>微积分学习笔记 - 01 极限导论与微分</p><p>进入 <ahref="/categories/微积分学习笔记/">传送门</a>，阅读刊载在专栏《微积分阅读笔记》下的全部文章。</p></blockquote><h1 id="一极限导论">一、极限导论</h1><h2 id="极限的定义">1.1   极限的定义</h2><p><strong>极限</strong>：对于函数 <spanclass="math inline">\(f(x)\)</span>，任选 <spanclass="math inline">\(\epsilon&gt;0\)</span>，可以任选 <spanclass="math inline">\(\delta&gt;0\)</span>，使得：对于所有满足 <spanclass="math inline">\(0&lt;|x-a|&lt;\delta\)</span> 的 <spanclass="math inline">\(x\)</span>，有 <spanclass="math inline">\(|f(x)-L|&lt;\epsilon\)</span>，则称函数 <spanclass="math inline">\(f(x)\)</span> 在 <spanclass="math inline">\(a\)</span> 处的极限为 <spanclass="math inline">\(L\)</span>，记作： <span class="math display">\[\lim\limits_{x\rightarrow a}=L\]</span> 上述定义可以简单理解成，在变量 <spanclass="math inline">\(x\)</span> 接近于 <spanclass="math inline">\(a\)</span> 时，函数值无限接近于 <spanclass="math inline">\(L\)</span>。</p><p>例如，对于函数 <spanclass="math inline">\(f(x)=x+1\)</span>，通过分析函数图像可知，有 <spanclass="math inline">\(\lim\limits_{x\rightarrow 2}=3\)</span>。</p><p>再例如，对于函数 <spanclass="math inline">\(g(x)=\begin{cases}x-1&amp;\text{如果}x\not=2\\3&amp;\text{如果}x=2\end{cases}\)</span>，事实上<span class="math inline">\(\lim\limits_{x\rightarrow2}=1\)</span>。这是因为只有那些在 <span class="math inline">\(x\)</span>接近于 <span class="math inline">\(2\)</span> 时的 <spanclass="math inline">\(g(x)\)</span> 的值，才是它的极限。</p><p><strong>左极限</strong>：与极限的定义类似地，只考虑 <spanclass="math inline">\(x&lt;a\)</span>的部分，函数在这部分中，自变量接近于 <spanclass="math inline">\(a\)</span> 的时候，函数值的接近值，记作： <spanclass="math display">\[\lim\limits_{x\rightarrow a^{-}} = L\]</span> <strong>右极限</strong>：只考虑 <spanclass="math inline">\(x&gt;a\)</span>的部分，函数在这部分中，之变量接近于 <spanclass="math inline">\(a\)</span> 的时候，函数值的接近值，记作： <spanclass="math display">\[\lim\limits_{x\rightarrow a^{+}}=L\]</span> 例如，函数 <span class="math inline">\(f(x)=x^{-1}\)</span>，在 <span class="math inline">\(0\)</span> 附近的极限为：<spanclass="math inline">\(\lim\limits_{x\rightarrow0^{-}}=-\infty,\lim\limits_{x\rightarrow 0^{+}}=\infty\)</span>。发现<span class="math inline">\(0\)</span> 附近的左极限和右极限不相等，所以<span class="math inline">\(f(x)\)</span> 在 <spanclass="math inline">\(0\)</span> 附近的极限不存在。</p><p>通过总结发现，极限存在当且仅当此处的<strong>左极限和右极限存在且相等</strong>。也就是说，<span class="math display">\[\lim\limits_{x\rightarrow a^{-}}=\lim\limits_{x\rightarrow a^{+}}=L\]</span> 等价于 <span class="math display">\[\lim\limits_{x\rightarrow a}=L\]</span> 相反的，<strong>极限不存在</strong>，记作 <spanclass="math display">\[\lim\limits_{x\rightarrow a}\text{DNE}\]</span></p><h2 id="三明治定理夹逼定理">1.2   三明治定理(夹逼定理)</h2><p>如果对于所有在 <span class="math inline">\(a\)</span> 附近的 <spanclass="math inline">\(x\)</span> 都有 <spanclass="math inline">\(g(x)\leq f(x)\leq h(x)\)</span>，且 <spanclass="math inline">\(\lim\limits_{x\rightarrowa}g(x)=\lim\limits_{x\rightarrow a}h(x)=L\)</span>，则 <spanclass="math display">\[\lim\limits_{x\rightarrow a}f(x)=L\]</span></p><h2 id="求解-xrightarrow-a-时多项式的极限问题">1.3   求解 <spanclass="math inline">\(x\rightarrow a\)</span> 时多项式的极限问题</h2><p><strong>例题1</strong>：求解极限 <span class="math display">\[\lim\limits_{x\rightarrow -1}\frac{x^2-3x+2}{x-2}\]</span> 因为函数定义域包含 <spanclass="math inline">\(-1\)</span>，可以将 <spanclass="math inline">\(x=-1\)</span> 带入表达式中，得到这个极限为 <spanclass="math inline">\(-2\)</span>。</p><p><strong>例题2</strong>：求解极限 <span class="math display">\[\lim\limits_{x\rightarrow 2}\frac{x^2-3x+2}{x-2}\]</span> 我们发现直接将 <span class="math inline">\(x=2\)</span>带入，分母为 <spanclass="math inline">\(0\)</span>，不能这样求解。考虑对其因式分解，有<span class="math display">\[\lim\limits_{x\rightarrow2}\frac{x^2-3x+2}{x-2}=\lim\limits_{x\rightarrow2}\frac{(x-2)(x-1)}{x-2}=\lim\limits_{x\rightarrow 2}(x-1)=1\]</span> <strong>例题3</strong>：求解极限 <span class="math display">\[\lim\limits_{x\rightarrow 1}\frac{2x^2-x-6}{x(x-1)^3}\]</span> 我们不能直接带入 <spanclass="math inline">\(x=1\)</span>，尝试进行<strong>符号分析</strong>。其关键因子是<span class="math inline">\((x-1)^3\)</span>，当 <spanclass="math inline">\(x\rightarrow 1^+\)</span>时，其为正，并代入整个式子分析符号，有<spanclass="math inline">\(\frac{(-)}{(+)(+)}=(-)\)</span>；当 <spanclass="math inline">\(x\rightarrow 1^-\)</span>时，其为负，分析式子的符号，有<spanclass="math inline">\(\frac{(-)}{(+)(-)}=(+)\)</span>。因此，这个极限<strong>不存在</strong>，但是存在左极限和右极限：<span class="math display">\[\lim\limits_{x\rightarrow 1^-}\frac{2x^2-x-6}{x(x-1)^3}=-\infty \qquad\lim\limits_{x\rightarrow 1+}\frac{2x^2-x-6}{x(x-1)^3}=\infty\]</span> <strong>例题4</strong>：求解极限 <span class="math display">\[\lim\limits_{x\rightarrow 5}\frac{\sqrt{x^2-9}-4}{x-5}\]</span> 不能直接带入 <spanclass="math inline">\(x=5\)</span>，考虑进行<strong>分子有理化</strong>，即分子分母共同乘上<span class="math inline">\(\sqrt{x^2-9}-4\)</span>的<strong>共轭表达式</strong>，有 <span class="math display">\[\begin{aligned}\lim\limits_{x\rightarrow5}\frac{\sqrt{x^2-9}-4}{x-5}&amp;=\lim\limits_{x\rightarrow5}\frac{\sqrt{x^2-9}-4}{x-5}\times\frac{\sqrt{x^2-9}+4}{\sqrt{x^2-9}+4}\\&amp;=\lim\limits_{x\rightarrow 5}\frac{x^2-25}{(x-5)(\sqrt{x^2-9}+4)}\\&amp;=\lim\limits_{x\rightarrow 5}\frac{x+5}{\sqrt{x^2-9}+4}\\&amp;=\frac{5}{4}\end{aligned}\]</span></p><h2 id="求解-xrightarrow-infty-时多项式的极限问题">1.4   求解 <spanclass="math inline">\(x\rightarrow \infty\)</span>时多项式的极限问题</h2><p>对于一个有理函数的极限 <span class="math display">\[\lim\limits_{x\rightarrow \infty}\frac{p(x)}{q(x)}\]</span> 令 <span class="math inline">\(p_L(x)\)</span> 为函数 <spanclass="math inline">\(p(x)\)</span> 的最高次项，我们有 <spanclass="math display">\[\lim\limits_{x\rightarrow \infty}\frac{p(x)}{p_L(x)}=1\]</span> 事实上，对于任意的 <spanclass="math inline">\(n&gt;0\)</span>，<spanclass="math inline">\(C\)</span> 为常数，有 <spanclass="math display">\[\lim\limits_{x\rightarrow \infty}\frac{C}{x^n}=0\]</span> <strong>例题5</strong>：求解极限 <span class="math display">\[\lim\limits_{x\rightarrow \infty}\frac{x-8x^4}{7x^4+5x^3+2000x^2-6}\]</span> 我们找到分子的首项 <spanclass="math inline">\(-8x^4\)</span>，分母的首项 <spanclass="math inline">\(7x^4\)</span>，有 <span class="math display">\[\begin{aligned}\lim\limits_{x\rightarrow\infty}\frac{x-8x^4}{7x^4+5x^3+2000x^2-6}&amp;=\lim\limits_{x\rightarrow\infty}\frac{\dfrac{x-8x^4}{-8x^4}\times(-8x^4)}{\dfrac{7x^4+5x^3+2000x^2-6}{7x^4}\times 7x^4}\\&amp;=\lim\limits_{x\rightarrow\infty}\frac{-\dfrac{1}{8x^3}+1}{1+\dfrac{5}{7x}+\dfrac{2000}{7x^2}-\dfrac{6}{7x^4}}\times  \dfrac{-8x^4}{7x^4}\\&amp;=\frac{0+1}{1+0+0-0}\times \frac{-8}{7}\\&amp;=-\frac{8}{7}\end{aligned}\]</span> 一般地，考虑极限 <span class="math display">\[\lim\limits_{x\rightarrow \infty}\frac{p(x)}{q(x)}\]</span> 其中 <span class="math inline">\(p,q\)</span>为多项式，我们有：</p><ol type="1"><li>如果 <span class="math inline">\(p\)</span> 的次数等于 <spanclass="math inline">\(q\)</span>的次数，则极限是<strong>有限的且非零</strong>；</li><li>如果 <span class="math inline">\(p\)</span> 的次数大于 <spanclass="math inline">\(q\)</span> 的次数，则极限是 <spanclass="math inline">\(\infty\)</span> <strong>或</strong> <spanclass="math inline">\(-\infty\)</span>；</li><li>如果 <span class="math inline">\(p\)</span> 的次数等于 <spanclass="math inline">\(q\)</span> 的次数，则极限是 <spanclass="math inline">\(0\)</span>。</li></ol><h2 id="求解-xrightarrow--infty-时多项式的极限问题">1.5   求解 <spanclass="math inline">\(x\rightarrow -\infty\)</span>时多项式的极限问题</h2><p>求解 <span class="math inline">\(x\rightarrow -\infty\)</span>时的极限，答题思路和上面相仿，特殊地，需要考虑被开方数的<strong>正负性</strong>。</p><p><strong>例题6</strong>：求解极限 <span class="math display">\[\lim\limits_{x\rightarrow -\infty}\frac{\sqrt{4x^6+8}}{2x^3+6x+1}\]</span> 可以找到分母的首项 <spanclass="math inline">\(2x^3\)</span>，分子的首项 <spanclass="math inline">\(\sqrt{4x^6}\)</span>，特别注意 <spanclass="math inline">\(x&lt;0\)</span> 时，<spanclass="math inline">\(\sqrt{4x^6}=-2x^3\)</span>。有 <spanclass="math display">\[\begin{aligned}\lim\limits_{x\rightarrow-\infty}\frac{\sqrt{4x^6+8}}{2x^3+6x+1}&amp;=\lim\limits_{x\rightarrow\infty}\frac{\dfrac{\sqrt{4x^6+8}}{\sqrt{4x^6}}\times\sqrt{4x^6}}{\dfrac{2x^3+6x+1}{2x^3}\times 2x^3}\\&amp;=\lim\limits_{x\rightarrow\infty}\frac{\sqrt{\dfrac{4x^6+8}{4x^6}}}{\dfrac{2x^3+6x+1}{2x^3}}\times\frac{\sqrt{4x^6}}{2x^3}\\&amp;=\lim\limits_{x\rightarrow\infty}\frac{\sqrt{1+\dfrac{8}{4x^6}}}{1+\dfrac{6x}{2x^3}+\dfrac{1}{2x^3}}\times\frac{-2x^3}{2x^3}\\&amp;=\frac{\sqrt{1+0}}{1+0+0}\times (-1)\\&amp;=-1\end{aligned}\]</span></p><h1 id="二求解微分问题">二、求解微分问题</h1><h2 id="幂函数的导数">2.1   幂函数的导数</h2><p>事实上，当 <span class="math inline">\(a\)</span> 是任意实数时，<span class="math display">\[\frac{\mathrm{d}}{\mathrm{d}x}(x^a)=ax^{a-1}\]</span> 特殊地，如果 <span class="math inline">\(C\)</span>是常数，那么 <spanclass="math inline">\(\dfrac{\mathrm{d}}{\mathrm{d}x}(C)=0\)</span>。</p><p>如果 <span class="math inline">\(a=1\)</span>，有 <spanclass="math inline">\(\dfrac{\mathrm{d}}{\mathrm{d}x}(x)=1\)</span>。</p><p><strong>例子</strong>   <spanclass="math inline">\(\dfrac{\mathrm{d}}{\mathrm{d}x}(x^\frac{1}{3})=\dfrac{1}{3}x^{-\frac{2}{3}}\)</span>。</p><h2 id="求导法则">2.2   求导法则</h2><p>下面内容默认 <span class="math inline">\(f&#39;(x)\)</span> 为函数<span class="math inline">\(f(x)\)</span> 的导数，<spanclass="math inline">\(a\)</span> 为任意实数。</p><h3 id="函数的常数倍">2.2.1   函数的常数倍</h3><p>若 <span class="math inline">\(k\)</span> 为任意实数，<spanclass="math inline">\(f(x)=kx^a\)</span>，其导数为 <spanclass="math display">\[f&#39;(x)=kax^{a-1}\]</span></p><h3 id="函数的和与差">2.2.2   函数的和与差</h3><p>若 <span class="math inline">\(f(x)=g(x)\pm h(x)\)</span>，其导数为<span class="math display">\[f&#39;(x)=g&#39;(x)\pm h&#39;(x)\]</span></p><h3 id="乘积法则">2.2.3   乘积法则</h3><p><strong>乘积法则</strong>   若 <spanclass="math inline">\(h(x)=f(x)g(x)\)</span>，则其导数为 <spanclass="math display">\[h&#39;(x)=f&#39;(x)g(x)+f(x)g&#39;(x)\]</span> 用微分的形式表示，若 <spanclass="math inline">\(y=uv\)</span>，则 <span class="math display">\[\dfrac{\mathrm{d}y}{\mathrm{d}x}=v\dfrac{\mathrm{d}u}{\mathrm{d}x}+u\dfrac{\mathrm{d}v}{\mathrm{d}x}\]</span> 乘积法则可推广。若 <spanclass="math inline">\(y=uvw\)</span>，则 <span class="math display">\[\dfrac{\mathrm{d}y}{\mathrm{d}x}=\dfrac{\mathrm{d}u}{\mathrm{d}x}vw+u\dfrac{\mathrm{d}v}{\mathrm{d}x}w+uv\dfrac{\mathrm{d}w}{\mathrm{d}x}\]</span></p><h3 id="商法则">2.2.4   商法则</h3><p><strong>商法则</strong>   若函数 <spanclass="math inline">\(h(x)=\dfrac{f(x)}{g(x)}\)</span>，则其导数为 <spanclass="math display">\[h&#39;(x)=\dfrac{f&#39;(x)g(x)-f(x)g&#39;(x)}{(g(x))^2}\]</span> 用微分的形式表示，若 <span class="math inline">\(y=\dfracuv\)</span>，则 <span class="math display">\[\dfrac{\mathrm{d}y}{\mathrm{d}x}=\dfrac{v\dfrac{\mathrm{d}u}{\mathrm{d}x}-u\dfrac{\mathrm{d}v}{\mathrm{d}x}}{v^2}\]</span></p><h3 id="链式求导法则">2.2.5   链式求导法则</h3><p><strong>链式求导法则</strong>   若函数 <spanclass="math inline">\(h(x)=f(g(x))\)</span>，则其导数为 <spanclass="math display">\[h&#39;(x)=f&#39;(g(x))g&#39;(x)\]</span> 用微分的形式表示，若 <span class="math inline">\(y\)</span> 是<span class="math inline">\(u\)</span> 的函数，<spanclass="math inline">\(u\)</span> 是 <spanclass="math inline">\(x\)</span> 的函数，则 <spanclass="math display">\[\dfrac{\mathrm{d}y}{\mathrm{d}x}=\dfrac{\mathrm{d}y}{\mathrm{d}u}\dfrac{\mathrm{d}u}{\mathrm{d}x}\]</span> 链式求导法则可以推广，若 <spanclass="math inline">\(y\)</span> 是 <spanclass="math inline">\(u\)</span> 的函数，<spanclass="math inline">\(u\)</span> 是 <spanclass="math inline">\(v\)</span> 的函数，<spanclass="math inline">\(v\)</span> 是 <spanclass="math inline">\(x\)</span> 的函数，则 <spanclass="math display">\[\dfrac{\mathrm{d}y}{\mathrm{d}x}=\dfrac{\mathrm{d}y}{\mathrm{d}u}\dfrac{\mathrm{d}u}{\mathrm{d}v}\dfrac{\mathrm{d}v}{\mathrm{d}x}\]</span></p>]]></content>
      
      
      <categories>
          
          <category> 微积分学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做题笔记[AGC002]</title>
      <link href="/post/2eaf91bf2ff2.html"/>
      <url>/post/2eaf91bf2ff2.html</url>
      
        <content type="html"><![CDATA[<p>做题笔记[AGC002]</p><h1 id="a---range-product">A - Range Product</h1><blockquote><p>标签：数学</p><p>难度：★☆☆☆☆</p></blockquote><h2 id="题目大意">题目大意</h2><p>给你两个整数 <span class="math inline">\(a\)</span> 和 <spanclass="math inline">\(b\)</span> (<spanclass="math inline">\(a≤b\)</span>)。</p><p>判断 <span class="math inline">\(\prod\limits_{i=a}^b i\)</span>是正、负还是零。</p><h2 id="数据范围">数据范围</h2><p><span class="math inline">\(-10^9\le a\le b\le 10^9\)</span>。</p><h2 id="解题思路">解题思路</h2><p>判断正负性，经过 <span class="math inline">\(0\)</span> 的乘积为<span class="math inline">\(0\)</span>，再判断负数个数即可。</p><h2 id="参考代码">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;=<span class="number">0</span>&amp;&amp;b&gt;=<span class="number">0</span>) cout&lt;&lt;<span class="string">&quot;Zero&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a&gt;<span class="number">0</span>||(b-a+<span class="number">1</span>)%<span class="number">2</span>==<span class="number">0</span>) cout&lt;&lt;<span class="string">&quot;Positive&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;Negative&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="b---box-and-ball">B - Box and Ball</h1><blockquote><p>标签：思维</p><p>难度：★★☆☆☆</p></blockquote><h2 id="题目大意-1">题目大意</h2><p>我们有<span class="math inline">\(N\)</span>个盒子，一开始，<spanclass="math inline">\(1\)</span>号盒子里有一个红球，其他每个盒子里都有一个白球。</p><p>逐一执行给定的 <span class="math inline">\(M\)</span> 操作。在第<span class="math inline">\(i\)</span> 次操作中，他会从 <spanclass="math inline">\(x_i\)</span> 盒子中随机选取一个球，然后将其放入<span class="math inline">\(y_i\)</span> 盒子中。</p><p>求所有操作完成后，可能装有红球的盒子数。</p><h2 id="数据范围-1">数据范围</h2><p><span class="math inline">\(2\le N,M\le 10^5,1\le x_i,y_i\leN\)</span>。</p><h2 id="解题思路-1">解题思路</h2><p>判断 <span class="math inline">\(1\)</span>号球可能到达的位置，每次移动将 <span class="math inline">\(y\)</span>盒子打上“可能”的标记，如果 <span class="math inline">\(x\)</span>盒子空了，就撤销 <span class="math inline">\(x\)</span>的“可能”标记即可。</p><h2 id="参考代码-1">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="type">int</span> n,m,sz[MAXN];</span><br><span class="line"><span class="type">bool</span> f[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sz[i]=<span class="number">1</span>;</span><br><span class="line">    f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        sz[x]--;</span><br><span class="line">        sz[y]++;</span><br><span class="line">        f[y]|=f[x];</span><br><span class="line">        <span class="keyword">if</span>(!sz[x]) f[x]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans+=f[i];</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="c---knot-puzzle">C - Knot Puzzle</h1><blockquote><p>标签：贪心、构造</p><p>难度：★★★☆☆</p></blockquote><h2 id="题目大意-2">题目大意</h2><p>我们有 <span class="math inline">\(N\)</span> 根绳子，第 <spanclass="math inline">\(i\)</span> 段的长度是 <spanclass="math inline">\(a_i\)</span>。起初，每条和相邻的绳子打上结，形成一条有<span class="math inline">\(N-1\)</span>个结的长绳。尝试通过重复执行以下操作来解开所有绳结：</p><ul><li>选择一条总长度至少为 <span class="math inline">\(L\)</span>的（相连）绳子，然后解开其中一个绳结。</li></ul><p>通过正确的操作是否可以解开所有的 <spanclass="math inline">\(N-1\)</span>个绳结？如果答案是肯定的，请找出一种可能的解结顺序。</p><h2 id="数据范围-2">数据范围</h2><p><span class="math inline">\(2\le N\le 10^5,1\le L,a_i\le10^9\)</span>。</p><h2 id="解题思路-2">解题思路</h2><p>考虑贪心。如果全部能解开，则最后解开的那一对相邻的绳子长度一定大于等于<spanclass="math inline">\(L\)</span>。我们找到这对绳子，从两边开始解开所有的绳子。</p><p>如果没有这样一对相邻的绳子，则判断无解。</p><h2 id="参考代码-2">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="type">int</span> n,len,a[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;len;</span><br><span class="line">    <span class="type">int</span> s=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">if</span>(a[i]+a[i<span class="number">-1</span>]&gt;=a[s]+a[s<span class="number">-1</span>]) s=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[s]+a[s<span class="number">-1</span>]&lt;len)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Impossible&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Possible&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;s<span class="number">-1</span>;i++) cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=s;i--) cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;s<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="d---stamp-rally">D - Stamp Rally</h1><blockquote><p>标签：图论、kruskal 重构树</p><p>难度：★★★★☆</p></blockquote><h2 id="题目大意-3">题目大意</h2><p>有一个 <span class="math inline">\(N\)</span> 个顶点和 <spanclass="math inline">\(M\)</span> 条边的无向连通图。一共有 <spanclass="math inline">\(Q\)</span> 此询问，每次询问给定两个点 <spanclass="math inline">\(x,y\)</span>，要求是同这两个点开始走，一共走 <spanclass="math inline">\(z\)</span>个点，最小化所经过的边的权值最大值。</p><h2 id="数据范围-3">数据范围</h2><p><span class="math inline">\(3\le N,Q\le 10^5,N−1\le M\le 10^5,1\lea_i&lt;b_i\le N\)</span>。</p><h2 id="解题思路-3">解题思路</h2><p>因为要最小化路径最大权值，想到构建最小生成树，这样能保证连通图的最大边权最小。</p><p>因为要从两个顶点开始，一共走 <span class="math inline">\(z\)</span>条边，考虑构建 kruskal 重构树，利用其<strong>一条路径的最大边权在两点的LCA 位置处</strong>的性质，找到 <span class="math inline">\(x,y\)</span>的最近公共祖先，再判断 <span class="math inline">\(z\)</span>是否满足即可。</p><p>判断 <span class="math inline">\(z\)</span>是否满足，只需要再重构树上往祖先走的时候判断子树叶子节点个数即可。可利用倍增加速。时间复杂度<span class="math inline">\(O(Q\log n)\)</span>。</p><h2 id="参考代码-3">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 200005</span></span><br><span class="line"><span class="type">int</span> n,m,dsu[MAXN],w[MAXN],f[MAXN][<span class="number">30</span>],tot,root,lim,dep[MAXN],sz[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y,z;</span><br><span class="line">&#125;edge[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.z&lt;y.z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dsu[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> dsu[x]=<span class="built_in">find</span>(dsu[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    f[u][<span class="number">0</span>]=fa;</span><br><span class="line">    dep[u]=dep[fa]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(g[u].<span class="built_in">size</span>()==<span class="number">1</span>) sz[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:g[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v,u);</span><br><span class="line">        sz[u]+=sz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=lim;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(w[f[x][i]]&lt;=c) x=f[x][i];</span><br><span class="line">        <span class="keyword">if</span>(w[f[y][i]]&lt;=c) y=f[y][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span> sz[x];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> sz[x]+sz[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;edge[i].x&gt;&gt;edge[i].y;</span><br><span class="line">        edge[i].z=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(edge+<span class="number">1</span>,edge+<span class="number">1</span>+m,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">2</span>;i++) dsu[i]=i;</span><br><span class="line">    tot=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> t=<span class="number">1</span>,i=<span class="number">1</span>;t&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x=edge[i].x,y=edge[i].y;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(x)!=<span class="built_in">find</span>(y))&#123;</span><br><span class="line">            t++,tot++;</span><br><span class="line">            g[<span class="built_in">find</span>(x)].<span class="built_in">push_back</span>(tot);</span><br><span class="line">            g[tot].<span class="built_in">push_back</span>(<span class="built_in">find</span>(x));</span><br><span class="line">            g[<span class="built_in">find</span>(y)].<span class="built_in">push_back</span>(tot);</span><br><span class="line">            g[tot].<span class="built_in">push_back</span>(<span class="built_in">find</span>(y));</span><br><span class="line">            w[tot]=edge[i].z;</span><br><span class="line">            dsu[<span class="built_in">find</span>(x)]=tot;</span><br><span class="line">            dsu[<span class="built_in">find</span>(y)]=tot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    root=tot;</span><br><span class="line">    <span class="built_in">dfs</span>(root,<span class="number">0</span>);</span><br><span class="line">    lim=<span class="built_in">log2</span>(n*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=lim;j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">2</span>;i++)&#123;</span><br><span class="line">            f[i][j]=f[f[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> Q;</span><br><span class="line">    cin&gt;&gt;Q;</span><br><span class="line">    w[<span class="number">0</span>]=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">while</span>(Q--)&#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">1</span>,r=m;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>(x,y,mid)&gt;=z) r=mid;</span><br><span class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="e---candy-piles">E - Candy Piles</h1><blockquote><p>标签：博弈论、思维</p><p>难度：★★★★★</p></blockquote><h2 id="题目大意-4">题目大意</h2><p>桌子上有 <span class="math inline">\(N\)</span> 堆糖果，第 <spanclass="math inline">\(i\)</span> 堆里有 <spanclass="math inline">\(a_i\)</span> 颗糖果。</p><p>两个人轮流玩游戏，在每个回合中，当前玩家必须执行以下两个操作中的一个：</p><ol type="1"><li>选择剩余糖果数量最多的一堆，然后吃掉这一堆中的所有糖果。</li><li>从每堆糖果中吃掉一颗或多颗糖果。</li></ol><p>吃掉桌上最后一颗糖果的玩家输掉游戏。如果双方都以最佳方式玩游戏，请确定哪一方会获胜。</p><h2 id="数据范围-4">数据范围</h2><p><span class="math inline">\(1\le N\le 10^5,1\le a_i\le10^9\)</span>。</p><h2 id="解题思路-4">解题思路</h2><p>很巧妙的人类智慧题！</p><p>我们考虑将这个棋局表示为一个二维平面，第 <spanclass="math inline">\(i\)</span> 列表示第 <spanclass="math inline">\(i\)</span> 堆糖果，每列从下到上有 <spanclass="math inline">\(j\)</span> 个添上的格子，表示第 <spanclass="math inline">\(i\)</span> 堆糖果有 <spanclass="math inline">\(j\)</span>个。如下图：左图表示拿走最多的一堆（操作 1），右图表示每堆拿走一颗（操作2）。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=2b5yyZIi" /></p><p>实际上，我们将问题转化成了：每次从左或下消除一列或一行，直到无法消去。问谁会赢。</p><p>将消去一列操作视为向右走一格，消去一行操作视为向上走一格，可以表示成下图。双方交替进行，红色表示先手，蓝色表示后手。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=22cFH3sJ" /></p><p>可以看到，只要走到边界，就会失败，所以给边界上的点一个“必败”的标记，考虑其他的点：</p><ul><li>如果这个点上方或右方有必胜点，则此点必胜（对于先手而言，下同）；</li><li>否则此点必败。</li></ul><p>如下图所示，红点为必败点，蓝点为必胜点。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=yRKKGDNu" /></p><p>不难发发现，<strong>一个点和其右上方的点属性相同</strong>。利用这个性质，我们可以从起点一直向右上方走，直到不能走，判断这个点的胜负性。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=cIGm5e6V" /></p><p>发现，对于靠近边界，不能向右上方走的点，如果其上方或右方能延伸的格子数有一个为奇数，则为必胜点，否则先手必败。</p><h2 id="参考代码-4">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="type">int</span> n,a[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line">    <span class="type">int</span> p=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(a[p+<span class="number">1</span>]&gt;=p+<span class="number">1</span>) p++;</span><br><span class="line">    <span class="type">int</span> p1=<span class="number">0</span>,p2=a[p]-p;</span><br><span class="line">    <span class="keyword">while</span>(a[p+p1+<span class="number">1</span>]&gt;=p) p1++;</span><br><span class="line">    <span class="keyword">if</span>((p1|p2)&amp;<span class="number">1</span>) cout&lt;&lt;<span class="string">&quot;First&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;Second&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="f---leftmost-ball">F - Leftmost Ball</h1><blockquote><p>标签：组合数学、动态规划</p><p>难度：★★★★★</p></blockquote><h2 id="题目大意-5">题目大意</h2><p>一共有 <span class="math inline">\(N×K\)</span> 个球，每种他喜欢的<span class="math inline">\(N\)</span> 种颜色有<spanclass="math inline">\(K\)</span>个。他会把所有的球从左到右任意排成一排。然后，对于每种颜色的球，他都会把最左边的那个颜色的球涂成<span class="math inline">\(0\)</span> 号颜色（一种不同于 <spanclass="math inline">\(N\)</span> 种原始颜色的颜色）。</p><p>求涂色后，球的颜色可能有多少个序列（取模）。</p><h2 id="数据范围-5">数据范围</h2><p><span class="math inline">\(1\le N,K\le 000\)</span>。</p><h2 id="解题思路-5">解题思路</h2><p>组合问题考虑动态规划。我们设状态 <spanclass="math inline">\(f_{i,j}\)</span> 表示我们放置了 <spanclass="math inline">\(i\)</span> 个白球和 <spanclass="math inline">\(j\)</span> 个<strong>类</strong>颜色的球，显然<span class="math inline">\(i\ge j\)</span>。考虑转移：</p><ul><li>若当前位置放一个白球，则有转移方程：</li></ul><p><span class="math display">\[f_{i-1,j} \to f_{i,j}\]</span></p><ul><li>若当前位置放一个有颜色的球。根据定义，我们一次安排一类 <spanclass="math inline">\(k-1\)</span>个同颜色的球的位置，那么这个位置是一个<strong>没有出现过的颜色的球</strong>。因为是从<span class="math inline">\(f_{i,j-1}\)</span>转移过来，所以这个球的颜色有 <span class="math inline">\(n-j+1\)</span>种。当前位置放一个，前面有一个此颜色转换成的白球，后面此种颜色共安排<span class="math inline">\(k-2\)</span> 个，则可以安排在后面 <spanclass="math inline">\(nk-i-(j-i)(k-1)-1\)</span> 个空位种的 <spanclass="math inline">\(k-2\)</span> 个位置，则有转移方程：</li></ul><p><span class="math display">\[f_{i,j-1}\times (n-j+1)\times {nk-i-(j-1)(k-1)-1\choose k-2}\to f_{i,j}\]</span></p><p>边界：<span class="math inline">\(f_{0,0}=1\)</span>，答案：<spanclass="math inline">\(f_{n,n}\)</span>。</p><p>时间复杂度 <span class="math inline">\(O(nk)\)</span>。</p><h2 id="参考代码-5">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 2005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line">ll f[MAXN][MAXN],mul[MAXN*MAXN],inv[MAXN*MAXN];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    ll w=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) w=w*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m&lt;<span class="number">0</span>||n&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> mul[n]*inv[m]%mod*inv[n-m]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mul[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k*n;i++) mul[i]=mul[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    inv[n*k]=<span class="built_in">qpow</span>(mul[n*k],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=k*n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) inv[i]=inv[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i<span class="number">-1</span>&gt;=j) f[i][j]+=f[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(j) f[i][j]+=f[i][j<span class="number">-1</span>]*(n-j+<span class="number">1</span>)%mod*<span class="built_in">C</span>(n*k-i-(j<span class="number">-1</span>)*(k<span class="number">-1</span>)<span class="number">-1</span>,k<span class="number">-2</span>)%mod;</span><br><span class="line">            f[i][j]%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[n][n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 做题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 做题笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做题笔记[AGC001]</title>
      <link href="/post/887b839b27ed.html"/>
      <url>/post/887b839b27ed.html</url>
      
        <content type="html"><![CDATA[<p>做题笔记[AGC001]</p><h1 id="a---bbq-easy">A - BBQ Easy</h1><blockquote><p>标签：贪心</p><p>难度：★☆☆☆☆</p></blockquote><h2 id="题目大意">题目大意</h2><p>将 <span class="math inline">\(2n\)</span> 个数分为 <spanclass="math inline">\(n\)</span> 组，每个数有值 <spanclass="math inline">\(L_i\)</span>，每组两个数，每个数都被且只被分到一组。一组的权值是两个数值的最小值，分组方案的值就是每组值之和，求分组方案的最大值。</p><h2 id="数据范围">数据范围</h2><p><span class="math inline">\(1\le n\le 100,1\le L_i\le100\)</span>。</p><h2 id="解题思路">解题思路</h2><p>考虑贪心。将数组排序后按顺序两两分组即可。</p><h2 id="参考代码">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 205</span></span><br><span class="line"><span class="type">int</span> n,a[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    n*=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i+=<span class="number">2</span>) ans+=a[i];</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="b---mysterious-light">B - Mysterious Light</h1><blockquote><p>标签：思维</p><p>难度：★★★☆☆</p></blockquote><h2 id="题目大意-1">题目大意</h2><p>有一个边长为 <span class="math inline">\(N\)</span>的三枚镜子构成的正三角形，顶点为 <span class="math inline">\(A, B,C\)</span>。有一束光线，放在 <span class="math inline">\(AB\)</span>段的 <span class="math inline">\(P\)</span> 点上，使得 <spanclass="math inline">\(AP=X\)</span>。这个步枪将会沿着平行于 <spanclass="math inline">\(BC\)</span> 的方向发射一道光。</p><p>光以直线传播，以镜子的形式反射，也会被自己的轨迹反射，当光回到初始点的时候，光被吸收。</p><p>下面的图显示了当 <span class="math inline">\(N=5, x=2\)</span>时的光轨迹。</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=2CMCJl5q" /></p><p>给定 <span class="math inline">\(N\)</span> 和 <spanclass="math inline">\(x\)</span>，求出光线的总长度。</p><h2 id="数据范围-1">数据范围</h2><p><span class="math inline">\(2≤N≤10^{12}\)</span>，<spanclass="math inline">\(1≤x≤N-1\)</span>。</p><h2 id="解题思路-1">解题思路</h2><p>把这个三角形看成被对角线分割的正方形，手动模拟长度，可以发现每一段的长度是一个辗转相减的过程，最后剩下的那一段就是<span class="math inline">\((N,x)\)</span>。可以得到答案就是 <spanclass="math inline">\(3(N-(N,x))\)</span>。</p><h2 id="参考代码-1">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll n,x;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;x;</span><br><span class="line">    cout&lt;&lt;<span class="number">3ll</span>*(n-__gcd(x,n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="c---shorten-diameter">C - Shorten Diameter</h1><blockquote><p>标签：树论、枚举</p><p>难度：★★☆☆☆</p></blockquote><h2 id="题目大意-2">题目大意</h2><p>给你一棵 <span class="math inline">\(N\)</span> 个点的无向树，定义点<span class="math inline">\(u\)</span> 和 <spanclass="math inline">\(v\)</span> 之间的距离是从 <spanclass="math inline">\(u\)</span> 到 <spanclass="math inline">\(v\)</span> 的简单路径上的边数。</p><p>你需要删除一些点，使树的直径小于等于 <spanclass="math inline">\(K\)</span>，当且仅当删除某点不会对树的联通性产生影响时才可以删除。</p><p>问至少删除多少点才可以满足要求。</p><h2 id="数据范围-2">数据范围</h2><p><span class="math inline">\(2≤N≤2000\)</span>，<spanclass="math inline">\(1≤K≤N-1\)</span>。</p><h2 id="解题思路-2">解题思路</h2><p>因为 <span class="math inline">\(N\)</span>比较小，我们考虑枚举每个点，计算以这个点为中心时，最少删去多少个点才能满足要求，具体地：</p><ul><li>若 <span class="math inline">\(N\)</span>为偶数，我们设这个点为中心，遍历整张图，删去距离这个点超过 <spanclass="math inline">\(k/2\)</span> 的点。</li><li>若 <span class="math inline">\(N\)</span>为奇数，我们设这个点连接的某一条边为中心（枚举），遍历整张图，删去距离这个点超过<span class="math inline">\(\lfloor k/2 \rfloor\)</span>。</li></ul><p>时间复杂度 <span class="math inline">\(O(n^2)\)</span>。</p><h2 id="参考代码-2">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 2005</span></span><br><span class="line"><span class="type">int</span> n,k,cnt,ans=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa,<span class="type">int</span> dis)</span></span>&#123;</span><br><span class="line">    cnt+=(dis&gt;k/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:g[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v,u,dis+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        g[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">        g[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k&amp;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">1</span>;u&lt;=n;u++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> v:g[u])&#123;</span><br><span class="line">                cnt=<span class="number">0</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(v,u,<span class="number">0</span>);</span><br><span class="line">                <span class="built_in">dfs</span>(u,v,<span class="number">0</span>);</span><br><span class="line">                ans=<span class="built_in">min</span>(ans,cnt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">1</span>;u&lt;=n;u++)&#123;</span><br><span class="line">            cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> v:g[u])&#123;</span><br><span class="line">                <span class="built_in">dfs</span>(v,u,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ans=<span class="built_in">min</span>(ans,cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="d---arrays-and-palindrome">D - Arrays and Palindrome</h1><blockquote><p>标签：构造、回文串</p><p>难度：★★★★☆</p></blockquote><h2 id="题目大意-3">题目大意</h2><p>给定一个长 <span class="math inline">\(m\)</span> 的序列 <spanclass="math inline">\(A\)</span>，和参数 <spanclass="math inline">\(n=\sum\limits_{i=1}^mA_i\)</span>，构造两个正整数数列 <spanclass="math inline">\(a,b\)</span>，满足：</p><ul><li><span class="math inline">\(a\)</span> 数列的数字总和是 <spanclass="math inline">\(N\)</span> 且是 <spanclass="math inline">\(A\)</span> 序列的一个排列；</li><li><span class="math inline">\(b\)</span> 数列的数字总和是 <spanclass="math inline">\(N\)</span>；</li><li>如果存在某个数列 <span class="math inline">\(s\)</span>满足以下两个条件， 则 <span class="math inline">\(s\)</span>的所有元素必定相同：<ul><li>对于 <span class="math inline">\(s\)</span> 的最开始的 <spanclass="math inline">\(a_1\)</span> 个元素，接下来的 <spanclass="math inline">\(a_2\)</span> 个元素，更后面的 <spanclass="math inline">\(a_3\)</span> 个，等等，都构成回文串；</li><li>对于 <span class="math inline">\(s\)</span> 的最开始的 <spanclass="math inline">\(b_1\)</span> 个元素，接下来的 <spanclass="math inline">\(b_2\)</span> 个元素，更后面的 <spanclass="math inline">\(b_3\)</span> 个，等等，都构成回文串。</li></ul></li></ul><h2 id="数据范围-3">数据范围</h2><p><span class="math inline">\(1\le N,A_i\le 10^5,1\le M\le100\)</span>。</p><h2 id="解题思路-3">解题思路</h2><p>一道很好的构造题。</p><p>考虑构成一个长度为 <span class="math inline">\(n\)</span>的回文串，会有 <span class="math inline">\(n/2\)</span>个相等关系。而让所有元素相等，必须交叉安排两个数组，使得串首尾都留出一个接口，如下图：</p><p><img src="https://sy.hhwdd.com/RequireFile.do?fid=Dm0o2AWB" /></p><p>不难发现，如果 <span class="math inline">\(A\)</span>中有大于两个长度为奇数的串，就无法满足制约关系。对于合法的解，不妨将长度为奇数的串转到两边，然后让<span class="math inline">\(b\)</span> 数组差 <spanclass="math inline">\(a\)</span> 的空子安排就好。</p><h2 id="参考代码-3">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="type">int</span> n,m,a[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        cnt+=(a[i]&amp;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;<span class="number">2</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Impossible&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="keyword">if</span>(a[i]&amp;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">1</span>) <span class="built_in">swap</span>(a[i],a[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=m;i&gt;<span class="number">1</span>;i--) <span class="keyword">if</span>(a[i]&amp;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=m) <span class="built_in">swap</span>(a[i],a[m]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n!=<span class="number">1</span>) cout&lt;&lt;<span class="number">2</span>&lt;&lt;endl&lt;&lt;a[<span class="number">1</span>]<span class="number">-1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="number">1</span>&lt;&lt;endl&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">1</span>]==<span class="number">1</span>) cout&lt;&lt;m<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;m&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;a[<span class="number">1</span>]<span class="number">-1</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;m;i++) cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;a[m]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="e---bbq-hard">E - BBQ Hard</h1><blockquote><p>标签：组合计数、动态规划</p><p>难度：★★★★☆</p></blockquote><h2 id="题目大意-4">题目大意</h2><p>有 <span class="math inline">\(n\)</span> 个数对 <spanclass="math inline">\((a_i, b_i)\)</span>，求</p><p><span class="math display">\[\sum_{i=1}^{n}\sum_{j=i + 1}^{n}{a_i+b_i+a_j+b_j \choose a_i+a_j}\]</span></p><p>答案对 <span class="math inline">\(10 ^ 9 + 7\)</span> 取模。</p><h2 id="数据范围-4">数据范围</h2><p><span class="math inline">\(2\le N\le 2\times 10^5,1\le A_i,B_i\le2000\)</span>。</p><h2 id="解题思路-4">解题思路</h2><p>首先考虑一个组合式 <span class="math inline">\(x+y\choose x\)</span>的几何意义，就是从点 <span class="math inline">\((0,0)\)</span> 走到<spanclass="math inline">\((x,y)\)</span>，每一步只能向右或向上走的方案数。这个式子是可以转移的：<span class="math display">\[{x+y\choose x }={x+y-1\choose x}+{x+y\choose x-1}\]</span> 单独求一次可以在 <spanclass="math inline">\(O(A_iB_i)\)</span>的时间求出来。现在考虑题目中的式子，也就是说对于每个 <spanclass="math inline">\(1\le i&lt;j\le n\)</span>，求从 <spanclass="math inline">\((0,0)\)</span> 按照上述方案走到 <spanclass="math inline">\((a_i+a_j,b_i+b_j)\)</span> 的方案数。</p><p>为了简化思考，我们现在改变一下表述方式：对于每个 <spanclass="math inline">\(1\le i&lt;j\le n\)</span>，求从 <spanclass="math inline">\((-a_j,-b_j)\)</span> 走到 <spanclass="math inline">\((a_i,b_i)\)</span>，即向左下平移，但是大小不变。我们以<span class="math inline">\((a_i,a_j)\)</span>为主元，求解其他点（负的）到这个点的方案和即可。</p><p>我们考虑动态规划。开始给每个负点 <spanclass="math inline">\((-a_i,-b_i)\)</span> <spanclass="math inline">\(1\)</span> 的权值，设计 <spanclass="math inline">\(f_{i,j}\)</span>表示从左下角走到这个点的方案数，求解即可。</p><p>注意上述状态求解了所有的 <span class="math inline">\(i,j\)</span>的解，我们需要删去 <span class="math inline">\(i,i\)</span>的解，通过组合计数可得这部分要删去的解的个数是 <spanclass="math inline">\(\sum\limits_{i=1}^n{2a_i+2b_2\choose2a_i}\)</span>。因为<span class="math inline">\(i,j\)</span> 和 <spanclass="math inline">\(j,i\)</span> 算重，需要将答案数除以 <spanclass="math inline">\(2\)</span>。</p><h2 id="参考代码-4">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 200005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXA 2005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll f[MAXA&lt;&lt;<span class="number">1</span>][MAXA&lt;&lt;<span class="number">1</span>],n,a[MAXN],b[MAXN];</span><br><span class="line">ll maxa,maxb,ans;</span><br><span class="line">ll mul[MAXA&lt;&lt;<span class="number">2</span>],inv[MAXA&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mul[n]*inv[m]%mod*inv[n-m]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    ll w=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) w=w*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mul[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4009</span>*<span class="number">2</span>;i++) mul[i]=mul[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    inv[<span class="number">4009</span>*<span class="number">2</span>]=<span class="built_in">qpow</span>(mul[<span class="number">4009</span>*<span class="number">2</span>],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">4009</span>*<span class="number">2</span><span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) inv[i]=inv[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i]&gt;&gt;b[i];</span><br><span class="line">        f[<span class="number">2005</span>-a[i]][<span class="number">2005</span>-b[i]]++;</span><br><span class="line">        maxa=<span class="built_in">max</span>(maxa,a[i]);</span><br><span class="line">        maxb=<span class="built_in">max</span>(maxb,b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2005</span>-maxa;i&lt;=<span class="number">2005</span>+maxa;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2005</span>-maxb;j&lt;=<span class="number">2005</span>+maxb;j++)&#123;</span><br><span class="line">            f[i][j]=(f[i][j]+f[i<span class="number">-1</span>][j]+f[i][j<span class="number">-1</span>])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans=(ans+f[<span class="number">2005</span>+a[i]][<span class="number">2005</span>+b[i]])%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans=(ans-<span class="built_in">C</span>((a[i]+b[i])&lt;&lt;<span class="number">1</span>,a[i]&lt;&lt;<span class="number">1</span>))%mod;</span><br><span class="line">    ans=<span class="number">1ll</span>*ans*inv[<span class="number">2</span>]%mod;</span><br><span class="line">    ans=(ans%mod+mod)%mod;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="f---wide-swap">F - Wide Swap</h1><blockquote><p>标签：思维、拓扑排序、线段树</p><p>难度：★★★★★</p></blockquote><h2 id="题目大意-5">题目大意</h2><p>给出一个元素集合为 <spanclass="math inline">\(\{1,2,\dots,N\}\)</span> 的排列 <spanclass="math inline">\(P\)</span>，当有 <spanclass="math inline">\(i,j\)</span> <span class="math inline">\((1\leqi&lt;j\leq N)\)</span> 满足 <span class="math inline">\(j-i\geqK\)</span> <span class="math inline">\((1\leq K\leq N-1)\)</span> 且<span class="math inline">\(|P_{i}-P_{j}|=1\)</span>时，可以交换 <spanclass="math inline">\(P_{i}\)</span> 和 <spanclass="math inline">\(P_{j}\)</span>。</p><p>求：可能排列中字典序最小的排列。</p><h2 id="数据范围-5">数据范围</h2><p><span class="math inline">\(1\leq N\leq 5\times10^5\)</span> 。</p><h2 id="解题思路-5">解题思路</h2><p>考虑按照上述方式交换元素有什么特殊性质。</p><p>我们建立 <span class="math inline">\(P\)</span> 的反置换 <spanclass="math inline">\(Q\)</span>，即 <spanclass="math inline">\(P_{Q_i}=i\)</span>，将 <spanclass="math inline">\(P_i\)</span> 的值作为 <spanclass="math inline">\(Q\)</span> 的下标，<spanclass="math inline">\(i\)</span> 作为 <spanclass="math inline">\(Q\)</span> 的值。不难发现，可以交换 <spanclass="math inline">\(Q_i\)</span> 和 <spanclass="math inline">\(Q_{i+1}\)</span> 的条件是 <spanclass="math inline">\(|Q_i-Q_{i+1}|\le K\)</span>。</p><p>通过人类的智慧思考发现，若存在一组 <span class="math inline">\(1\lei&lt;j\le N\)</span>，满足 <spanclass="math inline">\(|Q_i-Q_j|&gt;K\)</span>，不管怎样交换，这两个数的<strong>相对位置不会改变</strong>。</p><p>这个性质放回到 <span class="math inline">\(P\)</span>中，等价于：<span class="math inline">\(\forall 1\le i \leN,j\in(i-K,i+k),i\not=j\)</span>，若 <spanclass="math inline">\(P_i\)</span> 和 <spanclass="math inline">\(P_j\)</span> 满足偏序关系 <spanclass="math inline">\(P_i&lt;P_j\)</span>，则无论怎样交换，最后在 <spanclass="math inline">\(i,j\)</span> 位置上的数仍满足偏序关系 <spanclass="math inline">\(P_i&lt;P_j\)</span>。</p><blockquote><p>例子 <span class="math inline">\(\quad\)</span> 对于排列 <spanclass="math inline">\(P=\{4,5,7,8,3,1,2,6\}\)</span>，有 <spanclass="math inline">\(P_2=5,P_3=7\)</span>，在 <spanclass="math inline">\(K=3\)</span>的情况下，无论怎样交换，两个位置上的数仍满足小于关系。例如交换成 <spanclass="math inline">\(P&#39;=\{1,2,6,7,5,3,4,8\}\)</span>，满足 <spanclass="math inline">\(2&lt;6\)</span>。</p></blockquote><p>这样，我们可以找出所有的偏序关系，建图后通过拓扑排序，就可以知道这些数的最小排列。</p><p>例如，我们按照大于关系见图，即找到下标 <spanclass="math inline">\((i-K,i+K)\)</span> 内比 <spanclass="math inline">\(P_i\)</span> 小的数连边，按照拓扑顺序给下标从<span class="math inline">\(N\)</span> 到 <spanclass="math inline">\(1\)</span> 赋值。</p><p>但是这个图是 <span class="math inline">\(O(NK)\)</span>大小的，无法建图，我们利用这道题的特殊性质：每个点可能连出边的节点范围是<spanclass="math inline">\((i-K,i+K)\)</span>。一开始没有入度的点就是这个范围内的最大值，可以利用线段树查找。然后在左右子区间找区间最大值，再检查是否合法即可（见代码）。</p><p>时间复杂度 <span class="math inline">\(O(N\log N)\)</span>。</p><h2 id="参考代码-5">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 500005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((tree[p].l+tree[p].r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls (p&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs (p&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">int</span> n,k,a[MAXN],ans[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r,maxx,pos;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[ls].maxx&gt;tree[rs].maxx)&#123;</span><br><span class="line">        tree[p].maxx=tree[ls].maxx;</span><br><span class="line">        tree[p].pos=tree[ls].pos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        tree[p].maxx=tree[rs].maxx;</span><br><span class="line">        tree[p].pos=tree[rs].pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    tree[p].l=l,tree[p].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[p].maxx=a[l];</span><br><span class="line">        tree[p].pos=l;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(l,mid,ls);</span><br><span class="line">    <span class="built_in">build</span>(mid+<span class="number">1</span>,r,rs);</span><br><span class="line">    <span class="built_in">update</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pii <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> &#123;-inf,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[p].l&amp;&amp;r&gt;=tree[p].r) <span class="keyword">return</span> &#123;tree[p].maxx,tree[p].pos&#125;;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(l,r,rs);</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(l,r,ls);</span><br><span class="line">    pii lc=<span class="built_in">query</span>(l,r,ls),rc=<span class="built_in">query</span>(l,r,rs),c;</span><br><span class="line">    <span class="keyword">if</span>(lc.first&gt;rc.first) c=lc;</span><br><span class="line">    <span class="keyword">else</span> c=rc;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> goal,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[p].l==tree[p].r)&#123;</span><br><span class="line">        tree[p].maxx=-inf;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(goal&lt;=mid) <span class="built_in">modify</span>(goal,ls);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">modify</span>(goal,rs);</span><br><span class="line">    <span class="built_in">update</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chk</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    pii now=<span class="built_in">query</span>(<span class="built_in">max</span>(<span class="number">1</span>,p-k+<span class="number">1</span>),<span class="built_in">min</span>(p+k<span class="number">-1</span>,n),<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(now.second==p&amp;&amp;now.first!=-inf) q.<span class="built_in">push</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">chk</span>(i);</span><br><span class="line">    <span class="type">int</span> now=n;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        ans[u]=now--;</span><br><span class="line">        <span class="built_in">modify</span>(u,<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> lpos=<span class="built_in">query</span>(<span class="built_in">max</span>(<span class="number">1</span>,u-k+<span class="number">1</span>),u<span class="number">-1</span>,<span class="number">1</span>).second;</span><br><span class="line">        <span class="type">int</span> rpos=<span class="built_in">query</span>(u+<span class="number">1</span>,<span class="built_in">min</span>(u+k<span class="number">-1</span>,n),<span class="number">1</span>).second;</span><br><span class="line">        <span class="built_in">chk</span>(lpos);<span class="built_in">chk</span>(rpos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 做题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 做题笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟退火</title>
      <link href="/post/cfd51e5a3eb8.html"/>
      <url>/post/cfd51e5a3eb8.html</url>
      
        <content type="html"><![CDATA[<p>模拟退火</p><h1 id="一模拟退火">一、模拟退火</h1><p>模拟退火算法用于计算运算量大或随机概率较高的多峰函数最值问题，在多次退火下，正确的概率表现的还是非常出色的。</p><h2 id="quad-劣解的接受与-metropolis-准则">1.1 <spanclass="math inline">\(\quad\)</span> 劣解的接受与 Metropolis 准则</h2><p>爬山算法只能应用于单峰函数，因为它每次只在附近只寻找更加优秀的解。放在多峰函数下容易陷入局部最大值，而无法找到全局最大值。</p><p>不同于爬山算法，在模拟退火算法中，我们在当前位置的一定范围内随机一个位置进行决策。如果这个决策比现在的决策更加优秀，我们无条件地接受；如果这个决策不如当前的决策我们以<strong>某种概率接受</strong>这个劣解。</p><p>具体地，我们像冶金工业退火一样，一开始，我们有一个<strong>温度</strong><spanclass="math inline">\(T\)</span>，表示当前的活跃性。这个温度随着随机次数的增加而降低，当最终小于某一个温度<span class="math inline">\(t_0\)</span> 时就终止退火。</p><p>我们设接受一个比当前解劣 <span class="math inline">\(\DeltaE\)</span> 的劣解的概率为 <span class="math inline">\(P(\DeltaE)\)</span>。根据 Metropolis准则，我们划定这个概率，并让其与当前温度有关。即表示：随机次数较小时，我们有更大概率接受劣解；随机次数过多时，我们有较小的概率接受劣解。这样既能保证向着最大值的方向查找，又能避免陷入局部最大值。</p><p><strong>Metropolis 准则</strong> <spanclass="math inline">\(\quad\)</span> 当前温度为 <spanclass="math inline">\(T\)</span> 时，对于新状态 <spanclass="math inline">\(S&#39;\)</span> 与当前最优状态 <spanclass="math inline">\(S\)</span> 的关于最优值的差为 <spanclass="math inline">\(\Delta E\ge0\)</span>，则发生状态转移（接受新状态）的概率为： <spanclass="math display">\[P(\Delta E)=\begin{cases}1,&amp;S&#39;\text{比} S \text{更优,} \\e^{\frac{-\Delta E}{T}}, &amp; \text{otherwise.}\end{cases}\]</span></p><p><imgsrc="https://oi-wiki.org/misc/images/simulated-annealing.gif" /></p><h2 id="quad-算法的实现">1.2 <span class="math inline">\(\quad\)</span>算法的实现</h2><p>一开始，我们有三个参数：</p><ul><li>初始温度 <span class="math inline">\(T_0\)</span>；</li><li>降温系数 <spanclass="math inline">\(d\)</span>，即每经过依次随机，温度变为 <spanclass="math inline">\(T_0d\)</span>，<spanclass="math inline">\(d\)</span> 一般为趋近于 <spanclass="math inline">\(1\)</span> 的小数；</li><li>终止温度 <span class="math inline">\(T_k\)</span>。</li></ul><p>对于每次随机，我们在当前最优解的附近随机新状态（随机范围也与当前温度有关），经计算后依靠Metropolis 准则决定是否接受。</p><p>在依靠 Metropolis 准则决策时需要注意：</p><ul><li>在 C++ 语言中，我们可以用 <code>cmath</code> 库中的 <code>exp</code>函数计算以 <span class="math inline">\(e\)</span>为底的指数函数。具体地，可以用 <code>exp(-E/T)</code> 表示 <spanclass="math inline">\(e^{\frac{-\Delta E}{T}}\)</span>；</li><li>注意计算接受劣解的概率时 <span class="math inline">\(e\)</span>的指数是<strong>负数</strong>；</li><li>根据函数图像可知，对于函数 <spanclass="math inline">\(f(x)=e^x(x&lt;0)\)</span> 的值域是 <spanclass="math inline">\((0,1)\)</span>。所以我们可以将 <spanclass="math inline">\(e^{\frac{-\Delta E}{T}}\)</span> 与一个在 <spanclass="math inline">\((0,1)\)</span>范围内的随机数比较。需要注意的是，因为随机次数越多，<spanclass="math inline">\(T\)</span> 越小，<spanclass="math inline">\(\frac{-\Delta E}{T}\)</span> 也越小，<spanclass="math inline">\(f(x)\)</span> 的函数值也越趋近于 <spanclass="math inline">\(0\)</span>，接受的概率也应该越低。所以，<strong>无论求最大值还是最小值，都只能依靠<code>exp(-E/T) &gt;= randFromRange(0,1)</code>或其他单调判断</strong>来决策，<strong>注意不等号方向和随机值范围，否则有概率退化成爬山算法</strong>。其中<code>randFromRange</code> 函数是在 <spanclass="math inline">\((l,r)\)</span> 范围内生成随机数。</li></ul><p>一般利用模拟退火解决问题，通常有如下设置：</p><ul><li><span class="math inline">\(T_0\)</span> 一般取 <spanclass="math inline">\([2000,3000]\)</span> 中的数；</li><li><span class="math inline">\(d\)</span> 通常取 <spanclass="math inline">\(0.999\)</span>，这个值取决于不同题目；</li><li><span class="math inline">\(T_k\)</span> 通常取 <spanclass="math inline">\([10^{-16},10^{-5}]\)</span> 之间；</li><li>通常情况下会进行多轮退火。每轮结束后不必要清空最优值，只需要重置温度等参数即可。</li></ul><h1 id="二例题练习">二、例题练习</h1><h2 id="quad-分金币">2.1 <span class="math inline">\(\quad\)</span>分金币</h2><p>题目来源：<ahref="https://www.luogu.com.cn/problem/P3878">TJOI2010，洛谷P3878</a></p><blockquote><p><strong>例题</strong> <span class="math inline">\(\quad\)</span>现在有 <span class="math inline">\(n\)</span> 枚金币，第 <spanclass="math inline">\(i\)</span> 枚金币的价值为 <spanclass="math inline">\(v_i\)</span>。现在要把它们分成两部分，要求这两部分金币数目之差不超过<spanclass="math inline">\(1\)</span>，求这样分成的两部分金币的价值之差的最小值。</p></blockquote><p>考虑模拟退火，先把原序列随便分成两个部分，之后随机交换两个部分中的两个数。</p><p>核心代码如下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(time(<span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> temp=<span class="number">2333</span>;<span class="comment">//初始温度</span></span><br><span class="line">    <span class="keyword">while</span>(temp&gt;=<span class="number">1e-15</span>)&#123;<span class="comment">//终止温度</span></span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">rnd</span>()%mid+<span class="number">1</span>;<span class="comment">//在两个部分随机一个数交换</span></span><br><span class="line">        <span class="type">int</span> y=<span class="built_in">rnd</span>()%(n-mid)+mid+<span class="number">1</span>;</span><br><span class="line">        ll dis=<span class="built_in">abs</span>(s1-a[x]+a[y]-(s2-a[y]+a[x]));<span class="comment">//计算新贡献</span></span><br><span class="line">        ll D=dis-ans;</span><br><span class="line">        <span class="keyword">if</span>(D&lt;<span class="number">0</span>)&#123;<span class="comment">//优解，注意D和上文定义的E是相反数，D是负数表示的是解较优</span></span><br><span class="line">            ans=dis;</span><br><span class="line">            s1=s1-a[x]+a[y];</span><br><span class="line">            s2=s2-a[y]+a[x];</span><br><span class="line">            <span class="built_in">swap</span>(a[x],a[y]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">exp</span>(D/temp)&gt;<span class="number">1.</span>*(<span class="built_in">rnd</span>()%<span class="number">100000</span>)/<span class="number">100000</span>)&#123;<span class="comment">//劣解，注意随机范围和不等号方向</span></span><br><span class="line">            s1=s1-a[x]+a[y];</span><br><span class="line">            s2=s2-a[y]+a[x];</span><br><span class="line">            <span class="built_in">swap</span>(a[x],a[y]);</span><br><span class="line">        &#125;</span><br><span class="line">        temp*=<span class="number">0.999</span>;<span class="comment">//每次温度降低</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">        mid=(<span class="number">1</span>+n)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        s1=s2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=mid;i++) s1+=a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=mid+<span class="number">1</span>;i&lt;=n;i++) s2+=a[i];</span><br><span class="line">        ans=<span class="built_in">abs</span>(s1-s2);</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++) <span class="built_in">sa</span>();<span class="comment">//多进行几轮退火</span></span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="quad-run-away">2.2 <span class="math inline">\(\quad\)</span>Run Away</h2><p>题目来源：<ahref="https://www.luogu.com.cn/problem/SP34">SP34</a></p><blockquote><p><strong>例题</strong> <span class="math inline">\(\quad\)</span> 给定<span class="math inline">\(n\)</span>个点的坐标，在给定范围内找一个点，使得距离所有点的最小值最大。</p></blockquote><p>考虑模拟退火，一开始将这个点的位置设置在范围的正中心。每次在一定范围内随机新点，范围与当前温度有关，见代码。</p><p>核心代码如下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> temp=<span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">while</span>(temp&gt;=<span class="number">1e-4</span>)&#123;</span><br><span class="line">        <span class="comment">//随机新点</span></span><br><span class="line">        <span class="type">double</span> nowx=<span class="built_in">getrnd</span>(<span class="built_in">max</span>(<span class="number">0.</span>,nx-temp),<span class="built_in">min</span>(<span class="number">1.</span>*X,nx+temp));</span><br><span class="line">        <span class="type">double</span> nowy=<span class="built_in">getrnd</span>(<span class="built_in">max</span>(<span class="number">0.</span>,ny-temp),<span class="built_in">min</span>(<span class="number">1.</span>*Y,ny+temp));</span><br><span class="line">        <span class="comment">//计算新值</span></span><br><span class="line">        <span class="type">double</span> dis=<span class="built_in">calc</span>(nowx,nowy);</span><br><span class="line">        <span class="type">double</span> D=dis-ans;</span><br><span class="line">        <span class="comment">//方案较优</span></span><br><span class="line">        <span class="keyword">if</span>(D&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            ans=dis;</span><br><span class="line">            ansx=nx=nowx;</span><br><span class="line">            ansy=ny=nowy;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//以一定概率接受劣解，注意不等号方向</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">exp</span>(D/temp)&gt;=<span class="built_in">getrnd</span>(<span class="number">0</span>,<span class="number">1</span>))&#123;</span><br><span class="line">            nx=nowx;</span><br><span class="line">            ny=nowy;</span><br><span class="line">        &#125;</span><br><span class="line">        temp*=<span class="number">0.999</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        cin&gt;&gt;X&gt;&gt;Y&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;ax[i]&gt;&gt;ay[i];</span><br><span class="line">        ansx=nx=<span class="number">1.</span>*X/<span class="number">2</span>;</span><br><span class="line">        ansy=ny=<span class="number">1.</span>*Y/<span class="number">2</span>;</span><br><span class="line">        ans=<span class="built_in">calc</span>(nx,ny);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++) <span class="built_in">sa</span>();<span class="comment">//多进行几次退火</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The safest point is (%.1lf, %.1lf).\n&quot;</span>,ansx,ansy);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随机化算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渐近记号与主定理</title>
      <link href="/post/afdc0807f110.html"/>
      <url>/post/afdc0807f110.html</url>
      
        <content type="html"><![CDATA[<p>渐近记号与主定理</p><p>渐近记号用来描述函数的运行时间，刻画运行时间的上界、确界、下界。使用递归定义的函数通常使用主定理分析时间复杂度。</p><h1 id="一渐近记号">一、渐近记号</h1><p>本节定义一些基本函数，用于描述时间复杂度。</p><h2 id="quad-渐进记号函数与运行时间">1.1 <spanclass="math inline">\(\quad\)</span> 渐进记号、函数与运行时间</h2><h3 id="quad-theta-记号">1.1.1 <spanclass="math inline">\(\quad\)</span> <spanclass="math inline">\(\Theta\)</span> 记号</h3><p>我们使用 <span class="math inline">\(\Theta\)</span>记号描述函数的<strong>渐近紧确界</strong>。</p><p>形式化地， <span class="math inline">\(\Theta (g(n))=\{f(n):\existsc_1,c_2,n_0:\forall n\ge n_0,0\le c_1g(n)\le f(n)\le c_2g(n)\}\)</span>。</p><p>其中，冒号意为“使得”。</p><p>也就是说，存在常量 <spanclass="math inline">\(c_1,c_2,n_0\)</span>，可以将 <spanclass="math inline">\(f(n)\)</span> 夹入 <spanclass="math inline">\(c_1g(n)\)</span> 和 <spanclass="math inline">\(c_2(n)\)</span> 中。<spanclass="math inline">\(\Theta(g(n))\)</span> 要求每个成员 <spanclass="math inline">\(f(n)\in \Theta(g(n))\)</span><strong>渐近非负</strong>。</p><p>我们通常使用 <span class="math inline">\(\Theta(1)\)</span>表示常量或某个变量的常量函数。</p><h3 id="quad-o-记号">1.1.2 <span class="math inline">\(\quad\)</span><span class="math inline">\(O\)</span> 记号</h3><p>当函数只有一个<strong>渐近上界</strong>时，使用 <spanclass="math inline">\(O\)</span> 记号。</p><p>形式化地， <span class="math inline">\(O (g(n))=\{f(n):\existsc,n_0:\forall n\ge n_0,0\le f(n)\le cg(n) \}\)</span>。</p><p>使用 <span class="math inline">\(O\)</span>记号描述上界，我们常常可以检查算法的总体结构来描述算法运行的时间，如循环嵌套等，这里不再展开。</p><h3 id="quad-omega-记号">1.1.3 <spanclass="math inline">\(\quad\)</span> <spanclass="math inline">\(\Omega\)</span> 记号</h3><p><span class="math inline">\(\Omega\)</span>记号提供了函数的<strong>渐近下界</strong>。</p><p>形式化地，<span class="math inline">\(\Omega (g(n))=\{f(n):\existsc,n_0:\forall n\ge n_0,0\le cg(n)\le f(n)\}\)</span>。</p><p>我们不难有如下定理：</p><p><strong>定理</strong> <span class="math inline">\(\quad\)</span>对于任意两个函数 <span class="math inline">\(f(n),g(n)\)</span>，我们有<span class="math inline">\(f(n)=\Theta(g(n))\)</span>，当且仅当 <spanclass="math inline">\(f(n)=O(g(n))\)</span> 且 <spanclass="math inline">\(f(n)=\Omega(g(n))\)</span>。</p><h3 id="quad-o-记号-1">1.1.4 <span class="math inline">\(\quad\)</span><span class="math inline">\(o\)</span> 记号</h3><p>前面的 <span class="math inline">\(O\)</span>记号描述的渐近上界，我们使用 <span class="math inline">\(o\)</span>记号来描述一个<strong>非渐近紧确的上界</strong>，如 <spanclass="math inline">\(2n=o(n^2)\)</span> 而 <spanclass="math inline">\(2n^2\not=o(n^2)\)</span>。</p><p>形式化地，<span class="math inline">\(o (g(n))=\{f(n):\forallc&gt;0,\exists n_0&gt;0:\forall n\ge n_0, 0\le f(n) &lt; cg(n)\}\)</span>。</p><p>直观上，在 <span class="math inline">\(o\)</span> 记号中，当 <spanclass="math inline">\(n\rightarrow + \infty\)</span>，函数<spanclass="math inline">\(f(n)\)</span> 相对于 <spanclass="math inline">\(g(n)\)</span> 来说变得微不足道了。</p><h3 id="quad-omega-记号-1">1.1.5 <spanclass="math inline">\(\quad\)</span> <spanclass="math inline">\(\omega\)</span> 记号</h3><p>我们使用 <span class="math inline">\(\omega\)</span>记号描述一个<strong>非渐近紧确的下界</strong>。</p><p>形式化地，<span class="math inline">\(\omega (g(n))=\{f(n):\forallc&gt;0,\exists n_0&gt;0:\forall n\ge n_0, 0\le cg(n) &lt; f(n)\}\)</span>。</p><h2 id="quad-渐近函数的性质">1.2 <spanclass="math inline">\(\quad\)</span> 渐近函数的性质</h2><p>我们令 <span class="math inline">\(f(n),g(n)\)</span> 渐近为正。</p><p>渐近函数具有<strong>传递性</strong>，即 <spanclass="math inline">\(f(n)=\Theta (g(n)),g(n)=\Theta h(n)\Rightarrowf(n)=\Theta(h(n))\)</span>。其他记号同理。</p><p>渐近函数具有<strong>自反性</strong>，即 <spanclass="math inline">\(f(n)=\Theta f(n)\)</span>，对于 <spanclass="math inline">\(O,\Omega\)</span> 记号同理。</p><p><span class="math inline">\(\Theta\)</span>函数具有<strong>对称性</strong>，即 <spanclass="math inline">\(f(n)=\Theta(g(n))\)</span> 当且仅当 <spanclass="math inline">\(g(n)=\Theta (f(n))\)</span>。</p><p>渐近函数具有<strong>转置对称性</strong>，即 <spanclass="math inline">\(f(n)=O(g(n))\)</span> 当且仅当 <spanclass="math inline">\(g(n)=\Omega f(n)\)</span>；<spanclass="math inline">\(f(n)=o(g(n))\)</span> 当且仅当 <spanclass="math inline">\(g(n)=\omega (f(n))\)</span>。</p><h1 id="二使用主方法求解递归式">二、使用主方法求解递归式</h1><p>对于类似 <span class="math display">\[T(n)=aT(n/b)+f(n)\]</span> 的递归式，通常使用主定理求解其渐近界。</p><h2 id="quad-主定理">2.1 <span class="math inline">\(\quad\)</span>主定理</h2><p><strong>定理（主定理）</strong> <spanclass="math inline">\(\quad\)</span> 令 <span class="math inline">\(a\ge1\)</span> 和 <span class="math inline">\(b\ge 1\)</span> 是常数，<spanclass="math inline">\(f(n)\)</span> 是一个函数，<spanclass="math inline">\(T(n)\)</span> 是定义在非负整数上的递归式： <spanclass="math display">\[T(n)=aT(n/b)+f(n)\]</span> 我们将其中的 <span class="math inline">\(n/b\)</span> 解释为<span class="math inline">\(\lceil n/b \rceil\)</span> 或者 <spanclass="math inline">\(\lfloor n/b \rfloor\)</span>，那么 <spanclass="math inline">\(T(n)\)</span> 有如下渐近界：</p><ol type="1"><li>若对某个常数 <span class="math inline">\(\epsilon &gt;0\)</span> 有<span class="math inline">\(f(n)=O(n^{\log_b a-\epsilon})\)</span>，则有<span class="math inline">\(T(n)=\Theta(n^{\log_ba})\)</span>。</li><li>若 <span class="math inline">\(f(n)=\Theta(n^{\log_ba})\)</span>，则 <span class="math inline">\(T(n)=\Theta(n^{\log_b a}\lgn)\)</span>。</li><li>若对某个常数 <span class="math inline">\(\epsilon&gt;0\)</span> 有<span class="math inline">\(f(n)=\Omega(n^{\log_ba+\epsilon})\)</span>，且对某个常数 <spanclass="math inline">\(c&lt;1\)</span> 和所有足够大的 <spanclass="math inline">\(n\)</span> 有 <spanclass="math inline">\(af(n/b)\le cf(n)\)</span>，则 <spanclass="math inline">\(T(n)=\Theta(f(n))\)</span>。</li></ol><p>上面就是主定理。注意这三种情况并未覆盖 <spanclass="math inline">\(f(n)\)</span>的所有可能性，下面将说明如何正确地使用主定理。</p><h2 id="quad-使用主方法">2.2 <span class="math inline">\(\quad\)</span>使用主方法</h2><p>我们把使用主定理求解递归式的方法称为<strong>主方法</strong>。我们只需要确定一个递归式对于主定理的哪种情况成立，即可得到解。</p><blockquote><p><strong>例子</strong> <span class="math inline">\(\quad\)</span>对于下面的递归式，求解其渐近界。 <span class="math display">\[T(n)=9T(n/3)+n\]</span></p></blockquote><p>对于这个递归式，我们有 <spanclass="math inline">\(a=9,b=3,f(n)=n\)</span>，因此 <spanclass="math inline">\(n^{\log b a}=b^{\log_39}=\Theta(n^2)\)</span>。由于 <spanclass="math inline">\(f(n)=O(n^{\log_39-\epsilon})\)</span>，其中 <spanclass="math inline">\(\epsilon=1\)</span>，因此可以应用于情况1，得到<span class="math inline">\(T(n)=\Theta(n^2)\)</span>。</p><blockquote><p><strong>例子</strong> <span class="math inline">\(\quad\)</span>对于下面的递归式，求解其渐近界。 <span class="math display">\[T(n)=T(2n/3)+1\]</span></p></blockquote><p>其中，<spanclass="math inline">\(a=1,b=\frac{2}{3},f(n)=1\)</span>，因此 <spanclass="math inline">\(n^{\log_b a}=n^0=1\)</span>。由于 <spanclass="math inline">\(f(n)=\Theta(n^{\log _ba})=\Theta(1)\)</span>，应用于情况2，得到 <spanclass="math inline">\(T(n)=\Theta(\lg n)\)</span>。</p><blockquote><p><strong>例子</strong> <span class="math inline">\(\quad\)</span>对于下面的递归式，求解其渐近界。 <span class="math display">\[T(n)=3T(n/4)+n\lg n\]</span></p></blockquote><p>其中，<span class="math inline">\(a=3,b=4,f(n)=n\lg n\)</span>，因此<span class="math inline">\(n^{\log_b a}=O(n^{0.793})\)</span>。由于<span class="math inline">\(f(n)=\Omega(b^{\log_43-\epsilon})\)</span>，其中 <span class="math inline">\(\epsilon\approx0.2\)</span>，因此，如果可以证明正则条件成立，可应用于情况3。当 <spanclass="math inline">\(n\)</span> 足够大时，有 <spanclass="math inline">\(af(n/b)\le cf(n)\)</span>，得到 <spanclass="math inline">\(T(n)=\Theta(n\lg n)\)</span>。</p><p>上面给出了三种例子，只要算出 <span class="math inline">\(n^{\log_ba}\)</span> 的渐近界，与 <span class="math inline">\(f(n)\)</span>比较，就可以求出递归式的渐近界。</p>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后缀数组与应用</title>
      <link href="/post/2f92b89a3659.html"/>
      <url>/post/2f92b89a3659.html</url>
      
        <content type="html"><![CDATA[<p>后缀数组与应用</p><p>后缀数组 (Suffix Array)是处理字符串问题的有力工具之一，通常利用后缀数组 <spanclass="math inline">\(sa\)</span>处理字符串子串与后缀串排序、公共前缀等问题。</p><h1 id="一后缀数组">一、后缀数组</h1><p>通过计算后缀数组与排名数组，辅助解决系列问题。</p><h2 id="quad-约定与定义">1.1 <span class="math inline">\(\quad\)</span>约定与定义</h2><p>对于一个长度为 <span class="math inline">\(n\)</span> 的字符串 <spanclass="math inline">\(s\)</span>，我们定义 <spanclass="math inline">\(s_i\dots s_n\)</span> 构成的子串为 <spanclass="math inline">\(s\)</span> 在 <spanclass="math inline">\(i\)</span>位置上的<strong>后缀</strong>，下面给出几个函数的定义：</p><ul><li><p><spanclass="math inline">\(sa_i\)</span>：<strong>后缀数组</strong>。表示<span class="math inline">\(s\)</span> 的所有后缀串中，按字典序排名，第<span class="math inline">\(i\)</span> 小的后缀串的起始位置。</p></li><li><p><spanclass="math inline">\(rk_i\)</span>：<strong>名次数组</strong>。表示起始位置为<span class="math inline">\(i\)</span>的后缀串的排名（按字典序）。</p></li></ul><p>不难发现，上面两个函数<strong>互为反函数</strong>，即： <spanclass="math display">\[\begin{aligned}sa[rk[i]]=i\\rk[sa[i]]=i\end{aligned}\]</span></p><ul><li><spanclass="math inline">\(height_i\)</span>：<strong>高度数组</strong>。表示排名为<span class="math inline">\(i\)</span> 的后缀串与排名为 <spanclass="math inline">\(i-1\)</span> 的后缀串的最长公共前缀。特殊地，<spanclass="math inline">\(height_1=0\)</span>，因为没有比它排名小的后缀串。形式化地：</li></ul><p><span class="math display">\[ht[i]=\text{LCP}(sa[i],sa[i-1])\]</span></p><p>其中，<span class="math inline">\(\text{LCP}(s,t)\)</span> 表示字符串<span class="math inline">\(s,t\)</span> 的最长公共前缀。</p><ul><li><spanclass="math inline">\(h_i\)</span>：<strong>公共前缀数组</strong>。表示起始位置为<span class="math inline">\(i\)</span> 的后缀串，与比其排名小 <spanclass="math inline">\(1\)</span> 的后缀串的最长公共前缀，即：</li></ul><p><span class="math display">\[h[i]=height[rk[i]]\]</span></p><blockquote><p><strong>例子</strong> <span class="math inline">\(\quad\)</span>给定字符串 <spanclass="math inline">\(s=aabaaaab\)</span>，其后缀数组、名次数组、高度数组、公共前缀数组为别为：<span class="math display">\[\begin{array}{}&amp;1&amp;2&amp;3&amp;4&amp;5&amp;6&amp;7&amp;8\\s:&amp;a&amp;a&amp;b&amp;a&amp;a&amp;a&amp;a&amp;b\\sa:&amp;4&amp;5&amp;6&amp;1&amp;7&amp;2&amp;8&amp;3\\rk:&amp;4&amp;6&amp;8&amp;1&amp;2&amp;3&amp;5&amp;7\\height:&amp;0&amp;3&amp;2&amp;3&amp;1&amp;2&amp;0&amp;1\\h:&amp;3&amp;2&amp;1&amp;0&amp;3&amp;2&amp;1&amp;0\end{array}\]</span></p></blockquote><h2 id="quad-后缀数组的计算">1.2 <spanclass="math inline">\(\quad\)</span> 后缀数组的计算</h2><p><strong>前置芝士：倍增法、基数排序。</strong></p><p>我们有暴力的做法，对所有后缀串排序，但是这个复杂度并不优秀。</p><p>我们考虑<strong>倍增地</strong>计算后缀数组。也就是说，每次我们计算一段长形如<span class="math inline">\([i,i+2^k-1]\)</span>的子串，而后合并前后两个子串，并按照两个子串的各自的关键字进行排序合并。下面我们考虑怎样合并两个已经排好序的更小的子串，使其拼成一个更长的、有序的子串，进而贡献给后缀数组。如下图：</p><p><img src="https://oi-wiki.org/string/images/sa2.png" /></p><p>这张图中，我们进行了 <span class="math inline">\(O(\log n)\)</span>次倍增。第一次，我们就以字典序为前后两个关键字合并。其后，我们分别以前面一段的名次、后面一段的名次，为两个关键字进行合并。我们每一次合并需要对<span class="math inline">\(n\)</span>个数的两个关键字排序，直接使用快速排序可以获得 <spanclass="math inline">\(O(n\log^2 n)\)</span>的复杂度。一定程度上可以接受，但是不是很优秀，我们希望消去一个 <spanclass="math inline">\(\log\)</span> 的复杂度。</p><p>考虑使用基数排序替换快速排序，每次先对第二关键字开桶记录，而后对第一关键字开桶记录。这样我们放入第一关键字桶的顺序已经满足排序顺序，换句话说，已经满足第二关键字递增的顺序。</p><p>时间复杂度 <span class="math inline">\(O(n\log n)\)</span>。</p><h2 id="quad-代码实现">1.3 <span class="math inline">\(\quad\)</span>代码实现</h2><p>定义以下变量：</p><ul><li><spanclass="math inline">\(m\)</span>：桶中最大元素，即桶的上限；</li><li><span class="math inline">\(c_i\)</span>：数组为计数桶。</li><li><span class="math inline">\(x_i\)</span>：起始位置为 <spanclass="math inline">\(i\)</span> 的串的第一关键字；</li><li><span class="math inline">\(y_i\)</span>：第二关键字排名为 <spanclass="math inline">\(i\)</span> 的串的起始位置，即 <spanclass="math inline">\(x\)</span> 的位置。</li></ul><p>下面描述算法流程。</p><ol type="1"><li><p>对于第一次递增，我们直接按照每单个字符排序，将每个长度为 <spanclass="math inline">\(1\)</span> 的串的第一关键字放入桶中。</p></li><li><p>然后对桶 <span class="math inline">\(c\)</span>进行前缀和处理，这样我们确定了第一关键字为 <spanclass="math inline">\(k\)</span> 的元素最大排在第几名。</p></li><li><p>我们对后缀数组进行第一次赋值，表示长度为 <spanclass="math inline">\(1\)</span> 的后缀串排名第 <spanclass="math inline">\(i\)</span> 的串的起始位置为 <spanclass="math inline">\(sa_i\)</span>。这里注意需要倒序枚举 <spanclass="math inline">\(i\)</span>，因为我们只划定了排序名次的上界。确切的名次需要由上界依次递减得到。</p></li><li><p>而后我们进行更多次的倍增，处理长度为 <spanclass="math inline">\(k\)</span>的串。考虑到如果合并两个串时，第一个串的起始位置 <spanclass="math inline">\(i\gen-k+1\)</span>，我们第二个串就是空串，需要提前处理。而且这些串合并后，排名一定比第二个串非空的靠前。下面的<span class="math inline">\(num\)</span> 表示第二关键字排名。注意 <spanclass="math inline">\(y\)</span>数组保存的是对应的第一关键字的位置。</p></li><li><p>而后我们对于所有可能的第二串加入 <spanclass="math inline">\(y\)</span> 数组。只有 <spanclass="math inline">\(sa[i]&gt; k\)</span>时才可行（短于倍增长度无法找到第一串）。</p></li><li><p>仿照第一次倍增的思路处理第一关键字桶。</p></li><li><p>基数排序，因为 <span class="math inline">\(y\)</span>的顺序是按照第二关键字的顺序来排的，第二关键字靠后的，在同一个第一关键字桶中排名越靠后。</p></li><li><p>清空第一关键字数组，并根据当前值重新赋关键字。注意到此时我们直接按后缀数组赋值即可，本身有序。更新桶上限<span class="math inline">\(m\)</span>。</p></li></ol><p>完整代码如下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Suffix_Array</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;(s+<span class="number">1</span>);                                                       <span class="comment">//Step.1</span></span><br><span class="line">    n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    m=<span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) c[x[i]=s[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=m;i++) c[i]+=c[i<span class="number">-1</span>];                               <span class="comment">//Step.2</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i;i--) sa[c[x[i]]--]=i;                               <span class="comment">//Step.3</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k&lt;&lt;=<span class="number">1</span>)&#123;                                          <span class="comment">//Step.4</span></span><br><span class="line">        <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n-k+<span class="number">1</span>;i&lt;=n;i++) y[++num]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(sa[i]&gt;k) y[++num]=sa[i]-k;           <span class="comment">//Step.5</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) c[i]=<span class="number">0</span>;                                 <span class="comment">//Step.6</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) c[x[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=m;i++) c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n;i;i--) sa[c[x[y[i]]]--]=y[i];                     <span class="comment">//Step.7</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) lstx[i]=x[i],x[i]=<span class="number">0</span>;                    <span class="comment">//Step.8</span></span><br><span class="line">        num=<span class="number">1</span>;</span><br><span class="line">        x[sa[<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(lstx[sa[i]]==lstx[sa[i<span class="number">-1</span>]]&amp;&amp;lstx[sa[i]+k]==lstx[sa[i<span class="number">-1</span>]+k]) x[sa[i]]=num;</span><br><span class="line">            <span class="keyword">else</span> x[sa[i]]=++num;</span><br><span class="line">        &#125;</span><br><span class="line">        m=num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二子串最长公共前缀">二、子串最长公共前缀</h1><p>我们记 <span class="math inline">\(\text{LCP}(i,j)\)</span>表示字符串排名为 <span class="math inline">\(i\)</span>的后缀串，和排名为 <span class="math inline">\(j\)</span>的后缀串的最长公共前缀，根据性质计算。</p><h2 id="quad-基本性质">2.1 <span class="math inline">\(\quad\)</span>基本性质</h2><p><strong>性质 1</strong> <span class="math inline">\(\quad\)</span><spanclass="math inline">\(\text{LCP}(i,j)=\text{LCP}(j,i)\)</span>。</p><p><strong>性质 2</strong> <span class="math inline">\(\quad\)</span><spanclass="math inline">\(\text{LCP}(i,i)=\text{len}(sa[i])=n-sa[i]+1\)</span>。其中，<spanclass="math inline">\(\text{len(i)}\)</span> 表示起始位置为 <spanclass="math inline">\(i\)</span> 的后缀串的长度。</p><p>上面两个性质显然。</p><p><strong>性质 3</strong> <span class="math inline">\(\quad\)</span><span class="math inline">\(\forall 1\le i\le j\le k\le n\ ,\\text{LCP}(i,k)=\min(\text{LCP}(i,j),\text{LCP}(j,k))\)</span> 。</p><p>因为是按照后缀排序的，所以易证。</p><p>进而得出，按照后缀排完序的后缀串，两个后缀串的最长公共前缀就等于<span class="math inline">\(height_{i+1}\cdots height_j\)</span>取最小值。 <strong>性质 4</strong> <spanclass="math inline">\(\quad\)</span> <span class="math inline">\(\forall1&lt;i\le j\le k\le n\ ,\\text{LCP}(i,k)=\min(\text{LCP}(j,j-1))\)</span>。</p><p><strong>性质 5</strong> <span class="math inline">\(\quad\)</span><span class="math inline">\(h_i\geh_{i-1}-1\)</span>，这是<strong>关键性质</strong>。</p><p>考虑粗略证明性质5。令第 <span class="math inline">\(i-1\)</span>位为字符 <span class="math inline">\(s\)</span>，则 <spanclass="math inline">\(i-1\)</span> 位置的后缀为 <spanclass="math inline">\(sX\)</span>，<spanclass="math inline">\(i\)</span> 位置的后缀为 <spanclass="math inline">\(X\)</span>。</p><p>我们找到后缀排名在 <span class="math inline">\(sX\)</span>前一名的后缀，即 <span class="math inline">\(sa[rk[i-1]-1]\)</span>，记<span class="math inline">\(k\)</span>为这个排名。这两个后缀的最长公共前缀就是 <spanclass="math inline">\(height[rk[i-1]]\)</span>。分成两类情况讨论：</p><ul><li>如果第 <span class="math inline">\(k\)</span> 个串和第 <spanclass="math inline">\(i-1\)</span>个串第一个字符不同，即没有公共前缀，即 <spanclass="math inline">\(height[rk[i-1]]=0\)</span>，一定有 <spanclass="math inline">\(height[rk[i]]\ge height[rk[i-1]]+1\)</span>，即<span class="math inline">\(h[i]\ge h_[i-1]-1\)</span>。</li><li>如果第 <span class="math inline">\(k\)</span> 个串和第 <spanclass="math inline">\(i-1\)</span> 个串第一个字符相同，可以表示第 <spanclass="math inline">\(k\)</span> 个串为 <spanclass="math inline">\(sY\)</span>。一定有 <spanclass="math inline">\(sY&lt;sX\Rightarrow Y&lt;X\)</span>。那么第 <spanclass="math inline">\(k+1\)</span> 个字符串要排名在 <spanclass="math inline">\(i\)</span> 前面。那么第 <spanclass="math inline">\(k+1\)</span> 个字符串和 <spanclass="math inline">\(i\)</span> 的最长公共前缀就是 <spanclass="math inline">\(height[rk[i-1]]-1\)</span>。根据性质4可得 <spanclass="math inline">\(h[i]\ge h[i-1]=1\)</span>。</li></ul><h2 id="quad-后缀排序最长公共前缀的计算">2.2 <spanclass="math inline">\(\quad\)</span> 后缀排序最长公共前缀的计算</h2><p>我们利用性质5计算后置排序后的 <spanclass="math inline">\(height\)</span> 数组和 <spanclass="math inline">\(h\)</span> 数组。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">getheight</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) rnk[sa[i]]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(rnk[i]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(j) j--;</span><br><span class="line">        <span class="keyword">while</span>(i+j&lt;=n&amp;&amp;sa[rnk[i]<span class="number">-1</span>]+j&lt;=n&amp;&amp;s[i+j]==s[sa[rnk[i]<span class="number">-1</span>]+j]) j++;</span><br><span class="line">        heigh[rnk[i]]=j;                  <span class="comment">//h[i]=height[rnk[i]]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ramsey 定理</title>
      <link href="/post/a1e7c3dbc7c4.html"/>
      <url>/post/a1e7c3dbc7c4.html</url>
      
        <content type="html"><![CDATA[<p>Ramsey 定理</p><h1 id="一ramsey-定理">一、Ramsey 定理</h1><p>Ramsey定理是关于鸽巢原理的重要拓展，甚至可以从另一个维度解释鸽巢原理。</p><h2 id="quad-基本定义">1.1 <span class="math inline">\(\quad\)</span>基本定义</h2><p>我们先给出一些定义。</p><p>对于由 <span class="math inline">\(n\)</span>个点构成的图，两两节点直接都有边直接相连，则成这张图是<strong>完全图</strong>。</p><p>我们把 <span class="math inline">\(p\)</span> 个点的完全图，记作<span class="math inline">\(K_p\)</span>。</p><p>我们用两种颜色对所有边进行染色，染色成 <spanclass="math inline">\(a\)</span> 或者 <spanclass="math inline">\(b\)</span>，如果下面两个条件至少满足其一：</p><ol type="1"><li>存在 <span class="math inline">\(n\)</span>个点的子集，使其构成的完全图中所有边的颜色为同一种颜色 <spanclass="math inline">\(a\)</span>；</li><li>存在 <span class="math inline">\(m\)</span>个点的子集，使其构成的完全图中所有边的颜色为同一种颜色 <spanclass="math inline">\(b\)</span>。</li></ol><p>我们记作 <span class="math display">\[K_p\rightarrow K_m,K_n\]</span> 我们记 Ramsey 数 <span class="math inline">\(r(n,m)\)</span>是使 <span class="math inline">\(K_p\rightarrow K_n,K_m\)</span>的最小正整数 <span class="math inline">\(p\)</span>。我们不难发现 <spanclass="math display">\[r(n,m)=r(m,n)\]</span> &gt; <strong>例子</strong> <spanclass="math inline">\(\quad\)</span> 在 <spanclass="math inline">\(6\)</span> 个人构成的集合中，要么 <spanclass="math inline">\(3\)</span> 个人互相认识，要么 <spanclass="math inline">\(3\)</span> 个人互相不认识。</p><p>我们给出这个例子的证明。</p><p>我们对于 <span class="math inline">\(6\)</span>个点的完全图，两个人间互相认识则边染红色，否则边染蓝色。考虑图中的任意一个点<span class="math inline">\(p\)</span>，与其相连的 <spanclass="math inline">\(5\)</span> 条边中，至少有 <spanclass="math inline">\(3\)</span>条边颜色相同（根据鸽巢原理可得）。因为情况对称，我们令染红色的边数至少为<span class="math inline">\(3\)</span>，那我们举出这三条边连接的三个点<span class="math inline">\(a,b,c\)</span>，分类考虑以下情况：</p><ul><li>如果由 <span class="math inline">\(a,b,c\)</span>三个点构成的完全图中所有边都是蓝色，那么这三个点构成一个蓝 <spanclass="math inline">\(K_3\)</span>。</li><li>如果由 <span class="math inline">\(a,b,c\)</span>三个点构成的完全图中有一个边是红色，那么这条红边连接的两个点，和点 <spanclass="math inline">\(p\)</span> 构成一个红 <spanclass="math inline">\(K_3\)</span>。</li></ul><p>则红 <span class="math inline">\(K_3\)</span> 和蓝 <spanclass="math inline">\(K_3\)</span>两个至少有一个成立。即证明了这个结论。</p><h2 id="quad-基本的-ramsey-定理">1.2 <spanclass="math inline">\(\quad\)</span> 基本的 Ramsey 定理</h2><p>下面给出更广泛的定理和证明。</p><p><strong>定理</strong> <span class="math inline">\(\quad\)</span><span class="math inline">\(\forall n,m\ge 2,\exists p\in\mathbb{N}_+\)</span>，使得 <span class="math display">\[K_p\rightarrow K_m,K_n\]</span> <strong>证明</strong> <spanclass="math inline">\(\quad\)</span> 我们很容易确定 <spanclass="math inline">\(r(2,n)\)</span> 和 <spanclass="math inline">\(r(n,2)\)</span> 的值。下面证明 <spanclass="math inline">\(r(2,n)=r(n,2)=n\)</span>。</p><ul><li>确定 <span class="math inline">\(r(2,n)\leqn\)</span>：如果所有边都是同一种颜色，则 <spanclass="math inline">\(K_n\)</span> 成立；否则 <spanclass="math inline">\(K_2\)</span> 成立。</li><li>确定<span class="math inline">\(r(2,n)&gt;n-1\)</span>：如果有一个红<span class="math inline">\(K_{n-1}\)</span>，我们并不能得到蓝 <spanclass="math inline">\(K_2\)</span> 或者红 <spanclass="math inline">\(K_n\)</span>。</li></ul><p>下面用归纳法证明广泛结论。</p><p>假设 <span class="math inline">\(m,n\ge 3\)</span> ，归纳假设为 <spanclass="math inline">\(r(m-1,n)\)</span> 和 <spanclass="math inline">\(r(m,n-1)\)</span> 存在。设 <spanclass="math inline">\(p=r(m-1,n)+r(m,n-1)\)</span>，下面证明 <spanclass="math inline">\(K_p\rightarrow K_m,K_n\)</span> 存在。</p><p>假设 <span class="math inline">\(K_p\)</span>已经通过某种方式完成红色和蓝色的染色，我们对其中的一个节点 <spanclass="math inline">\(x\)</span>，记 <spanclass="math inline">\(B_x,R_x\)</span> 分别为通过蓝色边和红色边在图中与<span class="math inline">\(x\)</span> 相连的点的集合。有 <spanclass="math display">\[|R_x|+|B_x|=p-1=r(m-1,n)+r(n,m-1)-1\]</span> 也就是说，以下两个条件至少有一个成立：</p><ol type="1"><li><span class="math inline">\(|R_x|\ge r(m-1,n)\)</span>；</li><li><span class="math inline">\(|B_x|\ge r(m,n-1)\)</span>。</li></ol><p>可以通过鸽巢原理说明这一点，因为如果两个都不成立，则 <spanclass="math inline">\(|R_x|+|B_x|\ler(m+1,n)+r(m,n-1)-1=p-2\)</span>，矛盾。</p><p>我们假设条件1成立，也就是 <span class="math inline">\(|R_x|\ger(m-1,n)\)</span>，说明下面两个条件至少有一个成立：</p><ul><li>可能存在一个红 <spanclass="math inline">\(K_{m-1}\)</span>，这个图的节点就是 <spanclass="math inline">\(R_x\)</span> 中的节点。如果我们将 <spanclass="math inline">\(x\)</span> 加入这个图，因为与 <spanclass="math inline">\(x\)</span> 相连的边为红色，就可以得到一个 <spanclass="math inline">\(K_m\)</span>，完成证明；</li><li>可能存在一个蓝 <spanclass="math inline">\(K_n\)</span>，这时我们直接完成了证明。</li></ul><p>所以此时结论成立。同理，若条件2成立，则结论也一定成立。</p><p><strong>证毕</strong>。</p><p>上面的证明不仅证明了 Ramsey 数的存在，也给出了不等式 <spanclass="math display">\[r(m,n)\le r(m-1,n)+r(m,n-1)\quad (m,n\ge 3)\]</span> 设函数 <span class="math display">\[f(m,n)=\dbinom{m+n-2}{m-1}\quad (m,n\ge 2)\]</span> 得到 <span class="math display">\[f(m,n)=\dbinom{m+n-3}{m-1}+\dbinom{m+n-3}{m-2}=f(m-1,n)+f(m,n-1)\]</span> 这是一个等式。因为 <spanclass="math inline">\(r(2,n)=n=f(2,n)\ ,\ r(m,2)=m=f(m,2)\)</span>，所得Ramsey 数满足 <span class="math display">\[r(m,n)\le \dbinom{m+n-2}{m-1}=\dbinom{m+n-2}{n-1}\]</span></p><h2 id="quad-ramsey-定理的推广">1.3 <spanclass="math inline">\(\quad\)</span> Ramsey 定理的推广</h2><p>上面我们将一个完全图每条边染成了 <spanclass="math inline">\(2\)</span> 种颜色，我们将其扩展，对一个点数为<span class="math inline">\(n\)</span> 的完全图，用 <spanclass="math inline">\(k\)</span> 种颜色染色。如果 <spanclass="math inline">\(n_1,n_2,\cdots,n_k\ge 2\)</span>，则存在 <spanclass="math inline">\(p\)</span> 使得： <span class="math display">\[K_p\rightarrow K_{n_1},K_{n_2}\cdots,K_{n_k}\]</span> 使得该结论成立的最小整数 <spanclass="math inline">\(p\)</span> 称为 Ramsey 数 <spanclass="math inline">\(r(n_1,n_2,\cdots ,n_k)\)</span>。</p><p>如果我们把点对（两个元素的子集）扩展成 <spanclass="math inline">\(t\)</span> 个元素的子集，令 <spanclass="math inline">\(K_n^t\)</span> 表示 <spanclass="math inline">\(n\)</span> 元素集合种所有 <spanclass="math inline">\(t\)</span> 个元素的子集的集合，扩展 Ramsey定理。</p><p>给定整数 <span class="math inline">\(t\ge 2\)</span> 和整数 <spanclass="math inline">\(q_1,q_2,\cdots ,q_k\ge t\)</span>，存在整数 <spanclass="math inline">\(p\)</span>，使得 <span class="math display">\[K_p^t\rightarrow K_{p_1}^t,K_{p_2}^t,\cdots,K_{p_k}^t\]</span> 满足结论的最小整数 <span class="math inline">\(p\)</span> 称为Ramsey 数 <spanclass="math inline">\(r(q_1,q_2,\cdots,q_k)\)</span>。</p><p><span class="math inline">\(q_1,q_2,\cdots,q_k\)</span>的排列并不影响 Ramsey 数的表现。</p>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记 《活着》</title>
      <link href="/post/bb1c83aedd06.html"/>
      <url>/post/bb1c83aedd06.html</url>
      
        <content type="html"><![CDATA[<p>活着</p><p>余华</p><p>2023.10.01 记</p><hr /><p>面朝大海 春暖花开 ——读《活着》有感</p><p>自从买这本书时，就看到不止一条评论：余华老师为什么要写得这么惨？但纵观福贵一生，也许在他的眼中，面对生活的态度和我们有所不同吧！</p><p>福贵自富家出身，祖上几代也想兴盛家业，但因子女无能日益破败。青年富贵正是在肆意放纵中度过的，也因此亲手赌出了自己的家产。眼看着祖上的东西丢得一干二净，亲人相继离世，前途的微光愈加消散……</p><p>但在福贵眼里，命运似乎是注定的。他在经历次次打击后，却没有因此堕落，而是坦然地活下去。</p><p>他的一生是乐观的，活着就是为了“活着”本身。对比《骆驼祥子》中的祥子，开始十分努力，而后经历世事变迁，自己也慢慢沦落，活得已不成人形。和祥子活在几乎同一个历史背景的福贵，为什么并没有因家庭破碎、事业破败而选择“放弃活的意义”？就在于自身面对生活的态度。前者虽然努力，但仍以乐观的态度对待“天命”，却早已是“成功地活着”。</p><p>他的一生是宽容的，活着只为了更好地生活。他在极度饥荒时，面对向老丈人借来的为数不多的几粒米，不吝啬于借给队长一部分；面对儿子有庆不公平地以“借血”为由死去，他并不责怪春生。因为他知道，谁的生活都是艰难的，没有被逼无奈也不会出此下策。</p><p>所以，“惨”可能并不是为写而写，更多地，可能时一个无法改变天命的普通人的映射。正如作者在序中写的：</p><blockquote><p>作家的使命不是发泄，不是控诉活着揭露。他应该向人们展示高尚。这里所说的高尚不是那种单纯的美好，而是对一切事物理解之后的超然、对善和恶的一视同仁，用同情的目光看待世界。</p></blockquote><p>尽管“惨”可能是人生的旋律，但一定不是人生的主题。它的主题应是“希望”。所以，人生遇挫之时，谨记“面朝大海，春暖花开”，而不是悲观地走向汪洋无望的深海——尽管不知以诗人的绝笔诗为题是否合适……</p><p>向死而生，有希望怎么都好。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『初丶晴』的模拟赛题解</title>
      <link href="/post/7cf54d2e491b.html"/>
      <url>/post/7cf54d2e491b.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="欸? 这个『通行证』看着不太对, 再试试看呢..." data-whm="密码不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="8aaf84673714e0fea1a3cc4856c5de7e6ca7354f6c82951706e5e5d9bc951313"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章被主人加密了, 小窝要核验主人给的『通行证』.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 做题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记 《解忧杂货铺》</title>
      <link href="/post/eebaee81d76a.html"/>
      <url>/post/eebaee81d76a.html</url>
      
        <content type="html"><![CDATA[<p>解忧杂货店</p><p>[日]东野圭吾</p><p>2023.07.30 记</p><hr /><p>最意味深长的一句话，莫过于作者在小说结尾处写下的，一份对『无名氏朋友』的寄语：</p><blockquote><p>地图是一张白纸，这当然很伤脑筋。任何人都会不知所措。</p><p>可是换个角度来看，正因为是一张白纸，才可以随心所欲地描绘地图。一切全在你自己。对你来说，一切都是自由的，在你面前是无限的可能。这可是很棒的事啊。<strong>我由衷祈祷你可以相信自己，无悔地燃烧自己的人生。</strong></p></blockquote><p>回顾整本书，情节错综，人物也有很多。但是越往后读越能感受到不同人的情节间的交叉、错综，甚至是对人生有着相互的影响。</p><p>整本书主要讲述浪矢雄治先生开的『解忧杂货店』的形形色色的小故事，其中暗线是杂货店和各位人物与孤儿院『丸光园』之间的联系。通过办理解忧业务，浪矢先生曾在儿子面前一再坚持，而最终因病去世。</p><p>但这间杂货店仿佛有魔法一般。杂货店仿佛能沟通今昔，相互来信。情节部分就不过多赘述了，总而言之写得非常圆润，给人一种即在情理之中，又在意料之外的感觉。</p><p>要说起能从书中读到什么，还要从那个寄语说起。</p><p>最近心烦意乱，总觉得有种莫名的压力，抑或是恐慌，故找到这本书，想让杂货店也为我“解解忧”。</p><p>在爱情和梦想之间徘徊不定、漂泊远方只为实现音乐梦想、面临家庭巨变无所适从……</p><p>这都是故事里的人们提出的烦恼。而他们的相遇、坚持、激励、奉献、不离不弃的陪伴，终究是他们都在某种意义上意识到了生而为人的价值，不论之前的选择是否是最优的。</p><p>人物之间的互相照应，是本只有一颗弱小脆弱心灵的丸光园孤儿，逐步迈向成长的阶梯，明白人世间的道理，最后懂得感恩，长大后终于明白了命运的抉择。</p><p>信任，在文中表现得尤为重要。不仅要相信自己，更要相信身边的每一个人，相信每一个可能为你好的建议（或许这些当时觉得并不正确）。只有团结和信任，才能使人在团体中得到发展。</p><p>若对于个体，重要的是永不言弃。坚信自己认为的正确道路，在他人的共同助理下，方可实现梦想。只有历经挫败、坎坷之后，风雨初晴时，放得见彩虹。</p><p>其实读完之后回看现实，等风雨过后回望过去时，也许会发出感慨：“原来不就是这么点事情嘛！”所以，杂货店真正解忧的是内心对过去和未来的幻想。我们真正留在当下：对未来，不恐惧；对过去，不怨恨。这时，才真正“解忧”了。</p><p>放弃天地间的幻想，留在现在，或许明天更美好呢~</p><p>不论是为自己，还是为你。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好题摘录 &lt;01&gt;</title>
      <link href="/post/441796a1a298.html"/>
      <url>/post/441796a1a298.html</url>
      
        <content type="html"><![CDATA[<h1 id="problem.1-等比数列求和">Problem.1 等比数列求和</h1><p>题目标签：分治、数学</p><h2 id="题目大意">题目大意</h2><p>对于有 <span class="math inline">\(x+1\)</span> 项的等比数列 <spanclass="math inline">\(A=a^0+a^1+\cdots+a^x\)</span>，求</p><p><span class="math display">\[(\sum\limits_{i-1}^xa^i)\bmod p\]</span></p><h2 id="数据范围">数据范围</h2><p><span class="math inline">\(1\leq a_i,x\leq 10^{18},1\leq p\leq10^9\)</span>。</p><h2 id="解题思路">解题思路</h2><p>考虑分治。</p><p>对于指数区间 <span class="math inline">\([0,m]\)</span>，令 <spanclass="math inline">\(m&#39;=\dfrac{m+1}{2}-1\)</span>。考虑对 <spanclass="math inline">\([0,m&#39;]\)</span> 和 <spanclass="math inline">\([m&#39;+1,m]\)</span> 分治进行处理。</p><p>对于区间 <span class="math inline">\([0,m&#39;]\)</span>，求得 <spanclass="math inline">\(U=\sum\limits_{i=0}^{m&#39;}a^i\)</span>。</p><p>对于区间 <spanclass="math inline">\([m&#39;+1,m]\)</span>，可以同时通过分治计算 <spanclass="math inline">\(V=a^{m&#39;+1}\)</span>，然后进行分类讨论：</p><ul><li>若 <span class="math inline">\(m\)</span>为奇数，则有偶数项，此时区间和为</li></ul><p><span class="math display">\[U+UV\]</span></p><ul><li>若 <span class="math inline">\(m\)</span>为偶数，则有奇数项，考虑先处理前 <spanclass="math inline">\(m-1\)</span> 项，最后加上第 <spanclass="math inline">\(m\)</span> 项，则区间和为</li></ul><p><span class="math display">\[U+UV+V^2\]</span></p><p>中间运算时加上取模运算即可。</p><h2 id="参考代码">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll x,a,p;</span><br><span class="line">ll v;</span><br><span class="line"><span class="function">ll <span class="title">work</span><span class="params">(ll m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!m)&#123;</span><br><span class="line">        v=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(m+<span class="number">1</span>)/<span class="number">2</span><span class="number">-1</span>;</span><br><span class="line">    ll u=<span class="built_in">work</span>(mid);</span><br><span class="line">    ll lv=v;</span><br><span class="line">    v=v*a%p;</span><br><span class="line">    <span class="keyword">if</span>(m&amp;<span class="number">1</span>)&#123;</span><br><span class="line">        ll ans=(u+u*v%p)%p;</span><br><span class="line">        v=lv*lv%p*a%p;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        ll ans=(u+u*v%p+v*v%p)%p;</span><br><span class="line">        v=v*v%p;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;x&gt;&gt;p;</span><br><span class="line">        a%=p;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">work</span>(x)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="problem.2-lis-number">Problem.2 LIS Number</h1><p>题目标签：组合数学、动态规划</p><p>题目来源：Topcoder SRM 585</p><h2 id="题目大意-1">题目大意</h2><p>设 <span class="math inline">\(A\)</span>是一个整数序列，<code>LIS Number</code> 是把 <spanclass="math inline">\(A\)</span>切成几个数列，每个数列内的数都单调增，能分出来的最小数列数。</p><p>例如，<span class="math inline">\(A=\{1,4,4,2,6,3\}\)</span> 的<code>LIS Number</code> 是 <spanclass="math inline">\(4\)</span>，因为我们可以用 <spanclass="math inline">\(\{1,4\} + \{4\} + \{2,6\} + \{3\}\)</span> 得到<span class="math inline">\(A\)</span>，并且没有办法创造一个连接 <spanclass="math inline">\(3\)</span>（或更少）个单调增序列。</p><p>特殊地，一个单调增序列的 <code>LIS Number</code> 是 <spanclass="math inline">\(1\)</span>。</p><p>你有 <span class="math inline">\(n\)</span> 种类型的卡片。每一个<span class="math inline">\(i\)</span>，对于 <spanclass="math inline">\(0\leq i&lt;n\)</span>，你有 <spanclass="math inline">\(cnt_i\)</span> 张 <spanclass="math inline">\(i\)</span> 型卡。每张第 <spanclass="math inline">\(i\)</span> 型卡上的数是 <spanclass="math inline">\(i\)</span>。</p><p>给你 <span class="math inline">\(cnt\)</span> 数组和整数 <spanclass="math inline">\(k\)</span>。你要排所有的卡成排，使所得到的整数序列的<code>LIS Number</code> 是 <span class="math inline">\(k\)</span> 。注意，你必须使用所有的卡，你只能选择它们的顺序。</p><p>计算 <span class="math inline">\(x\)</span>为你能产生的不同满足上述条件的序列数。计算并输出数 <spanclass="math inline">\(x\)</span> 模 <spanclass="math inline">\(1000000007(10^9+7)\)</span>。</p><h2 id="数据范围-1">数据范围</h2><p><span class="math inline">\(1 \leq n \leq 36,1\leq cnt_i \leq 36,1\leq k \leq 1296\)</span></p><h2 id="解题思路-1">解题思路</h2><p>考虑由小到大插入每种数字，进行动态规划。</p><p>我们设状态 <span class="math inline">\(f_{i,j}\)</span> 为：插入完前<span class="math inline">\(i\)</span> 种数字，共生成了 <spanclass="math inline">\(j\)</span> 个上升序列的方案数。</p><p>我们把安排好的数字看做一个序列，设当前序列里有 <spanclass="math inline">\(sum\)</span>个数字，我们要新安排进去的这种数字一共有 <spanclass="math inline">\(cnt\)</span> 个。</p><p>此时我们新加入一种新的数字。如果我们把一些数字安排到原来的每个上升序列的末尾，则这个大序列的<code>LIS Number</code> 不变，而插入到其他位置，必然会导致<code>LIS Number</code> 个数增加。</p><p>考虑枚举放 <span class="math inline">\(t\)</span> 个数字到共有 <spanclass="math inline">\(j\)</span>个上升序列的大序列末尾（即不会改变序列答案），则序列答案会增加 <spanclass="math inline">\(cnt-t\)</span>。</p><p>我们要把 <span class="math inline">\(u=cnt-t\)</span> 个数放在 <spanclass="math inline">\(v=sum+1-j+t\)</span> 个位置里（因为在总共的 <spanclass="math inline">\(sum+1\)</span> 个空格中，有 <spanclass="math inline">\(j-t\)</span>个位置已经被“放置在序列末尾”的策略占据），就可以把问题抽象成：把排成一列的<span class="math inline">\(u\)</span> 个球，分成 <spanclass="math inline">\(v\)</span>个抽屉里，允许有抽屉空着不放，求所有分法的方案数——这就可以用组合数处理，方案数为<span class="math inline">\(C_{u+v-1}^u\)</span>。</p><p>所以递推式为</p><p><span class="math display">\[f_{i,j+u}=f_{i-1,j}\cdot C_j^t \cdot C_{u+v-1}^u\]</span></p><h2 id="参考代码-1">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 1305</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> n,cnt[MAXN],k;</span><br><span class="line">ll f[MAXN][MAXN],C[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;LISNumber.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;LISNumber.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;cnt[i];</span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1296</span>;i++)&#123;</span><br><span class="line">        C[i][<span class="number">0</span>]=C[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">            C[i][j]=C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            C[i][j]%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">1</span>][cnt[<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> sum=cnt[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=k;j++) <span class="keyword">if</span>(f[i<span class="number">-1</span>][j])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> t=<span class="number">0</span>;t&lt;=<span class="built_in">min</span>(j,cnt[i]);t++)&#123;</span><br><span class="line">                <span class="type">int</span> x=sum+<span class="number">1</span>-j+t;</span><br><span class="line">                <span class="type">int</span> y=cnt[i]-t;</span><br><span class="line">                f[i][j+y]+=f[i<span class="number">-1</span>][j]*C[j][t]%mod*C[x+y<span class="number">-1</span>][y]%mod;</span><br><span class="line">                f[i][j+y]%=mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sum+=cnt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[n][k];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="problem.3-小蓝的旅行计划">Problem.3 小蓝的旅行计划</h1><p>题目标签：贪心、线段树</p><p>题目来源：第十四届蓝桥杯大赛软件赛省赛</p><h2 id="题目大意-2">题目大意</h2><p>小蓝正计划进行一次漫长的旅行。小蓝计划开车完成这次旅行。显然他在途中需要加油，否则可能无法完成这次旅行。</p><p>小蓝要依次经过 <span class="math inline">\(n\)</span>个地点，其中从第 <span class="math inline">\(i-1\)</span> 个地点到达第<span class="math inline">\(i\)</span> 个地点需要消耗 <spanclass="math inline">\(Dis_i\)</span>升油。小蓝经过的每个地点都有一个加油站，但每个加油站的规定也不同。在第<span class="math inline">\(i\)</span> 个加油站加 <spanclass="math inline">\(1\)</span> 升油需要 <spanclass="math inline">\(Cost_i\)</span> 的费用，且在这个加油站最多只能加<span class="math inline">\(Lim_i\)</span> 升油。</p><p>小蓝的车的油箱也有容量限制，他的车上最多只能装载 <spanclass="math inline">\(m\)</span> 升油。</p><p>一开始小蓝的油箱是满的，请问小蓝需要准备多少钱才能顺利完成他的旅行计划。如果小蓝按给定条件无论准备多少钱都不能完成他的旅行计划，请输出<span class="math inline">\(-1\)</span> 。</p><h2 id="数据范围-2">数据范围</h2><p><span class="math inline">\(1 \leq n \leq 2\times 10^5\;,\;1 \leqDis_i\;,\;Lim_i\;,\;m \leq 10^9\)</span>。</p><h2 id="解题思路-2">解题思路</h2><p>考虑从第 <span class="math inline">\(1\)</span> 个点到第 <spanclass="math inline">\(n\)</span> 个点，逐个贪心考虑。</p><p>从开头开始旅行，每走到一个点，尽可能少地加油，使得可以到达这个点，一定比加好多油到这里划算。</p><p>所以只考虑到达该点时，剩余的油量 <spanclass="math inline">\(oil&lt;0\)</span>的情况时，在前面的加油站进行加油操作。</p><p>但是在哪里加油可以保证加油之后，一直走到这个当前的节点，一路上任何时刻油量小于油箱容量<span class="math inline">\(m\)</span>，并且花费最少呢？</p><p>考虑贪心处理，利用优先队列记录前面每一个加油站能加的油量和单价。注意，在到达位置<span class="math inline">\(i\)</span> 时，在位置 <spanclass="math inline">\(j\)</span> 加油，需要保证加 <spanclass="math inline">\(k\)</span> 升油之后，使得对于在 <spanclass="math inline">\([j,i]\)</span>中任意时刻，油箱里的油量需要小于等于 <spanclass="math inline">\(m\)</span>。而在这里加完 <spanclass="math inline">\(k\)</span>升油之后，会对后面旅途的油量产生影响，需要对 <spanclass="math inline">\([j,i]\)</span> 区间中的油量加上 <spanclass="math inline">\(k\)</span>。</p><p>考虑用线段树记录每个节点时的油量，进行区间查询、区间修改、单点修改。</p><p>当没有油可以加，并且到不了节点 <span class="math inline">\(i\)</span>时（即 <span class="math inline">\(oil&lt;0\)</span>且优先队列为空），判断无解。</p><h2 id="参考代码-2">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 200005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((tree[p].l+tree[p].r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls (p&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs (p&lt;&lt;1|1)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">K</span>&#123;</span><br><span class="line">    <span class="type">int</span> cost,lim,id;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(K x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cost&gt;x.cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;K&gt; q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r,maxx,tag;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    tree[p].l=l,tree[p].r=r;</span><br><span class="line">    <span class="keyword">if</span>(tree[p].l==tree[p].r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">build</span>(l,mid,ls);</span><br><span class="line">    <span class="built_in">build</span>(mid+<span class="number">1</span>,r,rs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[p].tag)&#123;</span><br><span class="line">        <span class="type">int</span> k=tree[p].tag;</span><br><span class="line">        tree[ls].maxx+=k;</span><br><span class="line">        tree[ls].tag+=k;</span><br><span class="line">        tree[rs].maxx+=k;</span><br><span class="line">        tree[rs].tag+=k;</span><br><span class="line">        tree[p].tag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    tree[p].maxx=<span class="built_in">max</span>(tree[ls].maxx,tree[rs].maxx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[p].l&amp;&amp;r&gt;=tree[p].r)&#123;</span><br><span class="line">        tree[p].maxx+=k;</span><br><span class="line">        tree[p].tag+=k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modify</span>(l,r,k,ls);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) <span class="built_in">modify</span>(l,r,k,rs);</span><br><span class="line">    <span class="built_in">update</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[p].l&amp;&amp;r&gt;=tree[p].r) <span class="keyword">return</span> tree[p].maxx;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(l,r,ls));</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(l,r,rs));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> oil=m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> dist,cost,lim,i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;dist&gt;&gt;cost&gt;&gt;lim;</span><br><span class="line">        oil-=dist;</span><br><span class="line">        <span class="built_in">modify</span>(i,i,oil,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(oil&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;cost,lim,i&#125;);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>()&amp;&amp;oil&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            K now=q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> cost=now.cost,lim=now.lim,id=now.id;</span><br><span class="line">            <span class="type">int</span> maxx=<span class="built_in">query</span>(id,i<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">            lim=<span class="built_in">min</span>(lim,m-maxx);</span><br><span class="line">            <span class="type">int</span> add=<span class="built_in">min</span>(lim,-oil);</span><br><span class="line">            lim-=add;</span><br><span class="line">            ans+=add*cost;</span><br><span class="line">            oil+=add;</span><br><span class="line">            <span class="keyword">if</span>(lim) q.<span class="built_in">push</span>(&#123;cost,lim,id&#125;);</span><br><span class="line">            <span class="built_in">modify</span>(id,i,add,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(oil&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        q.<span class="built_in">push</span>(&#123;cost,lim,i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="problem.4-distinct-numbers">Problem.4 Distinct Numbers</h1><p>题目标签：博弈论</p><p>题目来源：ARC137C</p><h2 id="题目大意-3">题目大意</h2><p>给定长为 <span class="math inline">\(N\)</span> 的非负整数列 <spanclass="math inline">\(A:a_1,a_2,\cdotsa_n\)</span>，保证元素互不相同。</p><p>Alice 和 Bob 在玩游戏。Alice为先手，两人轮流操作。每次操作选手可以如下进行：</p><ul><li>选择当前 <span class="math inline">\(A\)</span>中最大的元素，将其替换为一个更小的非负整数。要求替换后 <spanclass="math inline">\(A\)</span> 中元素仍然互不相同。</li></ul><p>首先无法操作的一方失败。当两人都采取最优策略时，求谁有必胜策略。</p><h2 id="数据范围-3">数据范围</h2><p><span class="math inline">\(2\leq N \leq 3\times 10^5,0\leq a_i\leq10^9\)</span>。</p><h2 id="解题思路-3">解题思路</h2><p>考虑每次都会将一个数减小，会有如下最优策略，记 <spanclass="math inline">\(x\)</span> 为最大元素， <spanclass="math inline">\(y\)</span> 为次大元素：</p><ol type="1"><li>若 <span class="math inline">\(y+1&lt;x\)</span>，即 <spanclass="math inline">\(x,y\)</span> 之间有空位。操作者可以将 <spanclass="math inline">\(x\)</span> 改变至大于 <spanclass="math inline">\(y\)</span> 或小于 <spanclass="math inline">\(y\)</span>，从而将局面交给对方。如果其中某个操作会失败，可以选择另一个操作。因为两种操作最后交给对方的局面是对立的。</li><li>若 <span class="math inline">\(y+1=x\)</span>，即 <spanclass="math inline">\(x,y\)</span> 之间没有空位。因为每次都会减少至少<span class="math inline">\(1\)</span>，每次会填补一个空，答案就会和<span class="math inline">\(\text{mex}\)</span>有关系。如果有奇数个空，那么前者胜，否则前者必败。</li></ol><h2 id="参考代码-3">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 300005</span></span><br><span class="line"><span class="type">int</span> t,n,a[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>) num+=a[i];</span><br><span class="line">        <span class="keyword">else</span> num+=a[i]-a[i<span class="number">-1</span>]<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((a[n]==a[n<span class="number">-1</span>]+<span class="number">1</span>&amp;&amp;(num&amp;<span class="number">1</span>))||a[n]!=a[n<span class="number">-1</span>]+<span class="number">1</span>) cout&lt;&lt;<span class="string">&quot;Alice&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;Bob&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="problem.5-present">Problem.5 Present</h1><p>题目标签：数学、思维</p><p>题目来源：CF1322B</p><h2 id="题目大意-4">题目大意</h2><p>给出一个长度为 <span class="math inline">\(n\)</span> 的数列 <spanclass="math inline">\(a\)</span>。其中第 <spanclass="math inline">\(i\)</span> 项为 <spanclass="math inline">\(a_i\)</span>。</p><p>求</p><p><span class="math display">\[\bigoplus\limits_{i=1}^n\bigoplus\limits_{j=i+1}^n(a_i+a_j)\]</span></p><p>其中 <span class="math inline">\(\oplus\)</span>表示按位异或操作。</p><h2 id="数据范围-4">数据范围</h2><p><span class="math inline">\(1\leq n\leq 4\times 10^5,1\leq a_i\leq10^7\)</span>。</p><h2 id="解题思路-4">解题思路</h2><p>首先可以得到 <span class="math inline">\(O(n^2)\)</span>的暴力算法。我们换个思路考虑问题。</p><p>我们直接求解答案的每一个二进制位，可以从低位向高位处理每个位。对于答案的第<span class="math inline">\(k\)</span> 个二进制位，考虑其为 <spanclass="math inline">\(1\)</span> 的条件：<spanclass="math inline">\(\forall a_i+a_j(1\leq i&lt;j\leqn)\)</span>，统计其和的第 <span class="math inline">\(k\)</span> 位为<span class="math inline">\(1\)</span> 的个数 <spanclass="math inline">\(num\)</span>，只有 <spanclass="math inline">\(num\)</span> 位奇数时，这一位才可能位 <spanclass="math inline">\(1\)</span>，只与比其小的位有关。</p><p>从此我们得到了这个重要的性质，那我们就要考虑怎样统计 <spanclass="math inline">\(num\)</span>。</p><p>对于第 <span class="math inline">\(k\)</span> 位（最低位为第 <spanclass="math inline">\(0\)</span> 位），我们只考虑一个数 <spanclass="math inline">\(b\)</span> 的前 <spanclass="math inline">\(k\)</span> 低位，这个操作可以简单地通过 <spanclass="math inline">\(b\&amp;(2^{k+1}-1)\)</span>得到，得到的数的取值范围为 <spanclass="math inline">\([0,2^{k+1}-1]\)</span>。</p><p>这一位为 <span class="math inline">\(1\)</span> 有如下两种可能：</p><ul><li>没有进位，那么和在 <spanclass="math inline">\([2^{k},2^{k+1}-1]\)</span> 的范围内；</li><li>若有进位，那么和在 <spanclass="math inline">\([2^{k+1}+2^k,(2^{k+1}-1)\times 2]\)</span>，等价于<span class="math inline">\([2^i\times 3,2^{k+2}-2]\)</span>。</li></ul><p>这样我们得到了两个连续的区间。我们只需要找和在这两个区间范围内的<span class="math inline">\(a_i+a_j\)</span> 即可（这里的 <spanclass="math inline">\(a_i,a_j\)</span> 只保留前 <spanclass="math inline">\(k\)</span> 小位）。</p><p>我们可以通过双指针求出这个个数。具体地，令 <spanclass="math inline">\(b_i=a_i\&amp;(2^{k+1}-1)\)</span>。因为顺序不影响结果，不妨先对<span class="math inline">\(b\)</span> 升序排序。那么对于每一个 <spanclass="math inline">\(b_i\)</span>，每个满足 <spanclass="math inline">\(b_i+b_j\)</span> 在合法范围内的 <spanclass="math inline">\(j\)</span>是连续的，而且具有单调性。我们从大到小枚举 <spanclass="math inline">\(i\)</span> 的时候（因为排过序，所以 <spanclass="math inline">\(b_i\)</span> 也是从大到小的），合法的 <spanclass="math inline">\(j\)</span> 的区间是单调不降的。这样可以 <spanclass="math inline">\(O(n)\)</span> 的时间内求出低 <spanclass="math inline">\(k\)</span> 位为 <spanclass="math inline">\(1\)</span> 的加和的个数 <spanclass="math inline">\(num\)</span>，进而判断答案的第 <spanclass="math inline">\(k\)</span> 位是否为 <spanclass="math inline">\(1\)</span>。</p><p>因为需要枚举每个二进制位 <spanclass="math inline">\(k\)</span>，所以算法的总时间复杂度为 <spanclass="math inline">\(O(n\log N)\)</span>，其中 <spanclass="math inline">\(N\)</span> 为值域。</p><h2 id="参考代码-4">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 400005</span></span><br><span class="line"><span class="type">int</span> n,a[MAXN],b[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">count</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">1</span>,i=n;i;i--)&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=n&amp;&amp;b[i]+b[l]&lt;x) l++;</span><br><span class="line"><span class="keyword">while</span>(r&lt;=n&amp;&amp;b[i]+b[r]&lt;=y) r++;</span><br><span class="line">cnt+=r-l;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=l&amp;&amp;i&lt;r) cnt--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (cnt&gt;&gt;<span class="number">1</span>)&amp;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> p=<span class="number">0</span>;p&lt;=<span class="number">24</span>;p++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">b[i]=a[i]&amp;((<span class="number">1</span>&lt;&lt;(p+<span class="number">1</span>))<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+<span class="number">1</span>+n);</span><br><span class="line"><span class="type">bool</span> k1=<span class="built_in">count</span>(<span class="number">1</span>&lt;&lt;p,(<span class="number">1</span>&lt;&lt;(p+<span class="number">1</span>))<span class="number">-1</span>);</span><br><span class="line"><span class="type">bool</span> k2=<span class="built_in">count</span>(<span class="number">3</span>&lt;&lt;p,(<span class="number">1</span>&lt;&lt;(p+<span class="number">2</span>))<span class="number">-2</span>);</span><br><span class="line">ans|=((<span class="number">1</span>&amp;(k1^k2))&lt;&lt;p);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="problem.6-签到题">Problem.6 签到题</h1><p>题目标签：图论、异或操作</p><p>题目来源：校内联考 [SO Round 1] T2</p><h2 id="题目大意-5">题目大意</h2><p>给你一张 <span class="math inline">\(n\)</span> 个点，<spanclass="math inline">\(m\)</span> 条边的无向图，边有边权 <spanclass="math inline">\(w\)</span>，定义一条路径的价值为它所经过的边的边权的异或和。</p><p>求从节点 <span class="math inline">\(1\)</span> 到节点 <spanclass="math inline">\(n\)</span> 的价值最大的路径的价值。</p><h2 id="数据范围-5">数据范围</h2><p><span class="math inline">\(1 \le n,m \le 3 \times 10^5,0 \le w \le2^{30}\)</span>。</p><h2 id="解题思路-5">解题思路</h2><p>很巧妙的想法。</p><p>我们可能走很长的路径，每个路径的转移不符合三角形不等式，所以不能用求解最短路的方法求解。换个思路，因为是异或和，我们无需考虑具体怎样走的，只用考虑要走哪个边：考虑如果图上有一个环，我们可以任意地走这个简单环。如果我们从一个节点进，又从环的这个节点出去，这样只对对答案有影响。</p><p>那我们就可以找到图上的每个简单环，最后找到从 <spanclass="math inline">\(1\)</span> 到 <spanclass="math inline">\(n\)</span> 的路径即可。</p><p>或许我们实现的可以更加简单一些：我们构造出一个 <spanclass="math inline">\(\text{dfs}\)</span>生成树，对于不在树上的边，只可能是返祖边，从而构成一个环。我们记 <spanclass="math inline">\(dis_i\)</span> 为从 <spanclass="math inline">\(1\)</span> 到 <spanclass="math inline">\(i\)</span>在生成树上面的路径价值。我们把这样每一个环放到线性基里面，最后只需要在线性基里面求出关于<span class="math inline">\(dis_n\)</span>的最大异或和即可。（这意味着我们在一条从 <spanclass="math inline">\(1\)</span> 走到 <spanclass="math inline">\(n\)</span> 的路径上随意地走简单环）</p><p>时间复杂度为 <span class="math inline">\(O(n\log w)\)</span>。</p><h2 id="参考代码-5">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 300005</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">int</span> n,m,dis[MAXN],t[<span class="number">50</span>];</span><br><span class="line">vector&lt;pii&gt; g[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>((x&gt;&gt;i)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t[i]) x^=t[i];</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                t[i]=x;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> nd:g[u])&#123;</span><br><span class="line">        <span class="type">int</span> v=nd.first,c=nd.second;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(vis[v])&#123;</span><br><span class="line">            <span class="built_in">insert</span>(dis[u]^dis[v]^c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            dis[v]=dis[u]^c;</span><br><span class="line">            <span class="built_in">dfs</span>(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!((x&gt;&gt;i)&amp;<span class="number">1</span>)) x^=t[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x,y,c,i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y&gt;&gt;c;</span><br><span class="line">        g[x].<span class="built_in">push_back</span>(&#123;y,c&#125;);</span><br><span class="line">        g[y].<span class="built_in">push_back</span>(&#123;x,c&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;<span class="built_in">query</span>(dis[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="problem.7-树">Problem.7 树</h1><p>题目标签：思维，树论</p><p>题目来源：清华集训 2012-2013 day 4</p><h2 id="题目大意-6">题目大意</h2><p>有一颗 <span class="math inline">\(n\)</span>个节点的二叉树，编号1至n。你将这些节点依次删除，并规定你只能删除没有父亲的节点（即删除一个节点前，必须将其祖先全部删除）。这棵树可能有三种形态：</p><ol type="1"><li>一个链，准确地说，每个点最多只有一个儿子；</li><li>满二叉树；</li><li>普通的二叉树。</li></ol><p>你并不知道这棵树的形态，只能通过以下方式询问：</p><ul><li><code>size()</code>：返回这棵树的节点数量 <spanclass="math inline">\(n\)</span>；　</li><li><code>type()</code>：返回这棵树的类型；</li><li><code>question(p,q)</code> ：返回 <spanclass="math inline">\(p\)</span> 号点和 <spanclass="math inline">\(q\)</span> 号点的关系。若返回值为 <spanclass="math inline">\(1\)</span>，表示 <spanclass="math inline">\(p\)</span> 是 <spanclass="math inline">\(q\)</span> 的祖先，若返回值为 <spanclass="math inline">\(-1\)</span>，表示 <spanclass="math inline">\(q\)</span> 是 <spanclass="math inline">\(p\)</span> 的祖先，否则返回值为 <spanclass="math inline">\(0\)</span>。你用这个询问的次数将关系到你的分数；</li><li><code>void submit(x)</code>：完成回答，表示删除 <spanclass="math inline">\(x\)</span> 号节点。</li></ul><p>你需要做的，就是通过<strong>尽可能少的 <code>question</code>询问</strong>将所有点全部删除。你的答案得到满分，调用<code>question</code> 函数从次数必须为 <spanclass="math inline">\(O(n\log n)\)</span> 级别。</p><h2 id="数据范围-6">数据范围</h2><p><span class="math inline">\(1 \le n \le 300000\)</span>。</p><h2 id="解题思路-6">解题思路</h2><p>对于部分分，我们有 <span class="math inline">\(O(n^2)\)</span>的暴力算法，下面直接讲能得到满分的正解。</p><p>考虑选择一个点，则我们删除这个节点与根之间最短路径的每一个节点才能删除这一个节点。</p><p>那我们就若干次随机化，每次随机选择一个节点，目的是删除这个节点到根的所有节点（构成一条链）后删除这个节点。我们每一次对于这个节点向全局进行<code>question</code> 询问，了解哪些节点是它的祖先，单次复杂度 <spanclass="math inline">\(O(n)\)</span>。我们依次删除祖先节点。因为我们删除这条链之后，会分割成若干棵子树，我们有需要在这些子树中分别进行删点操作。因为我们使用随机化算法，每次的链长期望为<span class="math inline">\(O(\log n)\)</span>。</p><p>我们需要记录这条链上所有的节点，从而继续进行操作。考虑到我们还需要对节点到根（或所在子树的顶）的这条链按照祖先顺序排序，我们需要使用<strong>归并排序</strong>算法。为什么不使用快速排序呢，考虑到归并排序的复杂度是严格<span class="math inline">\(O(n\log n)\)</span>的，最坏复杂度比快速排序更加优一些（或许因为这道题卡常）。我们只需要使用C++ 自带的 <code>stable_sort</code> 函数进行排序，并重定义<code>cmp</code> 函数即可。</p><p>对于 <code>type</code> 为 <span class="math inline">\(1\)</span>的树，即一条链，我们只需要选择链底的节点，进行一次操作即可，详见参考代码。</p><p>时间复杂度 <span class="math inline">\(O(n\log n)\)</span>。</p><h2 id="参考代码-6">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">question</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">submit</span><span class="params">(<span class="type">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 300005</span></span><br><span class="line"><span class="type">int</span> dep[MAXN],n,a[MAXN];</span><br><span class="line"><span class="type">bool</span> ins[MAXN];</span><br><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(time(<span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">question</span>(x,y)==<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(vector&lt;<span class="type">int</span>&gt; p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p.<span class="built_in">empty</span>()) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> n=p.<span class="built_in">size</span>(),now=p[<span class="built_in">rnd</span>()%n];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; fa;</span><br><span class="line">    fa.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v!=now&amp;&amp;<span class="built_in">question</span>(v,now)==<span class="number">1</span>) fa.<span class="built_in">push_back</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    fa.<span class="built_in">push_back</span>(now);</span><br><span class="line">    <span class="built_in">stable_sort</span>(fa.<span class="built_in">begin</span>(),fa.<span class="built_in">end</span>(),cmp);</span><br><span class="line">    <span class="type">int</span> m=fa.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; son;</span><br><span class="line">    son.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:fa) ins[v]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ins[v]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>,r=m<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l!=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">question</span>(fa[mid],v)) l=mid;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        son[l].<span class="built_in">push_back</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">submit</span>(fa[i]);</span><br><span class="line">        <span class="built_in">solve</span>(son[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">type</span>()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=i;</span><br><span class="line">        <span class="built_in">stable_sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">submit</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) v.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="built_in">solve</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="problem.8-stack-exterminable-arrays">Problem.8 StackExterminable Arrays</h1><p>题目标签：思维，字符串，哈希</p><p>题目来源：CF1223F</p><h2 id="题目大意-7">题目大意</h2><p>给一个长度为 <span class="math inline">\(n\)</span>的数列，对于其中一段子序列称为可被删除的，当且仅当按照下表顺序，按照如下要求进栈和出栈后栈为空：</p><ul><li><p>如果当前元素等于栈顶元素，则弹出栈顶元素；</p></li><li><p>否则将当前元素压入栈中。</p></li></ul><p>求有多少个子序列为可被删除的。</p><h2 id="数据范围-7">数据范围</h2><p><span class="math inline">\(1\le \sum n,\sum q\le 3\times10^5\)</span>。</p><h2 id="解题思路-7">解题思路</h2><p>CSP-S 2023 T2 的原题，可惜考场并没有想出正确的思路。</p><p>理解题意后我们发现，我们可以枚举每一个可被删除的子序列（下面简称为“合法子序列”）的起始位置，进行栈模拟，就可以找到以这个位置开始的所有合法子序列。这是一个时间复杂度为<span class="math inline">\(O(n^2)\)</span> 的算法。</p><p>我们考虑进行简化。如果只从第一个位置进行栈模拟，发现所有合法的子序列都有如下性质：</p><ul><li>设 <span class="math inline">\(p_i\)</span> 表示栈在第 <spanclass="math inline">\(i\)</span> 个位置的状态，如果子序列 <spanclass="math inline">\(l\dots r\)</span> 是合法的子序列，则有 <spanclass="math inline">\(p_{l-1}=p_r\)</span>，即经过合法子序列后栈的状态和未经过时一样。</li></ul><p>考虑怎么证明这个东西。</p><p>如果 <span class="math inline">\(l\dots r\)</span>内的数会和栈里面的数抵消。形式化地，记栈为 <spanclass="math inline">\(S=YX\)</span>，当前合法的子序列形如 <spanclass="math inline">\(XYYX\)</span>，两个 <spanclass="math inline">\(X\)</span> 或抵消，同时子序列内部重复的 <spanclass="math inline">\(Y\)</span> 也会抵消，最后剩下 <spanclass="math inline">\(X\)</span>，入栈，这样栈内元素又一样了。</p><blockquote><p>例子 <span class="math inline">\(\quad\)</span> 对于序列<code>2 2 3 3 2</code>，子序列取区间 <spanclass="math inline">\([2,5]\)</span> 时，<spanclass="math inline">\(p_1=\{2\}\)</span>，<spanclass="math inline">\(p_5=\{2\}\)</span>，二者相等，说明子序列<code>2 3 3 2</code> 是合法的子序列。</p></blockquote><p>那么我们就可以只进行一个堆栈模拟，记录到每个位置的 <spanclass="math inline">\(p_i\)</span>，可以对其进行字符串哈希，再用一个哈希表记录当前以前的所有栈状态，统计每个位置与其相等的栈状态即可。复杂度<span class="math inline">\(O(n)\)</span>。</p><p>对于 <code>unordered_map</code> 类型的变量，可以使用<code>&lt;name&gt;.reserve(_size)</code> 进行预制大小。</p><h2 id="参考代码-7">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 300005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 5323</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> p 233</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="type">int</span> Q,n,s[MAXN],top,a[MAXN],num[MAXN];</span><br><span class="line">ull hs[MAXN],table[MAXN],lable[MAXN];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxx=<span class="number">300000</span>;</span><br><span class="line">unordered_map&lt;ull,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;Q;</span><br><span class="line">    table[<span class="number">0</span>]=lable[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=maxx;i++) table[i]=table[i<span class="number">-1</span>]*mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=maxx;i++) lable[i]=lable[i<span class="number">-1</span>]*p;</span><br><span class="line">    <span class="keyword">while</span>(Q--)&#123;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">        top=ans=<span class="number">0</span>;</span><br><span class="line">        mp.<span class="built_in">clear</span>();</span><br><span class="line">        mp.<span class="built_in">reserve</span>(n+<span class="number">5</span>);</span><br><span class="line">        mp[<span class="number">0</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]==a[s[top]])&#123;</span><br><span class="line">                hs[i]=hs[i<span class="number">-1</span>]-table[top]*lable[a[i]];</span><br><span class="line">                top--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                s[++top]=i;</span><br><span class="line">                hs[i]=hs[i<span class="number">-1</span>]+table[top]*lable[a[i]];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">find</span>(hs[i])!=mp.<span class="built_in">end</span>()) ans+=mp[hs[i]];</span><br><span class="line">            mp[hs[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="problem.9-cow-tennis-tournament">Problem.9 Cow TennisTournament</h1><p>题目标签：组合计数、思维、线段树</p><p>题目来源：CF283E</p><h2 id="题目大意-8">题目大意</h2><p>有 <span class="math inline">\(n\)</span> 个点，每个点有一个点权<spanclass="math inline">\(s_i\)</span>，一开始，每个点向比其点权小的点连边。接下来<span class="math inline">\(k\)</span> 个操作，每个操作给定 <spanclass="math inline">\(l,r\)</span>，将 <spanclass="math inline">\(s_x,s_y\in [l,r]\)</span> 的点对 <spanclass="math inline">\((x,y)\)</span> 的边翻转方向。</p><p>问最后有多少对三元组 <span class="math inline">\((x,y,z)\)</span>满足 <span class="math inline">\(x\rightarrow y,y\rightarrowz,z\rightarrowx\)</span>​。（箭头表示连边方向）两个三元组不同当且仅当有一个点在其中一个三元组中而不在另一个三元组中。</p><h2 id="数据范围-8">数据范围</h2><p><span class="math inline">\(3\le n\le 10^5,0\le k\le 10^5,1\le s_i\le10^9,1 \le a_i &lt; b_i \le 10^9\)</span>。</p><h2 id="解题思路-8">解题思路</h2><p>考虑到正面思考好像很难，正难则反，考虑有多少组三元组不符合这个条件。</p><p>不难发现，对于不满足条件的三元组 <spanclass="math inline">\((x,y,z)\)</span>，其中肯定有一个点的出度（在这三个点构成的图中）为<spanclass="math inline">\(2\)</span>。我们就考虑能否求出每个点在最后有多少个出度，进而求出答案。</p><p>因为一段区间翻转，只会对这个区间内的点对 <spanclass="math inline">\((x,y)\)</span>产生变化，不妨按照扫描线的思路，按照点权大小排序后，对离散化的点权建立线段树，表示每个点是否对当前点<span class="math inline">\(x\)</span>的连边有翻转（即区间翻转操作是奇数次还是偶数次）。我们把每个操作拆分为两个：</p><ul><li>左端标记在区间 <span class="math inline">\([l,r]\)</span>翻转；</li><li>右端标记在区间 <span class="math inline">\([l,r]\)</span>撤销翻转，即再进行一次翻转即可。</li></ul><p>我们按照离散化的点集，按照权值从小到大扫描。再每一个点记录当前点的出度：</p><ul><li>对于比当前点 <span class="math inline">\(x\)</span> 点权小的点 <spanclass="math inline">\(y\)</span>，当前点连向这个点，当且仅当区间 <spanclass="math inline">\([y,x)\)</span> 的翻转次数为偶数次；</li><li>对于比当前点 <span class="math inline">\(x\)</span> 点权大的点 <spanclass="math inline">\(y\)</span>，当前点连向这个点，当且仅当区间 <spanclass="math inline">\((x,y]\)</span> 的翻转次数为奇数次。</li></ul><p>这样，我们进行区间修改，区间查询，就可以在 <spanclass="math inline">\(O(\log n)\)</span>的时间内求出一个点的出度。根据组合公式，可以得到不合法的种类数为 <spanclass="math inline">\(C_{num}^2\)</span>，其中 <spanclass="math inline">\(num\)</span> 为出度。</p><p>所以最后答案就是</p><p><span class="math display">\[C_n^3-\sum\limits_{i=1}^nC_{num_i}^2\]</span></p><h2 id="参考代码-8">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((tree[p].l+tree[p].r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls (p&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs (p&lt;&lt;1|1)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> n,k,s[MAXN];</span><br><span class="line">ll ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; add[MAXN],del[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r,sum[<span class="number">2</span>];</span><br><span class="line">    <span class="type">bool</span> tag;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    tree[p].sum[<span class="number">0</span>]=tree[ls].sum[<span class="number">0</span>]+tree[rs].sum[<span class="number">0</span>];</span><br><span class="line">    tree[p].sum[<span class="number">1</span>]=tree[ls].sum[<span class="number">1</span>]+tree[rs].sum[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    tree[p].l=l,tree[p].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[p].sum[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(l,mid,ls);</span><br><span class="line">    <span class="built_in">build</span>(mid+<span class="number">1</span>,r,rs);</span><br><span class="line">    <span class="built_in">update</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tree[p].tag) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">swap</span>(tree[ls].sum[<span class="number">0</span>],tree[ls].sum[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">swap</span>(tree[rs].sum[<span class="number">0</span>],tree[rs].sum[<span class="number">1</span>]);</span><br><span class="line">    tree[ls].tag^=<span class="number">1</span>;</span><br><span class="line">    tree[rs].tag^=<span class="number">1</span>;</span><br><span class="line">    tree[p].tag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[p].l&amp;&amp;r&gt;=tree[p].r)&#123;</span><br><span class="line">        <span class="built_in">swap</span>(tree[p].sum[<span class="number">0</span>],tree[p].sum[<span class="number">1</span>]);</span><br><span class="line">        tree[p].tag^=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modify</span>(l,r,ls);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) <span class="built_in">modify</span>(l,r,rs);</span><br><span class="line">    <span class="built_in">update</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> op,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[p].l&amp;&amp;r&gt;=tree[p].r) <span class="keyword">return</span> tree[p].sum[op];</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) sum+=<span class="built_in">query</span>(l,r,op,ls);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) sum+=<span class="built_in">query</span>(l,r,op,rs);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;s[i];</span><br><span class="line">    <span class="built_in">sort</span>(s+<span class="number">1</span>,s+<span class="number">1</span>+n);<span class="comment">//按照点权排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        x=<span class="built_in">lower_bound</span>(s+<span class="number">1</span>,s+<span class="number">1</span>+n,x)-s;<span class="comment">//求出离散化后的操作范围</span></span><br><span class="line">        y=<span class="built_in">upper_bound</span>(s+<span class="number">1</span>,s+<span class="number">1</span>+n,y)-s<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(y&lt;x) y=x;</span><br><span class="line">        add[x].<span class="built_in">push_back</span>(y);<span class="comment">//建立类扫描线</span></span><br><span class="line">        del[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:add[i]) <span class="built_in">modify</span>(i,v,<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> cnt1=<span class="built_in">query</span>(<span class="number">1</span>,i<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//比当前点点权小的点所带来的出度</span></span><br><span class="line">        <span class="type">int</span> cnt2=<span class="built_in">query</span>(i+<span class="number">1</span>,n,<span class="number">1</span>,<span class="number">1</span>);<span class="comment">//比当前点点权大的点所带来的出度</span></span><br><span class="line">        <span class="keyword">if</span>(cnt1+cnt2&gt;=<span class="number">2</span>) ans+=<span class="number">1ll</span>*(cnt1+cnt2)*(cnt1+cnt2<span class="number">-1</span>)/<span class="number">2</span>;<span class="comment">//组合答案</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:del[i]) <span class="built_in">modify</span>(v,i,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ans=<span class="number">1ll</span>*n*(n<span class="number">-1</span>)*(n<span class="number">-2</span>)/<span class="number">6</span>-ans;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="problem.10-作业-homework">Problem.10 作业 Homework</h1><p>题目标签：根号分治</p><p>题目来源：2006上海省选 (SHOI2006)</p><h2 id="题目大意-9">题目大意</h2><p>给定一个集合为 <spanclass="math inline">\(S\)</span>，初始为空，你需要执行以下两个操作共<span class="math inline">\(N\)</span> 次。</p><ol type="1"><li>在集合 <span class="math inline">\(S\)</span>中加入一个新元素，其代号为 <span class="math inline">\(X\)</span>，保证<span class="math inline">\(X\)</span> 在当前集合中不存在。</li><li>在当前的集合 <span class="math inline">\(S\)</span> 中询问所有元素<span class="math inline">\(\bmod\ Y\)</span> 最小的值。</li></ol><h2 id="数据范围-9">数据范围</h2><p><span class="math inline">\(1\le N\le 10^5,1\le X,Y\le 3\times10^5\)</span>。</p><h2 id="解题思路-9">解题思路</h2><p>看到维护操作中有取模操作，且难以维护区间信息，考虑根号分治。</p><p>记 <span class="math inline">\(T=\sqrt{3\times10^5}\)</span>。具体地，将询问的 <span class="math inline">\(Y\)</span>划分为两个种类：</p><ul><li>若 <span class="math inline">\(Y\leT\)</span>，则这样的<strong>模数</strong>最多有 <spanclass="math inline">\(T\)</span>种，对每一种值在添加数据时暴力维护（添加并取最小值）；</li><li>若 <spanclass="math inline">\(Y&gt;T\)</span>，考虑到<strong>商数</strong>最多有<span class="math inline">\(T\)</span> 种，即对于 <spanclass="math inline">\(Y/x=p\dots\dots q\)</span> 的 <spanclass="math inline">\(p\)</span> 最多有 <spanclass="math inline">\(T\)</span> 种。变化式子为 <spanclass="math inline">\(x-pY=q\)</span>，枚举每一个 <spanclass="math inline">\(p\)</span>，则可以算出该商数情况下的最小 <spanclass="math inline">\(q\)</span> 值。具体地，利用 <code>set</code> 维护<span class="math inline">\(S\)</span> 中的数，对于每一个模数 <spanclass="math inline">\(p\)</span>，找到第一个大于等于 <spanclass="math inline">\(pY\)</span>，减一下即可得到该模数下的最小 <spanclass="math inline">\(q\)</span> 值。</li></ul><p>令 <span class="math inline">\(\omega\)</span>为值域，则插入一次复杂度 <spanclass="math inline">\(O(\sqrt{\omega})\)</span>，查询一次复杂度为 <spanclass="math inline">\(O(1)\)</span> 或 <spanclass="math inline">\(O(\sqrt{\omega} \log n)\)</span>，总复杂度 <spanclass="math inline">\(O(n\sqrt{\omega}\log n)\)</span>，可通过此题。</p><h2 id="参考代码-9">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSQRTN 555</span></span><br><span class="line"><span class="type">int</span> lim=<span class="number">550</span>,n,p[MAXSQRTN];</span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=lim;i++) p[i]=<span class="built_in">min</span>(p[i],x%i);</span><br><span class="line">    s.<span class="built_in">insert</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=lim) <span class="keyword">return</span> p[x];</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;<span class="number">1ll</span>*k*x&lt;=<span class="number">300000</span>;k++)&#123;</span><br><span class="line">        <span class="keyword">auto</span> t=s.<span class="built_in">lower_bound</span>(k*x);</span><br><span class="line">        <span class="keyword">if</span>(t==s.<span class="built_in">end</span>()) <span class="keyword">break</span>;</span><br><span class="line">        ans=<span class="built_in">min</span>(ans,*t-k*x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">memset</span>(p,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(p));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">char</span> ch;<span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;ch&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;A&#x27;</span>) <span class="built_in">add</span>(x);</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="built_in">query</span>(x)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 好题摘录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 好题摘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数基础</title>
      <link href="/post/9909702601bf.html"/>
      <url>/post/9909702601bf.html</url>
      
        <content type="html"><![CDATA[<p>线性代数基础</p><p>线性代数是OI中常用的一部分数学知识。本篇主要记录高斯消元法和基础矩阵变换。</p><h1 id="一矩阵">一、矩阵</h1><p>矩阵是数学中常用的代数工具。当然，信息代数中的重点也许与数学不同，但大体思路相仿。</p><h2 id="quad-矩阵的定义">1.1<span class="math inline">\(\quad\)</span>矩阵的定义</h2><p><strong>矩阵</strong><spanclass="math inline">\(\quad\)</span>对于一个由 <spanclass="math inline">\(n\times m\)</span>个数根据某些性质、关系组成的向量表 <span class="math display">\[\begin{bmatrix}a_{1,1}&amp;a_{1,2}&amp;\cdots&amp;a_{1,m}\\a_{2,1}&amp;a_{2,2}&amp;\cdots&amp;a_{2,m}\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\a_{n,1}&amp;a_{n,2}&amp;\cdots&amp;a_{n,m}\\\end{bmatrix}\]</span> 称为 <span class="math inline">\(n\times m\)</span>的矩阵，记作矩阵 <span class="math inline">\(\mathbf{A}\)</span>。</p><p>若矩阵 <span class="math inline">\(\mathbf{A}\)</span> 和矩阵 <spanclass="math inline">\(\mathbf{B}\)</span> 都是 <spanclass="math inline">\(n\times m\)</span> 的矩阵，则称 <spanclass="math inline">\(\mathbf{A}\)</span> 与 <spanclass="math inline">\(\mathbf{B}\)</span> 为<strong>同形矩阵</strong>。</p><p>若矩阵 <span class="math inline">\(\mathbf{A}\)</span> 和矩阵 <spanclass="math inline">\(\mathbf{B}\)</span> 为同形矩阵，并且 <spanclass="math inline">\(\forall i\in [1,n],j\in [1,m]\)</span>，都有 <spanclass="math inline">\(a_{i,j}=b_{i,j}\)</span>，则称 <spanclass="math inline">\(\mathbf{A}=\mathbf{B}\)</span> 。</p><h2 id="quad-特殊矩阵">1.2<span class="math inline">\(\quad\)</span>​特殊矩阵</h2><p><strong>方阵</strong>：有 <span class="math inline">\(n\)</span> 行<span class="math inline">\(n\)</span> 列的矩阵。</p><p><strong>零矩阵</strong>：每个元素都是 <spanclass="math inline">\(0\)</span> 的矩阵，记为 <spanclass="math inline">\(\mathbf{0}\)</span>。</p><p><strong>行向量</strong>：只有一行的矩阵称为行矩阵。</p><p><strong>列向量</strong>：只有一列的矩阵称为列举阵。</p><p><strong>单位矩阵</strong>：主对角线元素均为 <spanclass="math inline">\(1\)</span>，其余元素全为 <spanclass="math inline">\(0\)</span> 的 <spanclass="math inline">\(n\)</span> 阶方阵。</p><p><strong>数量矩阵</strong>：主对角线元素均为 <spanclass="math inline">\(k\)</span>，其余元素全为 <spanclass="math inline">\(0\)</span> 的 <spanclass="math inline">\(n\)</span> 阶方阵。</p><h2 id="quad-矩阵的基本运算">1.3<spanclass="math inline">\(\quad\)</span> 矩阵的基本运算</h2><h3 id="矩阵加法">矩阵加法</h3><p>只有同形矩阵才能进行矩阵加法。</p><p>矩阵加法即同位置的数相加。设 <spanclass="math inline">\(\mathbf{A}\)</span>、<spanclass="math inline">\(\mathbf{B}\)</span>为 <spanclass="math inline">\(n\times m\)</span> 的矩阵，<spanclass="math inline">\(\mathbf{C}=\mathbf{A}+\mathbf{B}\)</span>，则<span class="math inline">\(\forall i\in[1,n],j\in[1,m]\)</span>： <spanclass="math display">\[C_{i,j}=A_{i,j}+B_{i,j}\]</span></p><h3 id="数乘运算">数乘运算</h3><p>数乘运算即矩阵中每一个数都乘这个数。设 <spanclass="math inline">\(\mathbf{A}\)</span>为 <spanclass="math inline">\(n\times m\)</span> 的矩阵，<spanclass="math inline">\(\mathbf{C}=\lambda\mathbf{A}\)</span>，则 <spanclass="math inline">\(\forall i\in[1,n],j\in[1,m]\)</span>： <spanclass="math display">\[C_{i,j}=\lambda A_{i,j}\]</span></p><h3 id="矩阵乘法">矩阵乘法</h3><p>两个矩阵能够相乘，当且仅当其中一个矩阵的第二维等于另一个矩阵的第一维。</p><p>设 <span class="math inline">\(\mathbf{A}\)</span> 为 <spanclass="math inline">\(n\times m\)</span> 的矩阵，<spanclass="math inline">\(\mathbf{B}\)</span> 为 <spanclass="math inline">\(m\times w\)</span> 的矩阵，设 <spanclass="math inline">\(\mathbf{C}=\mathbf{A}\times\mathbf{B}\)</span>，则： <span class="math display">\[C_{i,j}=\sum^m_{k=1}A_{i,k}+B_{k,j}\]</span> 特殊地，如果 <span class="math inline">\(\mathbf{A}\)</span>为 <span class="math inline">\(n\times n\)</span> 的矩阵，<spanclass="math inline">\(\mathbf{B}\)</span> 为 <spanclass="math inline">\(1\times n\)</span> 的列矩阵，那么 <spanclass="math inline">\(\mathbf{B}\)</span> 可省略一维，记 <spanclass="math inline">\(\mathbf{C}=\mathbf{A}\times\mathbf{B}\)</span>，则 <span class="math inline">\(\mathbf{C}\)</span>为与 <span class="math inline">\(\mathbf{B}\)</span> 同型的矩阵，<spanclass="math inline">\(\forall i\in [1,n]\)</span>​： <spanclass="math display">\[C_{i}=\sum^n_{k=1}A_{i,k}+B_{k}\]</span> 矩阵乘法满足<strong>结合律</strong>，即： <spanclass="math display">\[(\mathbf{A}\times\mathbf{B})\times\mathbf{C}=\mathbf{A}\times(\mathbf{B}\times\mathbf{C})\]</span> 满足<strong>分配律</strong>，即： <spanclass="math display">\[(\mathbf{A}+\mathbf{B})\times\mathbf{C}=\mathbf{A}\times\mathbf{C}+\mathbf{B}\times\mathbf{C}\]</span></p><h3 id="转置运算">转置运算</h3><p>矩阵转置就是将矩阵行列调换位置。</p><p>设 <span class="math inline">\(\mathbf{A}\)</span> 为 <spanclass="math inline">\(n\times m\)</span> 的矩阵，设 <spanclass="math inline">\(\mathbf{A^T}\)</span> 为矩阵 <spanclass="math inline">\(\mathbf{A}\)</span> 的转置，则 <spanclass="math inline">\(\forall i\in[1,n],j\in[1,m]\)</span>：</p><p><span class="math display">\[A^T_{i,j}=A_{j,i}\]</span></p><h1 id="二高斯消元">二、高斯消元</h1><p>高斯消元是求解线性方程组的一个方法。</p><p>如，对于下面这个 <span class="math inline">\(n\)</span>个未知数的线性方程组，求解每个未知数的值。 <span class="math display">\[\begin{cases}x_1&amp;+2x_2&amp;-x_3&amp;=-6\\2x_1&amp;+x_2&amp;-3x_3&amp;=-9\\-x_1&amp;-x_2&amp;+2x_3&amp;=7\end{cases}\]</span> 我们可以由此构造一个 <span class="math inline">\(N\)</span> 行<span class="math inline">\(N\)</span> 列的增广矩阵 <spanclass="math inline">\(\mathbf{A}\)</span>，其内容为各未知项系数及常数项，如下：<span class="math display">\[\mathbf{A}=\begin{bmatrix}1&amp;2&amp;-1\\2&amp;1&amp;-3\\-1&amp;-1&amp;2\end{bmatrix}\]</span> 同理，我们也可以构造一个列向量 <spanclass="math inline">\(\mathbf{X}\)</span> 和列向量 <spanclass="math inline">\(\mathbf{B}\)</span>，分别包含各各未知数与常数，如下：<span class="math display">\[\mathbf{X}=\begin{bmatrix}x_1\\x_2\\x_3\end{bmatrix}\qquad\mathbf{B}=\begin{bmatrix}-6\\-9\\7\end{bmatrix}\]</span> 我们就可以由此转换为矩阵方程： <span class="math display">\[\begin{bmatrix}1&amp;2&amp;-1\\2&amp;1&amp;-3\\-1&amp;-1&amp;2\end{bmatrix}\begin{bmatrix}x_1\\x_2\\x_3\end{bmatrix}=\begin{bmatrix}-6\\-9\\7\end{bmatrix}\]</span> 我们的目标是求出矩阵 <spanclass="math inline">\(\mathbf{X}\)</span>。根据矩阵乘法具有结合律，我们可以设法让等号两边同时乘以若干矩阵，使得矩阵<span class="math inline">\(\mathbf{A}\)</span>成为单位矩阵，即可求出矩阵 <spanclass="math inline">\(\mathbf{X}\)</span>。也就是说，在主对角线上的数，通过变换，使其成为<span class="math inline">\(1\)</span>，其他数成为 <spanclass="math inline">\(0\)</span>。</p><p>考虑在保证数量关系的前提下消元，使用如下方法：</p><ol type="1"><li><p>对这一行消元，使得该行对角线上的数为 <spanclass="math inline">\(1\)</span>。也就是除以这一行对角线上的数即可。</p></li><li><p>对其他行消元，利用对角线上的数和其他行的数的关系，使得其他行不在对角线上的数为<span class="math inline">\(0\)</span>。</p></li></ol><p>如此重复处理，直至形成单位矩阵。</p><p>注意，等号左右两边需要同时处理，才能保证等号成立。所以我们可以直接合并两个矩阵，更方便地直接对一个矩阵进行变换，如下：<span class="math display">\[\left[\begin{array}{ccc|c}1&amp;2&amp;-1&amp;-6\\2&amp;1&amp;-3&amp;-9\\-1&amp;-1&amp;2&amp;7\end{array}\right]\]</span> 使左部分矩阵成为单位矩阵后，右边的列向量就是答案。</p><p>我们可以进行如下操作，即 <strong>初等行变换</strong>：</p><ol type="1"><li>用一个非零的数乘到某一行；</li><li>把其中一行的若干倍加到零一行上；</li><li>交换两行的位置。</li></ol><p>进行如下操作： <span class="math display">\[\left[\begin{array}{ccc|c}1&amp;2&amp;-1&amp;-6\\2&amp;1&amp;-3&amp;-9\\-1&amp;-1&amp;2&amp;7\end{array}\right]\Longrightarrow\left[\begin{array}{ccc|c}1&amp;2&amp;-1&amp;-6\\0&amp;-3&amp;-1&amp;3\\-1&amp;-1&amp;2&amp;7\end{array}\right]\Longrightarrow\left[\begin{array}{ccc|c}1&amp;2&amp;-1&amp;-6\\0&amp;-3&amp;-1&amp;3\\0&amp;1&amp;1&amp;1\end{array}\right]\]</span></p><p><span class="math display">\[\Longrightarrow\left[\begin{array}{ccc|c}1&amp;2&amp;-1&amp;-6\\0&amp;1&amp;1&amp;1\\0&amp;-3&amp;-1&amp;3\end{array}\right]\Longrightarrow\left[\begin{array}{ccc|c}1&amp;2&amp;-1&amp;-6\\0&amp;1&amp;1&amp;1\\0&amp;0&amp;2&amp;6\end{array}\right]\Longrightarrow\left[\begin{array}{ccc|c}1&amp;2&amp;-1&amp;-6\\0&amp;1&amp;1&amp;1\\0&amp;0&amp;1&amp;3\end{array}\right]\]</span></p><p>然后消去右上角： <span class="math display">\[\left[\begin{array}{ccc|c}1&amp;2&amp;-1&amp;-6\\0&amp;1&amp;1&amp;1\\0&amp;0&amp;1&amp;3\end{array}\right]\Longrightarrow\left[\begin{array}{ccc|c}1&amp;2&amp;0&amp;-3\\0&amp;1&amp;0&amp;-2\\0&amp;0&amp;1&amp;3\end{array}\right]\Longrightarrow\left[\begin{array}{ccc|c}1&amp;0&amp;0&amp;1\\0&amp;1&amp;0&amp;-2\\0&amp;0&amp;1&amp;3\end{array}\right]\]</span> 此时，右边的矩阵就是 <spanclass="math inline">\(\mathbf{X}\)</span> 矩阵，即，解得： <spanclass="math display">\[\begin{cases}x_1=1\\x_2=-2\\x_3=3\end{cases}\]</span></p><p>为了更格式化、更方便地处理问题，下面给出高斯消元的标准方法。</p><p><strong>高斯消元法</strong> <spanclass="math inline">\(\quad\)</span> 对于任意一个存在 <spanclass="math inline">\(n\)</span> 个数、<spanclass="math inline">\(n\)</span> 个方程的线性方程组： <spanclass="math display">\[\begin{cases}a_{1,1}x_1+a_{1,2}x_2+\cdots+a_{1,n}x_n=b_1\\a_{2,1}x_1+a_{2,2}x_2+\cdots+a_{2,n}x_n=b_2\\\vdots\\a_{n,1}x_1+a_{n,2}x_2+\cdots+a_{n,n}x_n=b_n\\\end{cases}\]</span> 构造一个 <span class="math inline">\(N\)</span> 行 <spanclass="math inline">\(N+1\)</span> 列的矩阵： <spanclass="math display">\[\left[\begin{array}{cccc|c}a_{1,1}&amp;a_{1,2}&amp;\cdots&amp;a_{1,n}&amp;b_1\\a_{2,1}&amp;a_{2,2}&amp;\cdots&amp;a_{2,n}&amp;b_2\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots&amp;\vdots\\a_{n,1}&amp;a_{n,2}&amp;\cdots&amp;a_{n,n}&amp;b_n\\\end{array}\right]\]</span> 对于每个未知量 <spanclass="math inline">\(x_i\)</span>，找到一个 <spanclass="math inline">\(x_i\)</span> 的系数非零，但 <spanclass="math inline">\(x_1\sim x_{i-1}\)</span> 的系数都被消成了 <spanclass="math inline">\(0\)</span> 的方程，利用初等行变换把其他方程的<span class="math inline">\(x_i\)</span> 的系数全部消成 <spanclass="math inline">\(0\)</span>。</p><p>需要注意的是，如果有任意一个 <spanclass="math inline">\(x_i\)</span>，找不到非零的方程，则无解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 105</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> a[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n+<span class="number">1</span>;j++) cin&gt;&gt;a[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> nowi=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">        <span class="type">int</span> t;</span><br><span class="line">        <span class="keyword">for</span>(t=nowi;t&lt;=n;t++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[t][j])&gt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t==n+<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=j;i&lt;=n+<span class="number">1</span>;i++) <span class="built_in">swap</span>(a[nowi][i],a[t][i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n+<span class="number">1</span>;i&gt;=j;i--) a[nowi][i]/=a[nowi][j];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==nowi) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=n+<span class="number">1</span>;k&gt;=j;k--)&#123;</span><br><span class="line">                a[i][k]-=a[i][j]*a[nowi][k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nowi++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(nowi&lt;=n)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;No Solution&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,a[i][n+<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三矩阵求逆">三、矩阵求逆</h1><p><strong>逆矩阵</strong><span class="math inline">\(\quad\)</span>对于一个矩阵 <spanclass="math inline">\(\mathbf{A}\)</span>，若存在一个矩阵 <spanclass="math inline">\(\mathbf{A&#39;}\)</span>，有 <spanclass="math inline">\(\mathbf{AA&#39;=E(单位矩阵)}\)</span>，则称 <spanclass="math inline">\(\mathbf{A&#39;}\)</span> 为 <spanclass="math inline">\(\mathbf{A}\)</span> 的逆矩阵。</p><p>现在给定一个矩阵 <spanclass="math inline">\(\mathbf{A}\)</span>，求他的逆矩阵 <spanclass="math inline">\(\mathbf{A&#39;}\)</span>。</p><p>我们可以考虑如下的思路。我们可以通过构造多个矩阵，考虑将矩阵 <spanclass="math inline">\(\mathbf{A}\)</span> 消成单位矩阵，也对 <spanclass="math inline">\(\mathbf{E}\)</span>做相同操作，这样一来，就可以得出 <spanclass="math inline">\(\mathbf{A&#39;}\)</span>。</p><p>进而，我们通过矩阵乘法，构造多个矩阵，有： <spanclass="math display">\[\mathbf{A_1A_2\cdots A_k A=EA_1A_2\cdots A_k}\]</span> 得出答案 <span class="math display">\[\mathbf{A&#39;=A_1A_2\cdots A_k}\]</span> 简化考虑，我们的目标是将 <spanclass="math inline">\(\mathbf{A}\)</span> 消成 <spanclass="math inline">\(\mathbf{E}\)</span>。因为矩阵乘法具有结合律所以我们可以同时在<span class="math inline">\(\mathbf{A}\)</span> 和原单位矩阵 <spanclass="math inline">\(\mathbf{E}\)</span> 同时进行高斯消元，目标是使<span class="math inline">\(\mathbf{A}\)</span>成为单位矩阵。即对于两部分的矩阵 <spanclass="math inline">\(\left[\begin{array}{c|c}\mathbf{A}&amp;\mathbf{E}\end{array}\right]\)</span>，对左半部分消元即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 405</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll n,a[MAXN][MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    ll w=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) w=w*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++) cin&gt;&gt;a[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i][i+n]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> r=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j][i])&#123;</span><br><span class="line">                r=j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r!=i) <span class="built_in">swap</span>(a[i],a[r]);</span><br><span class="line">        <span class="keyword">if</span>(!a[i][i]) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No Solution&quot;</span>),<span class="number">0</span>;</span><br><span class="line">        ll x=<span class="built_in">qpow</span>(a[i][i],mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k==i) <span class="keyword">continue</span>;</span><br><span class="line">            ll t=a[k][i]*x%mod;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=(n&lt;&lt;<span class="number">1</span>);j++)&#123;</span><br><span class="line">                a[k][j]=((a[k][j]-t*a[i][j])%mod+mod)%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=(n&lt;&lt;<span class="number">1</span>);j++) a[i][j]=a[i][j]*x%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            cout&lt;&lt;a[i][j+n]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四行列式及求值">四、行列式及求值</h1><p>行列式和矩阵相似，都是用来解决线性问题的工具。</p><h2 id="quad-行列式的定义">4.1<span class="math inline">\(\quad\)</span>行列式的定义</h2><p><strong>行列式</strong><span class="math inline">\(\quad\)</span>对于一个 <span class="math inline">\(n\)</span> 阶的方阵，它的行列式记作<span class="math inline">\(|A|\)</span>，其值为： <spanclass="math display">\[|A|=\sum_p\prod_{i=1}^n a_{i,p_i}(-1)^{\tau(p)}\]</span> 其中，<span class="math inline">\(p\)</span> 为 <spanclass="math inline">\(1..n\)</span> 的排列，<spanclass="math inline">\(\tau(p)\)</span> 为排列 <spanclass="math inline">\(p\)</span> 中的逆序对数。</p><h2 id="quad-行列式的部分性质">4.2<spanclass="math inline">\(\quad\)</span> 行列式的部分性质</h2><h3 id="三角行列式的值">三角行列式的值</h3><p>对于上三角行列式，其值为主对角线的乘积，即： <spanclass="math display">\[\begin{vmatrix}a_{1,1}&amp;a_{1,2}&amp;a_{1,3}&amp;\cdots&amp;a_{1,n}\\0&amp;a_{2,2}&amp;a_{2,3}&amp;\cdots&amp;a_{2,n}\\0&amp;0&amp;a_{3,3}&amp;\cdots&amp;a_{3,n}\\\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\0&amp;0&amp;0&amp;\cdots&amp;a_{n,n}\\\end{vmatrix}=\prod_{i=1}^n a_{i,i}\]</span> 由定义即可推出，证明略。</p><h3 id="某行乘系数-c等于整体乘-c">某行乘系数 <spanclass="math inline">\(c\)</span>，等于整体乘 <spanclass="math inline">\(c\)</span></h3><p>即： <span class="math display">\[\begin{vmatrix}a_{1,1}&amp;a_{1,2}&amp;\cdots&amp;a_{1,n}\\a_{2,1}&amp;a_{2,2}&amp;\cdots&amp;a_{2,n}\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\ca_{i,1}&amp;ca_{i,2}&amp;\cdots&amp;ca_{i,n}\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\a_{n,1}&amp;a_{n,2}&amp;\cdots&amp;a_{n,n}\\\end{vmatrix}=c\begin{vmatrix}a_{1,1}&amp;a_{1,2}&amp;\cdots&amp;a_{1,n}\\a_{2,1}&amp;a_{2,2}&amp;\cdots&amp;a_{2,n}\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\a_{i,1}&amp;a_{i,2}&amp;\cdots&amp;a_{i,n}\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\a_{n,1}&amp;a_{n,2}&amp;\cdots&amp;a_{n,n}\\\end{vmatrix}\]</span> 由定义即可推出，证明略。</p><h3 id="交换两行符号取反">交换两行，符号取反</h3><p>即： <span class="math display">\[\begin{vmatrix}a_{1,1}&amp;a_{1,2}&amp;\cdots&amp;a_{1,n}\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\a_{i,1}&amp;a_{i,2}&amp;\cdots&amp;a_{i,n}\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\a_{j,1}&amp;a_{j,2}&amp;\cdots&amp;a_{j,n}\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\a_{n,1}&amp;a_{n,2}&amp;\cdots&amp;a_{n,n}\\\end{vmatrix}=-\begin{vmatrix}a_{1,1}&amp;a_{1,2}&amp;\cdots&amp;a_{1,n}\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\a_{j,1}&amp;a_{j,2}&amp;\cdots&amp;a_{j,n}\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\a_{i,1}&amp;a_{i,2}&amp;\cdots&amp;a_{i,n}\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\a_{n,1}&amp;a_{n,2}&amp;\cdots&amp;a_{n,n}\\\end{vmatrix}\]</span> <strong>证明</strong><spanclass="math inline">\(\quad\)</span> 不妨设原行列式为 <spanclass="math inline">\(|A|\)</span>，变换后的矩阵为 <spanclass="math inline">\(|A&#39;|\)</span>，有： <spanclass="math display">\[\begin{aligned}|A|=\sum_p (-1)^{\tau(p)}a_{1,p_1}a_{2,p_2}\cdots a_{i,p_i}\cdotsa_{j,p_j}\cdots a_{n,p_n}\\|A&#39;|=\sum_p (-1)^{\tau(p)}a_{1,p_1}a_{2,p_2}\cdots a_{i,p_j}\cdotsa_{j,p_i}\cdots a_{n,p_n}\end{aligned}\]</span> 可以看到，两者的唯一区别就是 <spanclass="math inline">\(a_{i,p_i},a_{j,p_j}\)</span> 和 <spanclass="math inline">\(a_{i,p_j},a_{j,p_i}\)</span>。</p><p>由于 <span class="math inline">\(p\)</span> 为前排列，所以可以忽略<span class="math inline">\(p\)</span> 位置的影响，只用考虑调换 <spanclass="math inline">\(p_i,p_j\)</span> 对 <spanclass="math inline">\(\tau(p)\)</span> 的影响。</p><p>考虑每一个 <spanclass="math inline">\(k,i,j\in[1,n],k\not=i,k\not=j,i&lt;j\)</span>：</p><ol type="1"><li><p>若 <span class="math inline">\(k&lt;i\)</span>：调换 <spanclass="math inline">\(p_i,p_j\)</span> 之后关于 <spanclass="math inline">\(p_k\)</span> 的逆序对数不变。</p></li><li><p>若 <span class="math inline">\(k&gt;j\)</span>：调换 <spanclass="math inline">\(p_i,p_j\)</span> 之后关于 <spanclass="math inline">\(p_k\)</span> 的逆序对数也不变。</p></li><li><p>若 <span class="math inline">\(i&lt;k&lt;j\)</span>：调换 <spanclass="math inline">\(p_i,p_j\)</span> 之后关于 <spanclass="math inline">\(p_k\)</span> 逆序对数会<strong>成对地变化</strong>。</p></li><li><p><span class="math inline">\(p_i,p_j\)</span>位置变化会带来逆序对数变化 <span class="math inline">\(1\)</span>个。</p></li></ol><p>综上，变化之后 <span class="math inline">\(\tau(p)\)</span> 的<strong>奇偶性</strong> 会发生变化，也就是 <spanclass="math inline">\(|A|=-|A&#39;|\)</span>。</p><p>证毕。</p><h3id="若存在两行对应成比例则行列式值为-0">若存在两行对应成比例，则行列式值为<span class="math inline">\(0\)</span></h3><p><strong>证明</strong><span class="math inline">\(\quad\)</span>构造符合要求的行列式并进行推导： <span class="math display">\[\begin{vmatrix}a_{1,1}&amp;a_{1,2}&amp;\cdots&amp;a_{1,n}\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\a_{i,1}&amp;a_{i,2}&amp;\cdots&amp;a_{i,n}\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\ca_{j,1}&amp;ca_{j,2}&amp;\cdots&amp;ca_{j,n}\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\a_{n,1}&amp;a_{n,2}&amp;\cdots&amp;a_{n,n}\\\end{vmatrix}=c\begin{vmatrix}a_{1,1}&amp;a_{1,2}&amp;\cdots&amp;a_{1,n}\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\a_{i,1}&amp;a_{i,2}&amp;\cdots&amp;a_{i,n}\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\a_{j,1}&amp;a_{j,2}&amp;\cdots&amp;a_{j,n}\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\a_{n,1}&amp;a_{n,2}&amp;\cdots&amp;a_{n,n}\\\end{vmatrix}\]</span> 可以发现这个行列式有两行相等，设其为 <spanclass="math inline">\(|A|\)</span>，可知，交换两行后矩阵数值不变，但等于<span class="math inline">\(-|A|\)</span>。故原行列式值为 <spanclass="math inline">\(0\)</span>。</p>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『初丶晴』旧忆</title>
      <link href="/post/b6814f85452d.html"/>
      <url>/post/b6814f85452d.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="欸? 这个『通行证』看着不太对, 再试试看呢..." data-whm="密码不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="f6bb870c458ce7bc775ddc719732e489f61c58f88799ebfb054de645c1c37d03"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章被主人加密了, 小窝要核验主人给的『通行证』.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树链剖分</title>
      <link href="/post/9a0cb8b2d897.html"/>
      <url>/post/9a0cb8b2d897.html</url>
      
        <content type="html"><![CDATA[<p>树链剖分</p><p>树链剖分，就是将树剖分为若干条链，用来维护树上信息，常搭配树上值域线段树，如：</p><ol type="1"><li><p>修改<strong>树上两点间的最短路径上</strong>的节点权值</p></li><li><p>查询<strong>树上两点间的最短路径上</strong>的点权和</p></li><li><p>修改以某个点为根的子树的每个节点的点权</p></li><li><p>查询以某个点为根的子树的节点权值和</p></li></ol><p>其中，操作3和4可以直接建立树上值域线段树解决，操作1和2需要进行树链剖分。</p><p>树链剖分有三种方法：重链剖分（复杂度 <spanclass="math inline">\(O(\log n)\)</span>）、长链剖分（复杂度 <spanclass="math inline">\(O(\sqrtn)\)</span>）和实链剖分（常用于LCT维护）。其中，重链剖分最为常见，因此<strong>本节主要记录重链剖分的学习笔记</strong>。</p><h1 id="一基础定义">一、基础定义</h1><p><strong>重儿子</strong>：一个节点的所有儿子中，子树大小最大的那一个儿子。如有多种选择，就<strong>只选一个儿子</strong>。</p><p><strong>轻儿子</strong>：一个节点的所有儿子中，不是重儿子的节点。<strong>根节点也是轻儿子。</strong></p><p><strong>重链</strong>：从一个轻儿子开始，沿着重儿子走，连出的极大子链。</p><p><strong>轻链</strong>：不是重链的子链。</p><p><strong>重链定理</strong><span class="math inline">\(\quad\)</span>除了根节点以外的任何一个节点的父亲一定在一条重链上。</p><h1 id="二重链剖分">二、重链剖分</h1><p>重链剖分，需要我们维护一下内容：</p><ol type="1"><li><code>fa[MAXN]</code>，即节点的父节点。</li><li><code>dep[MAXN]</code>，即节点深度。</li><li><code>son[MAXN]</code>，即该节点的<strong>重儿子</strong>编号，如果是叶子节点，则<code>son[p]=0</code>。</li><li><code>top[MAXN]</code>，即该节点所在重链的链头。</li><li><code>sz[MAXN]</code>，即以该节点为根的子树的大小。</li><li><code>dfn[MAXN]</code>，该节点进行 <spanclass="math inline">\(\text{dfs}\)</span> 的时间戳，即该节点的 <spanclass="math inline">\(\text{dfs}\)</span> 序。</li><li><code>w[MAXN]</code>，即在 <spanclass="math inline">\(\text{dfs}\)</span> 序中，该序号节点的权值。</li><li><code>tick</code>，即 <spanclass="math inline">\(\text{dfs}\)</span> 时间戳。</li></ol><p>前面几个信息可以打包进一个结构体，然后线段树需要另一个结构体。</p><p>重链剖分要求重链上的时间戳一定要连续（方便在线段树上区间修改和查询），所以需要进行两次<span class="math inline">\(\text{dfs}\)</span>。</p><h2 id="quad-第一次-textdfs">2.1<spanclass="math inline">\(\quad\)</span> 第一次 <spanclass="math inline">\(\text{dfs}\)</span></h2><p>第一次 <span class="math inline">\(\text{dfs}\)</span>需要处理出重链剖分的前置信息。</p><p>从根节点开始遍历整棵树。记录节点父亲、子树大小、深度，还有重儿子。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    T[u].fa=fa;</span><br><span class="line">    T[u].sz=<span class="number">1</span>;</span><br><span class="line">    T[u].dep=T[fa].dep+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> tmp=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:g[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(v,u);</span><br><span class="line">        T[u].sz+=T[v].sz;</span><br><span class="line">        <span class="keyword">if</span>(T[v].sz&gt;tmp)&#123;</span><br><span class="line">            tmp=T[v].sz;</span><br><span class="line">            T[u].son=v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="quad-第二次">2.2<span class="math inline">\(\quad\)</span>第二次 $ $</h2><p>第二次 <span class="math inline">\(\text{dfs}\)</span>就可以剖分这棵树了。</p><p>我们进行重链剖分，记录该节点所在的重链的链头和时间戳。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">    T[u].top=t;</span><br><span class="line">    dfn[u]=++tick;</span><br><span class="line">    w[tick]=a[u];</span><br><span class="line">    <span class="keyword">if</span>(!T[u].son) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(T[u].son,t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:g[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==T[u].fa||v==T[u].son) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="quad-建立树上值域线段树">2.3<spanclass="math inline">\(\quad\)</span> 建立树上值域线段树</h2><p>因为子树的 <span class="math inline">\(\text{dfs}\)</span>序一个区间，我们就可以建立值域线段树。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    tree[p].l=l,tree[p].r=r;</span><br><span class="line">    tree[p].tag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[p].sum=w[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(l,mid,ls);</span><br><span class="line">    <span class="built_in">build</span>(mid+<span class="number">1</span>,r,rs);</span><br><span class="line">    <span class="built_in">update</span>(p);<span class="comment">//整合子树信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三维护信息">三、维护信息</h1><h2 id="quad-进行子树加操作">3.1<spanclass="math inline">\(\quad\)</span> 进行子树加操作</h2><p>因为子树的 <span class="math inline">\(\text{dfs}\)</span>序是一个区间，可以在线段树上进行区间修改操作（<spanclass="math inline">\(\text{modify}\)</span>），修改的区间就是 ，其<spanclass="math inline">\([\text{dfn}[p],\text{dfn}[p]+\text{sz}[p]-1]\)</span>中<span class="math inline">\(p\)</span> 为子树根节点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[p].l&amp;&amp;r&gt;=tree[p].r)&#123;</span><br><span class="line">        tree[p].sum=(tree[p].sum+k*<span class="built_in">len</span>(p))%mod;</span><br><span class="line">        tree[p].tag=(tree[p].tag+k)%mod;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);<span class="comment">//懒标记下传</span></span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modify</span>(l,r,k,ls);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) <span class="built_in">modify</span>(l,r,k,rs);</span><br><span class="line">    <span class="built_in">update</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//in main:</span></span><br><span class="line"><span class="built_in">modify</span>(dfn[x],dfn[x]+T[x].sz<span class="number">-1</span>,z,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="quad进行子树求和">3.2<spanclass="math inline">\(\quad\)</span>进行子树求和</h2><p>类比子树加操作，在线段树上进行区间求和（<spanclass="math inline">\(\text{query}\)</span>），求和区间就是 <spanclass="math inline">\([\text{dfn}[p],\text{dfn}[p]+\text{sz}[p]-1]\)</span>，其中<span class="math inline">\(p\)</span> 为子树根节点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[p].l&amp;&amp;r&gt;=tree[p].r) <span class="keyword">return</span> tree[p].sum;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) ans=(ans+<span class="built_in">query</span>(l,r,ls))%mod;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) ans=(ans+<span class="built_in">query</span>(l,r,rs))%mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//in main:</span></span><br><span class="line">cout&lt;&lt;<span class="built_in">query</span>(dfn[x],dfn[x]+T[x].sz<span class="number">-1</span>,<span class="number">1</span>)&lt;&lt;endl;</span><br></pre></td></tr></table></figure><h2 id="quad-进行路径修改操作">3.3<spanclass="math inline">\(\quad\)</span> 进行路径修改操作</h2><p>根据重连定理，除了根节点以外的任何一个节点的父亲一定在一条重链上。所以我们就可以进行重链到重链的转换，从而一点一点地在每一条链上进行区间修改。</p><p>考虑每次选择链头深度高的那条链，将该节点跳到链头并区间修改，此时就改掉了这条链（也就是路径的一部分）上的值，修改区间为<spanclass="math inline">\([\text{dfn}[\text{top}[p]],\text{dfn}[p]]\)</span>，其中，<spanclass="math inline">\(p\)</span>为该节点，而后跳到链头的父亲，此时就在另一条链上了，可以重复操作直到两节点在同一条重链上。</p><p>如果两节点在同一跳重链上，则可以直接进行区间修改，修改区间为 <spanclass="math inline">\([\text{dfn}[x],\text{dfn}[y]]\)</span>$，其中<span class="math inline">\(x,y\)</span>是两个节点，且防止无效修改操作， <spanclass="math inline">\(\text{dep}[x]&lt;\text{dep}[y]\)</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">addOnTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    c%=mod;</span><br><span class="line">    <span class="keyword">while</span>(T[x].top!=T[y].top)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T[T[x].top].dep&lt;T[T[y].top].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="built_in">modify</span>(dfn[T[x].top],dfn[x],c,<span class="number">1</span>);</span><br><span class="line">        x=T[T[x].top].fa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(T[x].dep&gt;T[y].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="built_in">modify</span>(dfn[x],dfn[y],c,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="quad-进行路径求和操作">3.4<spanclass="math inline">\(\quad\)</span> 进行路径求和操作</h2><p>思想类似路径修改，只不过把修改操作改成求和。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getSumOnTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(T[x].top!=T[y].top)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T[T[x].top].dep&lt;T[T[y].top].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        ans=(ans+<span class="built_in">query</span>(dfn[T[x].top],dfn[x],<span class="number">1</span>))%mod;</span><br><span class="line">        x=T[T[x].top].fa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(T[x].dep&gt;T[y].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    ans=(ans+<span class="built_in">query</span>(dfn[x],dfn[y],<span class="number">1</span>))%mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四参考代码">四、参考代码</h1><p>本代码为树链剖分/重链剖分模板。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((tree[p].l+tree[p].r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls (p&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs (p&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> len(x) (tree[x].r-tree[x].l+1)</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">G</span>&#123;</span><br><span class="line">    <span class="type">int</span> sz,dep,top,son,fa;</span><br><span class="line">&#125;T[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">F</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r,sum,tag;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n,m,r,mod,a[MAXN],dfn[MAXN],tick,w[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    T[u].fa=fa;</span><br><span class="line">    T[u].sz=<span class="number">1</span>;</span><br><span class="line">    T[u].dep=T[fa].dep+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> tmp=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:g[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(v,u);</span><br><span class="line">        T[u].sz+=T[v].sz;</span><br><span class="line">        <span class="keyword">if</span>(T[v].sz&gt;tmp)&#123;</span><br><span class="line">            tmp=T[v].sz;</span><br><span class="line">            T[u].son=v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">    T[u].top=t;</span><br><span class="line">    dfn[u]=++tick;</span><br><span class="line">    w[tick]=a[u];</span><br><span class="line">    <span class="keyword">if</span>(!T[u].son) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(T[u].son,t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:g[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==T[u].fa||v==T[u].son) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    tree[p].sum=tree[ls].sum+tree[rs].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    tree[p].l=l,tree[p].r=r;</span><br><span class="line">    tree[p].tag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[p].sum=w[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(l,mid,ls);</span><br><span class="line">    <span class="built_in">build</span>(mid+<span class="number">1</span>,r,rs);</span><br><span class="line">    <span class="built_in">update</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tree[p].tag) <span class="keyword">return</span>;</span><br><span class="line">    tree[ls].sum=(tree[ls].sum+tree[p].tag*<span class="built_in">len</span>(ls))%mod;</span><br><span class="line">    tree[rs].sum=(tree[rs].sum+tree[p].tag*<span class="built_in">len</span>(rs))%mod;</span><br><span class="line">    tree[ls].tag=(tree[ls].tag+tree[p].tag)%mod;</span><br><span class="line">    tree[rs].tag=(tree[rs].tag+tree[p].tag)%mod;</span><br><span class="line">    tree[p].tag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[p].l&amp;&amp;r&gt;=tree[p].r)&#123;</span><br><span class="line">        tree[p].sum=(tree[p].sum+k*<span class="built_in">len</span>(p))%mod;</span><br><span class="line">        tree[p].tag=(tree[p].tag+k)%mod;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modify</span>(l,r,k,ls);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) <span class="built_in">modify</span>(l,r,k,rs);</span><br><span class="line">    <span class="built_in">update</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addOnTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    c%=mod;</span><br><span class="line">    <span class="keyword">while</span>(T[x].top!=T[y].top)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T[T[x].top].dep&lt;T[T[y].top].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="built_in">modify</span>(dfn[T[x].top],dfn[x],c,<span class="number">1</span>);</span><br><span class="line">        x=T[T[x].top].fa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(T[x].dep&gt;T[y].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="built_in">modify</span>(dfn[x],dfn[y],c,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=tree[p].l&amp;&amp;r&gt;=tree[p].r) <span class="keyword">return</span> tree[p].sum;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) ans=(ans+<span class="built_in">query</span>(l,r,ls))%mod;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) ans=(ans+<span class="built_in">query</span>(l,r,rs))%mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getSumOnTree</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(T[x].top!=T[y].top)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T[T[x].top].dep&lt;T[T[y].top].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        ans=(ans+<span class="built_in">query</span>(dfn[T[x].top],dfn[x],<span class="number">1</span>))%mod;</span><br><span class="line">        x=T[T[x].top].fa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(T[x].dep&gt;T[y].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    ans=(ans+<span class="built_in">query</span>(dfn[x],dfn[y],<span class="number">1</span>))%mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;r&gt;&gt;mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        g[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">        g[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(r,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(r,r);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> op,x,y,z,i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        <span class="keyword">switch</span>(op)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">                cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">                <span class="built_in">addOnTree</span>(x,y,z);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">                cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">                cout&lt;&lt;<span class="built_in">getSumOnTree</span>(x,y)&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">                cin&gt;&gt;x&gt;&gt;z;</span><br><span class="line">                <span class="built_in">modify</span>(dfn[x],dfn[x]+T[x].sz<span class="number">-1</span>,z,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">                cin&gt;&gt;x;</span><br><span class="line">                cout&lt;&lt;<span class="built_in">query</span>(dfn[x],dfn[x]+T[x].sz<span class="number">-1</span>,<span class="number">1</span>)&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合计数</title>
      <link href="/post/425aabd8d0fb.html"/>
      <url>/post/425aabd8d0fb.html</url>
      
        <content type="html"><![CDATA[<p>组合计数</p><p>本章主要记录基础组合数学的有关知识，包括加法原理、乘法原理、排列组合、二项式定理、卢卡斯定理等基本知识。</p><h1 id="一计数原理">一、计数原理</h1><p>基础的计数原理包括加法原理和乘法原理，是组合数学的基础。</p><h2 id="quad加法原理">1.1<spanclass="math inline">\(\quad\)</span>加法原理</h2><p>若完成一件事情的方法有 <span class="math inline">\(n\)</span>类，其中第 <span class="math inline">\(i\)</span> 类方法有 <spanclass="math inline">\(a_i\)</span>种不同的方法，且这些方法互补重合，则完成这件事一共有 <spanclass="math inline">\(\sum_{i=1}^na_i\)</span>种不同的方法。这样的计数原理称为<strong>加法原理</strong>。</p><p><strong>例</strong><spanclass="math inline">\(\qquad\)</span>中午可以去A、B、C三个街区吃饭，三个街区分别有<span class="math inline">\(6\)</span>、<spanclass="math inline">\(5\)</span>、<span class="math inline">\(8\)</span>家餐厅，那么中午吃饭有 <span class="math inline">\(6+5+8=19\)</span>家餐厅可选。</p><h2 id="quad乘法原理">1.2<spanclass="math inline">\(\quad\)</span>乘法原理</h2><p>若完成一件事情需要 <span class="math inline">\(n\)</span>个步骤，其中第 <span class="math inline">\(i\)</span> 个步骤有 <spanclass="math inline">\(a_i\)</span>种不同的完成方法，且这些步骤互不干扰，则完成这件事一共有 <spanclass="math inline">\(\prod_{i=1}^na_i\)</span>种不同的方法。这样的计数原理成为<strong>乘法原理</strong>。</p><p><strong>例</strong><span class="math inline">\(\quad\)</span>餐厅有<span class="math inline">\(4\)</span> 种主食，<spanclass="math inline">\(2\)</span> 种配菜，<spanclass="math inline">\(5\)</span> 种配汤，那么可以组成 $4=40 $种套餐。</p><h1 id="二排列数与组合数">二、排列数与组合数</h1><h2 id="quad排列数">2.1<spanclass="math inline">\(\quad\)</span>排列数</h2><p>从 <span class="math inline">\(n\)</span> 个不同元素种依次选出 <spanclass="math inline">\(m\)</span>个元素排成一列，产生的不同的排列的数量为</p><p><span class="math display">\[A_n^m(\text{或记作}P_n^m)=\dfrac{n!}{(n-m)!}\]</span></p><h2 id="quad组合数">2.2<spanclass="math inline">\(\quad\)</span>组合数</h2><p>从 <span class="math inline">\(n\)</span> 个不同元素种依次选出 <spanclass="math inline">\(m\)</span>个组成一个集合（不考虑顺序），产生的不同的集合的数量为</p><p><span class="math display">\[C_n^m(\text{或记作}\dbinom{n}{m})=\dfrac{n!}{m!(n-m)!}\]</span></p><h2 id="quad组合恒等式">2.3<spanclass="math inline">\(\quad\)</span>组合恒等式</h2><p><strong>恒等式1</strong><span class="math inline">\(\quad\)</span>选出一部分再反选，有 <spanclass="math inline">\(\dbinom{n}{k}=\dbinom{n}{n-k}\)</span>。</p><p><strong>恒等式2</strong><span class="math inline">\(\quad\)</span>考虑枚举是否选第 <span class="math inline">\(1\)</span> 个，有 <spanclass="math inline">\(\dbinom{n}{k}=\dbinom{n-1}{k}+\dbinom{n-1}{k-1}\)</span>。</p><p><strong>恒等式3</strong><spanclass="math inline">\(\quad\dbinom{n}{k}\dbinom{k}{t}=\dbinom{n}{t}\dbinom{n-t}{k-t}\)</span>。</p><p><span class="math inline">\(\qquad\)</span>辅助理解：<spanclass="math inline">\(n\)</span> 个人选 <spanclass="math inline">\(k\)</span> 个队长再在其中选 <spanclass="math inline">\(t\)</span> 个大队长，等于 <spanclass="math inline">\(n\)</span> 个人选 <spanclass="math inline">\(t\)</span> 个大队长再在剩下 <spanclass="math inline">\(n-t\)</span> 个选 <spanclass="math inline">\(k-t\)</span> 个队长。</p><p><strong>恒等式4</strong><span class="math inline">\(\quad\)</span>枚举最后一个选在哪里，也可由恒等式1迭代导出，有 <spanclass="math inline">\(\dbinom{n}{k}=\sum\limits_{i=k}^n\dbinom{i-1}{k-1}\)</span>。</p><p><strong>恒等式5</strong><span class="math inline">\(\quad\)</span><span class="math inline">\(n+m\)</span> 个选 <spanclass="math inline">\(k\)</span> 个，枚举前 <spanclass="math inline">\(n\)</span> 个选多少，有 <spanclass="math inline">\(\dbinom{n+m}{k}=\sum\limits_{i=0}^k\dbinom{n}{i}\dbinom{m}{k-i}\)</span>。</p><p><strong>恒等式6</strong><span class="math inline">\(\quad\)</span>枚举第 <span class="math inline">\(a+1\)</span> 个位置，有 <spanclass="math inline">\(\dbinom{n}{a+b+1}=\sum\limits_{i=a+1}^{n-b}\dbinom{i-1}{a}\dbinom{n-i}{b}\)</span>。</p><p><span class="math inline">\(b=0\)</span> 时退化为恒等式4。</p><p><strong>恒等式7</strong><span class="math inline">\(\quad\)</span><spanclass="math inline">\(\sum\limits_{i=0}^n\dbinom{n}{i}=2^n\)</span>。</p><h2 id="quad组合数的求法">2.4<spanclass="math inline">\(\quad\)</span>组合数的求法</h2><h3 id="quad-根据定义求解">2.4.1 <spanclass="math inline">\(\quad\)</span> 根据定义求解</h3><p>求解 <span class="math inline">\(C_n^m\bmod p\)</span> 时，可以计算<span class="math inline">\(n!\bmod p\)</span> 的值，之后乘上 <spanclass="math inline">\(m!^{-1}(n-m)!^{-1}\bmod p\)</span>（即逆元）即可。当 <span class="math inline">\(p\)</span>为质数时可以利用欧拉定理和快速幂求解逆元，其余情况可以线性求解逆元。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">    ll w=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) w=w*a%p;</span><br><span class="line">        a=a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n,ll m,ll p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m&gt;n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (a[n]*<span class="built_in">qpow</span>(a[m],p<span class="number">-2</span>,p)%p)*<span class="built_in">qpow</span>(a[n-m],p<span class="number">-2</span>,p)%p;<span class="comment">//a数组为线性预处理的阶乘数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="quad-递推求解">2.4.2 <span class="math inline">\(\quad\)</span>递推求解</h3><p>根据组合恒等式 2 <span class="math display">\[\dbinom{n}{k}=\dbinom{n-1}{k}+\dbinom{n-1}{k-1}\]</span></p><p>我们可以递推求解。下面的代码求解出了所有 <spanclass="math inline">\(\dbinom{i}{j}(0\leq j\leq i\leqn)\)</span>，表示为数组 <code>c[i][j]</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    c[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        c[i][<span class="number">0</span>]=c[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">            c[i][j]=(c[i<span class="number">-1</span>][j]+c[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三二项式定理与杨辉三角">三、二项式定理与杨辉三角</h1><h2 id="quad二项式定理">3.1<spanclass="math inline">\(\quad\)</span>二项式定理</h2><p><span class="math display">\[(a+b)^n=\sum\limits_{k=0}^nC_n^ka^kb^{n-k}\]</span></p><p><strong>例</strong> <span class="math inline">\(\quad\)</span> <spanclass="math inline">\((a+b)^3=a^3+3a^2b+3ab^2+b^3\)</span>。</p><h2 id="quad杨辉三角">3.2<spanclass="math inline">\(\quad\)</span>杨辉三角</h2><p>对于每个 <spanclass="math inline">\(n\)</span>，二项式定理拆解后的二项式稀疏构成杨辉三角，如下图。</p><p><imgsrc="https://cdn.luogu.com.cn/upload/image_hosting/bisgz7o3.png" /></p><p>可以发现，三角中每一个数为其左上和右上的两个数之和，可以得出 <spanclass="math inline">\(C_n^k=C_{n-1}^{k-1}+C_{n-1}^{k}\)</span>，即恒等式2。</p><h1 id="四卢卡斯定理">四、卢卡斯定理</h1><h2 id="quad卢卡斯定理">4.1<spanclass="math inline">\(\quad\)</span>卢卡斯定理</h2><p><strong>卢卡斯定理</strong><spanclass="math inline">\(\quad\)</span>若 <spanclass="math inline">\(p\)</span> 是质数，则对于任意整数 <spanclass="math inline">\(1\leq m\leq n\)</span>，有： <spanclass="math display">\[\dbinom{n}{m}\equiv \dbinom{n\bmod p}{m\bmod p}\dbinom{n/p}{m/p}\pmod p\]</span></p><p>求解 <span class="math inline">\(\binom{n}{m}\bmod p\)</span>时，可以利用公式求解 <span class="math inline">\(\dbinom{n\bmodp}{m\bmod p}\bmod p\)</span>，同时递归求解 <spanclass="math inline">\(\dbinom{n/p}{m/p}\bmodp\)</span>，需要预处理出阶乘数组 <spanclass="math inline">\(a\)</span>，在计算 <spanclass="math inline">\(\dfrac{n!}{m!(n-m)!}\)</span> 时利用逆元求出。因为<span class="math inline">\(p\)</span>为质数，所以可以直接用快速幂方法求出逆元。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100005</span></span><br><span class="line">ll t,a[MAXN];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">    ll w=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) w=w*a%p;</span><br><span class="line">        a=a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n,ll m,ll p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m&gt;n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (a[n]*<span class="built_in">qpow</span>(a[m],p<span class="number">-2</span>,p)%p)*<span class="built_in">qpow</span>(a[n-m],p<span class="number">-2</span>,p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">lucas</span><span class="params">(ll n,ll m,ll p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">C</span>(n%p,m%p,p)*<span class="built_in">lucas</span>(n/p,m/p,p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll n,m,p;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;m&gt;&gt;p;</span><br><span class="line">        a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=p;i++) a[i]=a[i<span class="number">-1</span>]*i%p;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">lucas</span>(n+m,m,p)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展卢卡斯定理">4.2 扩展卢卡斯定理</h2><p>此部分需要同余基础知识点，<del>貌似与卢卡斯定理没有任何关系</del>。</p><p>因为利用卢卡斯定理处理问题存在局限性（<spanclass="math inline">\(p\)</span>必须为质数），不能处理普遍情况。此时可以用扩展卢卡斯定理解决普遍情况。</p><p><strong>求解以下问题</strong>：对于组合数 <spanclass="math inline">\(\dbinom{n}{m}\)</span> ，求 <spanclass="math inline">\(\dbinom{n}{m}\bmod p\)</span> ，<spanclass="math inline">\(p\)</span> 不保证为质数。</p><p>如果 <span class="math inline">\(p\)</span>为质数会方便很多，所以考虑将其拆为若干个模质数的式子。根据唯一分解定理，<span class="math display">\[P=p_1^{a_1}p_2^{a_2}\cdots p_k^{a_k}\]</span> 所以考虑拆分为 <span class="math display">\[\begin{cases}x_1\equiv\dbinom{n}{m}&amp;\pmod {p_1^{a_1}}\\x_2\equiv\dbinom{n}{m}&amp;\pmod {p_2^{a_2}}\\&amp;\cdots\\x_k\equiv\dbinom{n}{m}&amp;\pmod {p_k^{a_k}}\end{cases}\]</span> 因为 <spanclass="math inline">\(\dbinom{n}{m}=\dfrac{n!}{m!(n-m)!}\)</span> ，在模<span class="math inline">\(p_1^{a_1}\)</span>意义下不能直接利用逆元化解分母。所以考虑如下拆分： <spanclass="math display">\[\dbinom{n}{m}\equiv\dfrac{n!}{m!(n-m)!}\equiv\dfrac{\dfrac{n!}{p^x}}{\dfrac{m!}{p^y}\cdot\dfrac{(n-m)!}{p^z}}\cdotp^{x-y-z}\pmod {p^k}\]</span> <span class="math inline">\(x\)</span> 为 <spanclass="math inline">\(n!\)</span> 中包含的 <spanclass="math inline">\(p\)</span> 的因子个数，<spanclass="math inline">\(y\)</span>、<span class="math inline">\(z\)</span>同理。</p><p>考虑逐个解决。因为 <span class="math inline">\(n!\)</span> 中一共有<spanclass="math inline">\(\left\lfloor\dfrac{n}{p}\right\rfloor\)</span>个数是 <span class="math inline">\(p\)</span>的倍数，然后递归处理其他因数。 <span class="math display">\[n!\equivp^{\left\lfloor\frac{n}{p}\right\rfloor}(\left\lfloor\frac{n}{p}\right\rfloor)!(\prod\limits_{i=1,i\not\equiv0\pmodp}^{n}i)\pmod{p^k}\]</span> 将 <spanclass="math inline">\(\prod\limits_{i=1,i\not\equiv0\pmodp}^{n}i\)</span> 拆分为两个部分：不含有 <spanclass="math inline">\(p\)</span> 的因子和含有 <spanclass="math inline">\(p\)</span> 的因子。 <span class="math display">\[n!\equivp^{\left\lfloor\frac{n}{p}\right\rfloor}(\left\lfloor\frac{n}{p}\right\rfloor)!(\prod\limits_{i=1,i\not\equiv0\pmodp}^{p^k}i)^{\left\lfloor\frac{n}{p^k}\right\rfloor}(\prod\limits_{i=p^k\left\lfloor\frac{n}{p^k}\right\rfloor,i\not\equiv0\pmodp}^{n}i)\pmod{p^k}\]</span> 所以考虑设立函数 <spanclass="math inline">\(f(n)=\dfrac{n!}{p^k}\)</span>，所以有 <spanclass="math display">\[f(n)\equiv\dfrac{n!}{p^k}\equivp^{\left\lfloor\frac{n}{p}\right\rfloor}(\left\lfloor\frac{n}{p}\right\rfloor)!(\prod\limits_{i=1,i\not\equiv0\pmodp}^{p^k}i)^{\left\lfloor\frac{n}{p^k}\right\rfloor}(\prod\limits_{i=p^k\left\lfloor\frac{n}{p^k}\right\rfloor,i\not\equiv0\pmodp}^{n}i)\pmod{p^k}\]</span> 边界：<span class="math inline">\(f(0)=1\)</span>。</p><p>这样函数 <span class="math inline">\(f\)</span> 就一定和 <spanclass="math inline">\(p^k\)</span>互质了，就可以直接利用扩展欧几里得算法（<spanclass="math inline">\(\text{exgcd}\)</span>）求出逆元（ <spanclass="math inline">\(\text{inv}\)</span> ），化分母。</p><p>然后还需要求解 <spanclass="math inline">\(p^{x-y-z}\)</span>。考虑设立函数 <spanclass="math inline">\(g(n)=x\)</span>（ <spanclass="math inline">\(x\)</span> 为 <spanclass="math inline">\(n!\)</span> 中包含的 <spanclass="math inline">\(p\)</span> 的因子数），所以有 <spanclass="math display">\[g(n)=\left\lfloor\frac{n}{p}\right\rfloor+g(\left\lfloor\dfrac{n}{p}\right\rfloor)\]</span> 边界：<span class="math inline">\(g(x)=0(x&lt;p)\)</span></p><p>这样就可以求解啦。式子变成了 <span class="math display">\[\dbinom{n}{m}\equiv\dfrac{f(n)}{f(m)f(n-m)}\cdotp^{g(n)-g(m)-g(n-m)}\pmod{p^k}\]</span> 然后用中国剩余定理（ <spanclass="math inline">\(\text{CRT}\)</span> ）合并即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 10005</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll n,m,P,A[MAXN],B[MAXN];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b,ll p)</span></span>&#123;</span><br><span class="line">    ll w=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) w=w*a%p;</span><br><span class="line">        a=a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll x,ll p,ll pk)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    ll a=<span class="number">1</span>,b=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=pk;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i%p) a=a*i%pk;</span><br><span class="line">    &#125;</span><br><span class="line">    a=<span class="built_in">qpow</span>(a,x/pk,pk);</span><br><span class="line">    <span class="keyword">for</span>(ll i=pk*(x/pk);i&lt;=x;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i%p) b=b*(i%pk)%pk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">f</span>(x/p,p,pk)*a%pk*b%pk;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exgcd</span>(b,a%b,y,x);</span><br><span class="line">    y-=a/b*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a,ll p)</span></span>&#123;</span><br><span class="line">    ll x,y;</span><br><span class="line">    <span class="built_in">exgcd</span>(a,p,x,y);</span><br><span class="line">    <span class="keyword">return</span> (x+p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">g</span><span class="params">(ll x,ll p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x/p+<span class="built_in">g</span>(x/p,p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">CmodPk</span><span class="params">(ll p,ll pk)</span></span>&#123;</span><br><span class="line">    ll fx=<span class="built_in">f</span>(n,p,pk),fy=<span class="built_in">f</span>(m,p,pk),fz=<span class="built_in">f</span>(n-m,p,pk);</span><br><span class="line">    fy=<span class="built_in">inv</span>(fy,pk),fz=<span class="built_in">inv</span>(fz,pk);</span><br><span class="line">    <span class="keyword">return</span> fx*fy%pk*fz%pk*<span class="built_in">qpow</span>(p,<span class="built_in">g</span>(n,p)-<span class="built_in">g</span>(m,p)-<span class="built_in">g</span>(n-m,p),pk)%pk;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">crt</span><span class="params">(ll cnt)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">        ll M=P/A[i];</span><br><span class="line">        ll T=<span class="built_in">inv</span>(M,A[i]);</span><br><span class="line">        ans=(ans+B[i]*M%P*T%P)%P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">exlucas</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll tmp=P,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">2</span>;i*i&lt;=P;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tmp%i==<span class="number">0</span>)&#123;</span><br><span class="line">            ll pk=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(tmp%i==<span class="number">0</span>) pk*=i,tmp/=i;</span><br><span class="line">            A[++cnt]=pk;</span><br><span class="line">            B[cnt]=<span class="built_in">CmodPk</span>(i,pk);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tmp&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        A[++cnt]=tmp;</span><br><span class="line">        B[cnt]=<span class="built_in">CmodPk</span>(tmp,tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">crt</span>(cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;P;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">exlucas</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同余</title>
      <link href="/post/2f4ed4efbf3d.html"/>
      <url>/post/2f4ed4efbf3d.html</url>
      
        <content type="html"><![CDATA[<p>同余</p><p>本章主要记录有关同余、费马小定理、欧拉定理、扩展欧几里得算法、裴蜀定理、乘法逆元、威尔逊定理、线性同余方程、中国剩余定理、扩展中国剩余定理、BSGS以及扩展BSGS的学习笔记。</p><p>由于内容复杂且关联较少，建议配备 <code>ctrl+F</code>进行快乐食用。</p><p>正在继更ing</p><h1 id="一基础知识">一、基础知识</h1><p>这个板块着重介绍同余的基本知识，虽然多为数学竞赛内容，但也对信息学竞赛有不少帮助，定理和性质为拓展内容。</p><p>本部分参考《初等数论》进行撰写。</p><h2 id="quad基本定义定理与性质">1.1<spanclass="math inline">\(\quad\)</span>基本定义、定理与性质</h2><p><strong>定义1</strong>（<strong>同余</strong>）<spanclass="math inline">\(\quad\)</span> 设 <spanclass="math inline">\(m\neq0\)</span>。若 <spanclass="math inline">\(m\mid a-b\)</span>，即 <spanclass="math inline">\(a-b=km\)</span>，则称 <spanclass="math inline">\(m\)</span> 为<strong>模</strong>，<spanclass="math inline">\(a\)</span> <strong>同于与</strong> <spanclass="math inline">\(b\)</span> <strong>模</strong> <spanclass="math inline">\(m\)</span> 以及 <spanclass="math inline">\(b\)</span> <strong>是</strong> <spanclass="math inline">\(a\)</span> <strong>对模</strong> <spanclass="math inline">\(m\)</span> <strong>的剩余</strong>，记作 <spanclass="math display">\[a\equiv b\pmod{m} \tag{1}\]</span> 不然，则称 <span class="math inline">\(a\)</span><strong>不同余于</strong> <span class="math inline">\(b\)</span><strong>模</strong> <span class="math inline">\(m\)</span>，<spanclass="math inline">\(b\)</span> <strong>不是</strong> <spanclass="math inline">\(a\)</span> <strong>对模</strong> <spanclass="math inline">\(m\)</span> <strong>的剩余</strong>，记作 <spanclass="math inline">\(a\not\equiv b\pmod{m}\)</span></p><p>式 <span class="math inline">\((1)\)</span> 称为<strong>模</strong><span class="math inline">\(m\)</span><strong>的同余式</strong>，或简称<strong>同余式</strong>。</p><p>由于 <span class="math inline">\(m\mid a-b\)</span> 等价于 <spanclass="math inline">\(-m\mid a-b\)</span> ，所以同余式 <spanclass="math inline">\((1)\)</span> 等价于</p><p><span class="math display">\[a\equiv b\pmod{(-m)}\]</span> <strong>定理1</strong><spanclass="math inline">\(\quad\)</span> <spanclass="math inline">\(a\)</span> 同余于 <spanclass="math inline">\(b\)</span> 模 <spanclass="math inline">\(m\)</span> 的充要条件是 <spanclass="math inline">\(a\)</span> 和 <spanclass="math inline">\(b\)</span> 被 <spanclass="math inline">\(m\)</span> 除后所得的最小非负余数相等，即若 <spanclass="math display">\[\begin{aligned}a=q_1m+r_1&amp;,0\leq r_1&lt;m\\b=q_2m+r_2&amp;,0\leq r_2&lt;m,\end{aligned}\]</span> 则 <span class="math inline">\(r_1=r_2\)</span>。</p><p><strong>性质Ⅰ</strong><span class="math inline">\(\quad\)</span>同余是一种等价关系，即有 <span class="math display">\[\begin{aligned}a\equiv a\pmod{m}\\a\equiv b\pmod{m}\iff b\equiv a\pmod{m}\\a\equiv b\pmod{m}\;,\;b\equiv c\pmod{m}\Rightarrow a\equiv c\pmod{m}\end{aligned}\]</span> <strong>性质Ⅱ</strong><spanclass="math inline">\(\quad\)</span> 同余式可以相加，即若有 <spanclass="math display">\[a\equiv b\pmod{m}\;,\;c\equiv d\pmod{m}\tag{2}\]</span></p><p>则有</p><p><span class="math display">\[a+c\equiv b+d\pmod m\]</span></p><p><strong>性质Ⅲ</strong><span class="math inline">\(\quad\)</span>同余式可以相乘，即若式 <span class="math inline">\((2)\)</span>成立，则</p><p><span class="math display">\[ac\equiv bd\pmod m\]</span></p><p><strong>性质Ⅳ</strong><span class="math inline">\(\quad\)</span> 设<span class="math inline">\(f(x)=a_nx^n+\cdots+a_0\)</span>，<spanclass="math inline">\(g(x)=b_nx^n+\cdots+b_0\)</span>是两个整系数多项式，满足</p><p><span class="math display">\[a_j\equiv b_j\pmod m\;,\;0\leq j&lt;n\tag{3}\]</span></p><p>那么，若 <span class="math inline">\(a\equiv b\pmodm\)</span>，则</p><p><span class="math display">\[f(a)\equiv g(b)\pmod m\]</span></p><p>特别地，<strong>对所有整数</strong> <spanclass="math inline">\(x\)</span> 有</p><p><span class="math display">\[f(x)\equiv g(x)\pmod m\tag{4}\]</span></p><p><strong>定义2</strong><span class="math inline">\(\quad\)</span> 设<span class="math inline">\(f(x)=a_nx^n+\cdots+a_0\)</span> 和 <spanclass="math inline">\(g(x)=b_nx^n+\cdots+b_0\)</span>是两个整系数多项式。当满足条件 <span class="math inline">\((3)\)</span>时，称<strong>多项式</strong> <span class="math inline">\(f(x)\)</span><strong>同余于多项式</strong> <span class="math inline">\(g(x)\)</span><strong>模</strong> <span class="math inline">\(m\)</span>，记作</p><p><span class="math display">\[f(x)\equiv g(x)\pmod m\]</span></p><p>当满足 <span class="math inline">\(f(x)\equiv g(x)\pmod m\)</span>时，称<strong>多项式</strong> <span class="math inline">\(f(x)\)</span><strong>等价于多项式</strong> <span class="math inline">\(g(x)\)</span><strong>模</strong> <span class="math inline">\(m\)</span>，式 <spanclass="math inline">\((4)\)</span>称为<strong>模</strong> <spanclass="math inline">\(m\)</span> <strong>的恒等同余式</strong></p><p><strong>性质Ⅴ</strong><span class="math inline">\(\quad\)</span> 设<span class="math inline">\(d\geq1\)</span>，<spanclass="math inline">\(d\mid m\)</span>，那么，若式 <spanclass="math inline">\((1)\)</span> 成立，则 <spanclass="math inline">\(a\equiv b\pmod d\)</span></p><p><strong>性质Ⅵ</strong><span class="math inline">\(\quad\)</span> 设<span class="math inline">\(d\not=0\)</span>，那么 <spanclass="math inline">\(a\equiv b\pmod m\)</span> 等价于 <spanclass="math inline">\(da\equiv db\pmod{\left\vert d\right\vertm}\)</span></p><p><strong>性质Ⅶ</strong><span class="math inline">\(\quad\)</span>同余式 <span class="math inline">\(ca\equiv cb\pmod m\)</span> 等价于<span class="math inline">\(a\equiv b\pmod{\fracm{\gcd(c,m)}}\)</span></p><p>特别地，当 <span class="math inline">\(\gcd(c,m)=1\)</span>时，上述同余式等价于 <span class="math inline">\(a\equiv b\pmodm\)</span></p><p><strong>性质Ⅷ</strong><span class="math inline">\(\qquad\)</span> 若<span class="math inline">\(m\geq1\)</span>，<spanclass="math inline">\(\gcd(a,m)=1\)</span>，则存在 <spanclass="math inline">\(c\)</span> 使得</p><p><span class="math display">\[ca\equiv1\pmod m\tag{5}\]</span></p><p><strong>定义3</strong><span class="math inline">\(\quad\)</span>若存在 <span class="math inline">\(m\geq1\)</span>，<spanclass="math inline">\(\gcd(a,m)=1\)</span>，且满足式 <spanclass="math inline">\((5)\)</span>，我们把 <spanclass="math inline">\(c\)</span> 称为 <spanclass="math inline">\(a\)</span> 对模 <spanclass="math inline">\(m\)</span> 的逆，记作 <spanclass="math inline">\(a^{-1}\pmod m\)</span> 或 <spanclass="math inline">\(a^{-1}\)</span></p><p><strong>性质Ⅸ</strong><span class="math inline">\(\quad\)</span>同余式组</p><p><span class="math display">\[a\equiv b\pmod{m_j}\;,\;j=1,2,\cdots,k\]</span></p><p>同时成立的充要条件是</p><p><span class="math display">\[a\equiv b\pmod{[m_1,m_2,\cdots,m_k]}\]</span></p><h2 id="quad同余类与剩余系">1.2<spanclass="math inline">\(\quad\)</span>同余类与剩余系</h2><p><strong>定义4（同余类和剩余系）</strong><spanclass="math inline">\(\quad\)</span> 对于 <spanclass="math inline">\(\forall a\in [0,m-1]\)</span>，集合 <spanclass="math inline">\(\{a+km\}(k\in\mathbb{Z})\)</span> 的所有数模 <spanclass="math inline">\(m\)</span> 同余，余数都是 <spanclass="math inline">\(a\)</span>，该集合成为模 <spanclass="math inline">\(m\)</span> 的<strong>同余类</strong>，简记为 <spanclass="math inline">\(\overline{a}\)</span>。</p><p>模 <span class="math inline">\(m\)</span> 的同余类一共有 <spanclass="math inline">\(m\)</span> 个，分别为 <spanclass="math inline">\(\overline{0},\overline{1},\overline{2},\cdots,\overline{m-1}\)</span>。它们构成<span class="math inline">\(m\)</span>的<strong>完全剩余系</strong>。</p><p><span class="math inline">\(1\sim m\)</span> 中与 <spanclass="math inline">\(m\)</span> 互质的数代表的同余类共有 <spanclass="math inline">\(\phi(m)\)</span> 个，它们构成 <spanclass="math inline">\(m\)</span> 的<strong>简化剩余系</strong>。</p><h1 id="二费马小定理和欧拉定理">二、费马小定理和欧拉定理</h1><p>前置芝士：欧拉函数。</p><p>利用同余基本知识和欧拉函数，即可证明费马小定理和欧拉定理。</p><h2 id="quad费马小定理">2.1<spanclass="math inline">\(\quad\)</span>费马小定理</h2><p><strong>定理2（费马小定理）</strong><spanclass="math inline">\(\quad\)</span> 若 <spanclass="math inline">\(p\)</span> 是质数，则对于任意整数 <spanclass="math inline">\(a\)</span>，有</p><p><span class="math display">\[a^p\equiv a\pmod p\]</span></p><h2 id="quad欧拉定理">2.2<spanclass="math inline">\(\quad\)</span>欧拉定理</h2><p><strong>定理3（欧拉定理）</strong><spanclass="math inline">\(\quad\)</span> 若正整数 <spanclass="math inline">\(a,n\)</span> 互质，则</p><p><span class="math display">\[a^{\phi(n)}\equiv1\pmod n\]</span></p><p>其中，<span class="math inline">\(\phi(n)\)</span> 为欧拉函数。</p><p>特别地，当 <span class="math inline">\(p\)</span> 是质数时，<spanclass="math inline">\(\phi(p)=p-1\)</span>，并且只有 <spanclass="math inline">\(p\)</span> 的倍数与 <spanclass="math inline">\(p\)</span> 不互质，所以，只要 <spanclass="math inline">\(a\)</span> 不是 <spanclass="math inline">\(p\)</span> 的倍数，就有</p><p><span class="math display">\[a^{p-1}\equiv1\pmod p\]</span></p><p>两边同乘 <span class="math inline">\(a\)</span> 就是费马小定理。</p><p><strong>证</strong><span class="math inline">\(\quad\)</span> 设<span class="math inline">\(n\)</span> 的简化剩余系为 <spanclass="math inline">\(\{\overline{a_1},\overline{a_2},\cdots,\overline{a_{\phi(n)}}\}\)</span>。对于<span class="math inline">\(\forall a_i,a_j\)</span>，若 <spanclass="math inline">\(a\times a_i\equiv a\times a_j\pmod n\)</span>，则<span class="math inline">\(a\times(a_i-a_j)\equiv 0\)</span>。因为<span class="math inline">\(a,n\)</span> 互质，所以 <spanclass="math inline">\(a_i-a_j\equiv 0\)</span>，即 <spanclass="math inline">\(a_i\equiv a_j\)</span>。故当 <spanclass="math inline">\(a_i\not=a_j\)</span> 时，<spanclass="math inline">\(aa_1,aa_j\)</span> 也代表不同的同余类。</p><p>又因为简化剩余系关于模 <span class="math inline">\(n\)</span>乘法封闭，故 <span class="math inline">\(\overline{aa_1}\)</span>也在简化剩余系集合中。因此，集合 <spanclass="math inline">\(\{\overline{a_1},\overline{a_2},\cdots,\overline{a_{\phi(n)}}\}\)</span>与集合 <spanclass="math inline">\(\{\overline{aa_1},\overline{aa_2},\cdots,\overline{aa_{\phi(n)}}\}\)</span>都能表示 <span class="math inline">\(n\)</span> 的简化剩余系，故有</p><p><span class="math display">\[a^{\phi(n)}\prod\limits_{i=1}^{\phi(n)}a_i\equiv\prod\limits_{i=1}^{\phi(n)}aa_i\equiv\prod\limits_{i=1}^{\phi(n)}a_i\pmod n\]</span></p><p>两边同时除以 <spanclass="math inline">\(\prod\limits_{i=1}^{\phi(n)}a_i\)</span> 可得</p><p><span class="math display">\[a^{\phi(n)}\equiv1\pmod n\]</span></p><p>当 <span class="math inline">\(p\)</span> 为质数时，<spanclass="math inline">\(\phi(p)=p-1\)</span>，并且只有 <spanclass="math inline">\(p\)</span> 的倍数与 <spanclass="math inline">\(p\)</span> 不互质。所以，只要 <spanclass="math inline">\(a\)</span> 不是 <spanclass="math inline">\(p\)</span> 的倍数，<spanclass="math inline">\(a^{p-1}\equiv1\pmod p\)</span> 显然成立。两边同乘<span class="math inline">\(a\)</span> 即费马小定理。</p><p><strong>证毕。</strong></p><h2 id="quad欧拉定理的推论">2.3<spanclass="math inline">\(\quad\)</span>欧拉定理的推论</h2><p><strong>推论1（欧拉定理推论）</strong><spanclass="math inline">\(\quad\)</span> 若正整数 <spanclass="math inline">\(a,n\)</span> 互质，则对于任意正整数 <spanclass="math inline">\(b\)</span>，有</p><p><span class="math display">\[a^b\equiv a^{b\mod{\phi(n)}}\pmodn\]</span></p><p><strong>证</strong><span class="math inline">\(\quad\)</span> 设<span class="math inline">\(b=q\times\phi(n)+r\)</span>，其中 <spanclass="math inline">\(0\leq r&lt;\phi(n)\)</span>，即 <spanclass="math inline">\(r=b\mod{\phi(n)}\)</span>。利用欧拉定理有</p><p><span class="math display">\[a^b\equiv a^{q\times\phi(n)+r}\equiv(a^{\phi(n)})^q\times a^r\equiv1^q\times a^r\equiv a^r\equiv a^{b\mod{\phi(n)}+\phi(n)}\pmod n\]</span></p><p><strong>证毕。</strong></p><p>特别地，当 <span class="math inline">\(a,n\)</span> 不一定互质且<span class="math inline">\(b&gt;\phi(n)\)</span> 时，有</p><p><span class="math display">\[a^b\equiv a^{b\mod{\phi(n)+\phi(n)}}\pmod n\]</span></p><h2 id="quad光速幂">2.4<spanclass="math inline">\(\quad\)</span>光速幂</h2><p>给定 <span class="math inline">\(a\)</span> 和 <spanclass="math inline">\(c\)</span>，每次询问给出 <spanclass="math inline">\(b\)</span>，求 <spanclass="math inline">\(a^b\bmod c\)</span>。</p><p>我们可以先运用 <span class="math inline">\(a^b\bmod a^{b\bmod\phi(n)+\phi(n)}\pmod c\)</span>，将 <spanclass="math inline">\(b\)</span> 缩小到 <spanclass="math inline">\(2\phi(c)(&lt;2c)\)</span> 的范围，有</p><p><span class="math display">\[a^b=(a^{\sqrt c})^{\left\lfloor\frac{b}{\sqrt c}\right\rfloor}\timesa^{b\bmod \sqrt c}\]</span></p><p>其中，<span class="math inline">\(\frac{b}{\sqrt c}&lt;2\sqrtc\)</span>，<span class="math inline">\(b\bmod \sqrt c&lt;\sqrtc\)</span></p><p>我们预处理 <span class="math inline">\((a^{\sqrt c})^i\)</span> 和<span class="math inline">\(a^j\)</span> 即可 <spanclass="math inline">\(O(\sqrt c)\)</span> 预处理，<spanclass="math inline">\(O(1)\)</span> 回答询问。</p><h1 id="三扩展欧几里得算法">三、扩展欧几里得算法</h1><p>前置芝士：欧几里得算法。</p><p>本部分着重介绍扩展欧几里得算法、裴蜀定理和乘法逆元相关知识。</p><h2 id="quad裴蜀定理">3.1<spanclass="math inline">\(\quad\)</span>裴蜀定理</h2><p><strong>定理4（裴蜀定理）</strong> <spanclass="math inline">\(\quad\)</span> <span class="math inline">\(\foralla,b\in\mathbb{Z}\)</span>，一定存在一组 <spanclass="math inline">\(x,y\in\mathbb{Z}\)</span>，满足</p><p><span class="math display">\[ax+by=\gcd(a,b)\]</span></p><p><strong>证</strong><span class="math inline">\(\qquad\)</span>在欧几里得算法的最后一步，即 <span class="math inline">\(b=0\)</span>时，我们一定会得出一组整数 <spanclass="math inline">\(\begin{cases}x=1\\b=0\end{cases}\)</span>，使得<span class="math inline">\(a\times1+0\times0=\gcd(a,0)\)</span>。</p><p>由欧几里得算法得 <span class="math inline">\(\gcd(a,b)=\gcd(b,a\bmodb)\)</span>。假设存在一组整数 <spanclass="math inline">\(x,y\)</span>，满足 <spanclass="math inline">\(bx+(a\bmod b)y=\gcd(b,a\bmod b)\)</span>。</p><p>因为 <span class="math inline">\(bx+(a\bmod b)y\)</span></p><p><span class="math inline">\(\begin{aligned}\;\;&amp;=bx+(a-b\left\lfloor\dfrac{a}{b}\right\rfloor)y \\&amp;=bx+ay-b\left\lfloor\dfrac{a}{b}\right\rfloor y \\&amp;=ay+b(x-b\left\lfloor\dfrac{a}{b}\right\rfloor)\end{aligned}\)</span></p><p>所以，令 <span class="math inline">\(x&#39;=y\)</span>，<spanclass="math inline">\(y&#39;=x-\left\lfloor\dfrac{a}{b}\right\rfloory\)</span>，就得到了 <spanclass="math inline">\(ax&#39;+by&#39;=\gcd(a,b)\)</span>。</p><p>对以上过程应用数学归纳法，可知裴蜀定理一定成立。</p><p><strong>证毕。</strong></p><h2 id="quad扩展欧几里得算法">3.2<spanclass="math inline">\(\quad\)</span>扩展欧几里得算法</h2><p>上面证明的过程中，我们通过 <span class="math inline">\(ax+(a\bmodb)y=\gcd(a,b)\)</span> 推出了 <spanclass="math inline">\(ax&#39;+by&#39;=\gcd(a,b)\)</span>。按照欧几里得算法的思路，并给出整数<span class="math inline">\(x\)</span> 和整数 <spanclass="math inline">\(y\)</span>的计算方法成为<strong>扩展欧几里得算法</strong>。</p><p>下面给出扩展欧几里得算法过程：</p><ol type="1"><li><p>给定 <span class="math inline">\(a\)</span> 和 <spanclass="math inline">\(b\)</span>，递归 <spanclass="math inline">\(\operatorname{exgcd}(a,b)\)</span>；</p></li><li><p>是否 <span class="math inline">\(b=0\)</span>。如果是，返回 <spanclass="math inline">\(\begin{cases}x=1\\y=0\end{cases}\)</span>；如果不是，递归<span class="math inline">\(\operatorname{exgcd}(b,a\bmodb)\)</span>，并重复进行1和2操作，直至条件成立；</p></li><li><p>每次递归结束后，计算 <spanclass="math inline">\(\begin{cases}x&#39;=y\\y&#39;=x-\left\lfloor\dfrac{a}{b}\right\rfloory\end{cases}\)</span>。</p></li></ol><p>也可以在算法过程中顺便记录 <spanclass="math inline">\(\gcd(a,b)\)</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll&amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    ll d=<span class="built_in">exgcd</span>(b,a%b,x,y);</span><br><span class="line">    ll temp=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=temp-a/b*y;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll a,b,x,y;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">ll d=<span class="built_in">exgcd</span>(a,b,x,y);</span><br></pre></td></tr></table></figure><p>上述程序求出方程 <span class="math inline">\(ax+by=\gcd(a,b)\)</span>的一组特解 <span class="math inline">\(x_0,y_0\)</span>，并返回 <spanclass="math inline">\(\gcd(a,b)\)</span>，即 <spanclass="math inline">\(d\)</span>。</p><p>对于方程 <span class="math inline">\(ax+by=c\)</span>，当且仅当 <spanclass="math inline">\(d\mid c\)</span> 时有解。我们可以求出 <spanclass="math inline">\(ax+by=d\)</span> 的一组特解 <spanclass="math inline">\(x_0,y_0\)</span>，然后令 <spanclass="math inline">\(x_0,y_0\)</span> 同时乘上 <spanclass="math inline">\(\dfrac{c}{d}\)</span>，就得到了<strong>方程</strong><span class="math inline">\(ax+b=c\)</span> <strong>的特解</strong></p><p><span class="math display">\[\dfrac{c}{d}x_0\;,\;\dfrac{c}{d}y_0\]</span></p><p>对于方程 <spanclass="math inline">\(ax+by=d\)</span>，我们将其特解表示为 <spanclass="math inline">\(x_0,y_0\)</span>，有 <spanclass="math inline">\(a(x+m)+b(y-n)=ax+by+am-bn=d\)</span>。因为 <spanclass="math inline">\(ax+by=d\)</span>，可以推出 <spanclass="math inline">\(am-bn=0\Rightarrow am=bn\Rightarrow\dfrac{a}{b}=\dfrac{n}{m}\)</span>。由于 <spanclass="math inline">\(\gcd(a,b)=d\)</span>，故 <spanclass="math inline">\(m\)</span> 和 <spanclass="math inline">\(n\)</span> 最小只能取 <spanclass="math inline">\(\dfrac{b}{d}\)</span> 和 <spanclass="math inline">\(\dfrac{a}{d}\)</span>，能保证 <spanclass="math inline">\(m\)</span> 和 <spanclass="math inline">\(n\)</span> 为整数。所以，<strong>方程</strong><span class="math inline">\(ax+by=d\)</span><strong>的通解</strong>为</p><p><span class="math display">\[\begin{cases}x_1=x_0+\dfrac{b}{d}k\\\\y_1=y_0-\dfrac{a}{d}k\end{cases}(k\in\mathbb{Z})\]</span></p><h2 id="quad线性同余方程">3.3<spanclass="math inline">\(\quad\)</span>线性同余方程</h2><p>给定整数 <span class="math inline">\(a,b,m\)</span>，求一个整数 <spanclass="math inline">\(x\)</span> 满足 <spanclass="math inline">\(ax\equiv b\pmod m\)</span>，或者给出无解。</p><p><strong>定义5（线性同余方程）</strong><spanclass="math inline">\(\qquad\)</span> 在整数域内，关于 <spanclass="math inline">\(x\)</span> 的同余方程 <spanclass="math inline">\(ax\equiv b\pmod m\)</span>称为<strong>一次同余方程</strong>，也称<strong>线性同余方程</strong>。</p><p><span class="math inline">\(ax\equiv b\pmod m\)</span> 等价于 <spanclass="math inline">\(m\mid (ax-b)\)</span>，一定存在一个整数 <spanclass="math inline">\(k\)</span>，有 <spanclass="math inline">\(ax+mk=b\)</span>。我们可以利用扩展欧几里得算法对其进行计算。</p><h2 id="quad乘法逆元">3.4<spanclass="math inline">\(\quad\)</span>乘法逆元</h2><p><strong>定义6（乘法逆元）</strong><spanclass="math inline">\(\qquad\)</span> 若整数 <spanclass="math inline">\(b,m\)</span> 互质，并且 <spanclass="math inline">\(b\mid a\)</span>，则存在一个整数 <spanclass="math inline">\(x\)</span>，使得 <spanclass="math inline">\(\dfrac{a}{b}\equiv ax\pmod m\)</span>。称 <spanclass="math inline">\(x\)</span> 为 <spanclass="math inline">\(b\)</span> <strong>的模</strong> <spanclass="math inline">\(m\)</span> <strong>乘法逆元</strong>，记为 <spanclass="math inline">\(b^{-1}\pmod m\)</span>。</p><p>因为 <span class="math inline">\(\dfrac{a}{b}\equiv a\timesb^{-1}\equiv\dfrac{a}{b}\times b\times b^{-1}\pmod m\)</span>，所以<span class="math inline">\(b\times b^{-1}\equiv1\pmod m\)</span>。</p><p>下面是一些求解乘法逆元的方法。</p><p><strong>方法一：解线性同余方程求解乘法逆元</strong></p><p>如果只保证 <span class="math inline">\(b,m\)</span>互质，那么乘法逆元可以通过求解同余方程 <spanclass="math inline">\(bx\equiv1\pmod m\)</span>得到。算法过程已在上文中提及，不再赘述。</p><p><strong>方法二：快速幂求解乘法逆元</strong></p><p>本方法使用有前提条件。</p><p>如果 <span class="math inline">\(m\)</span> 是质数，并用 <spanclass="math inline">\(p\)</span> 表示 <spanclass="math inline">\(m\)</span>，并且 <spanclass="math inline">\(b&lt;p\)</span>，根据费马小定理， <spanclass="math inline">\(b^{p-1}\equiv1\pmod p\)</span>，即</p><p><span class="math display">\[b\times b^{p-2}\equiv1\pmod p\]</span></p><p>因此，<strong>当模数</strong> <span class="math inline">\(p\)</span><strong>为质数时，</strong><span class="math inline">\(b^{p-2}\)</span><strong>即为</strong> <span class="math inline">\(b\)</span><strong>的乘法逆元</strong>。</p><p>我们直接对 <span class="math inline">\(b^{p-2}\)</span>进行快速幂计算即可得到答案。</p><p><strong>方法三：线性求解乘法逆元</strong></p><p>给定 <span class="math inline">\(n,p\)</span>，求出 <spanclass="math inline">\(1,2,\cdots,n\)</span> 在模 <spanclass="math inline">\(p\)</span> 意义下的乘法逆元。</p><p>显而易见，<span class="math inline">\(1^{-1}\equiv1\pmodp\)</span>。</p><p>假设当我们递归到 <span class="math inline">\(i(i&gt;1)\)</span>时已经把前 <span class="math inline">\(i-1\)</span>个的乘法逆元算出来了，我们设 <span class="math inline">\(j=p\bmodi\)</span>，<spanclass="math inline">\(k=\left\lfloor\dfrac{p}{i}\right\rfloor\)</span>，有<span class="math inline">\(p=ki+j\)</span>，即</p><p><span class="math display">\[ki+j\equiv 0\pmod p\]</span></p><p>两边同乘 <span class="math inline">\(i^{-1}j^{-1}\)</span> 得</p><p><span class="math display">\[\begin{aligned}kj^{-1}+i^{-1}&amp;\equiv0\pmod p\\i^{-1}&amp;\equiv kj^{-1}\pmod p\\i^{-1}&amp;\equiv \left\lfloor\dfrac{p}{i}\right\rfloor(p\bmodi)^{-1}\pmod p\end{aligned}\]</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;p);</span><br><span class="line">    inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        inv[i]=(<span class="type">long</span> <span class="type">long</span>)(p - p / i) * inv[p % i] % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,inv[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法四：线性求解任意 <span class="math inline">\(n\)</span>个数的逆元</strong></p><p>任意给定 <span class="math inline">\(n\)</span> 个数 <spanclass="math inline">\(a_1,a_2,\cdots,a_n\)</span>，求它们在模 <spanclass="math inline">\(p\)</span> 意义下的乘法逆元，其中，<spanclass="math inline">\(p\)</span> 为质数。</p><p>我们设</p><p><span class="math display">\[s_i=\prod_{i=1}^ia_i\]</span></p><p>通过快速幂或者扩展欧几里得算法求得 <spanclass="math inline">\(s_i\)</span> 的乘法逆元记为 <spanclass="math inline">\(sv_i\)</span>，即</p><p><span class="math display">\[sv_i=s_i^{-1}\pmod p\]</span></p><p>我们将 <span class="math inline">\(sv_1\)</span> 乘上 <spanclass="math inline">\(a_i\)</span>，会与 <spanclass="math inline">\(a_i^{-1}\pmod p\)</span> 相消，得</p><p><span class="math display">\[a_i\times sv_1=sv_{i-1}\]</span></p><p>我们就能递推线性求解乘法逆元。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">ll n,p,k,a[MAXN],s[MAXN],t[MAXN];</span><br><span class="line">ll ans=<span class="number">0</span>,temp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans=(<span class="type">long</span> <span class="type">long</span>)ans*a%mod;</span><br><span class="line">        a=(<span class="type">long</span> <span class="type">long</span>)a*a%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">    s[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    t[n+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        s[i]=s[i<span class="number">-1</span>]*a[i]%p;</span><br><span class="line">    &#125;</span><br><span class="line">    t[n+<span class="number">1</span>]=<span class="built_in">qpow</span>(s[n],p<span class="number">-2</span>,p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i;i--)&#123;</span><br><span class="line">        t[i]=t[i+<span class="number">1</span>]*a[i]%p;</span><br><span class="line">    &#125;</span><br><span class="line">    temp=k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ans=(ans+(t[i+<span class="number">1</span>]*s[i<span class="number">-1</span>]%p)*temp)%p;</span><br><span class="line">        temp=temp*k%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="quad威尔逊定理">3.5<spanclass="math inline">\(\quad\)</span>威尔逊定理</h2><p><strong>定理5（威尔逊定理）</strong><spanclass="math inline">\(\quad\)</span> 对于任意素数 <spanclass="math inline">\(p\)</span>，有 <spanclass="math inline">\((p-1)!\equiv-1\pmod p\)</span>。</p><p><strong>证</strong><span class="math inline">\(\quad\)</span>我们知道，<span class="math inline">\(x^2\equiv1\pmod p\)</span>的解只有 <span class="math inline">\(x\equiv\pm1\pmod p\)</span>，所以<span class="math inline">\(2\sim p-2\)</span> 和逆元两两对应。剩下<span class="math inline">\(1\times (p-1)\equiv -1\pmod p\)</span>。</p><p><strong>证毕。</strong></p><h1 id="四中国剩余定理">四、中国剩余定理</h1><p>前置芝士：乘法逆元。</p><p>本节主要介绍有关中国剩余定理和扩展中国剩余定理，是解决线性同余方程组问题的重要方法。</p><h2 id="quad中国剩余定理">4.1<spanclass="math inline">\(\quad\)</span>中国剩余定理</h2><p><strong>定理6（中国剩余定理，孙子定理）</strong><spanclass="math inline">\(\quad\)</span> 设 <spanclass="math inline">\(m_1,m_2,\cdots,m_n\)</span>是两两互质的整数，<spanclass="math inline">\(m=\prod_{i=1}^n{m_i}\)</span>，<spanclass="math inline">\(M_i=m/m_i\)</span>，<spanclass="math inline">\(t_i\)</span> 是线性同余方程 <spanclass="math inline">\(M_it_i\equiv1\pmod{m_i}\)</span>的一个解。对于任意的 <span class="math inline">\(n\)</span>个整数 <spanclass="math inline">\(a_1,a_2,\cdots,a_n\)</span>，方程组</p><p><span class="math display">\[\begin{cases}x\equiv a_1\pmod{m_1}\\x\equiv a_2\pmod{m_2}\\\cdots\\x\equiv a_n\pmod{m_n}\end{cases}\]</span></p><p>有整数解，解为 <spanclass="math inline">\(x=\sum_{i=1}^na_iM_it_i\)</span>。</p><p><strong>证</strong><span class="math inline">\(\quad\)</span> 因为<span class="math inline">\(M_i=m/m_i\)</span> 是除 <spanclass="math inline">\(m_i\)</span> 之外所有模数的倍数，所以 <spanclass="math inline">\(\forallk\not=i\;,\;a_iM_it_i\equiv0\pmod{m_k}\)</span>。又因为 <spanclass="math inline">\(a_iM_it_i\equiv a_i\pmod{m_i}\)</span>，所以代入<spanclass="math inline">\(x=\sum_{i=1}^na_iM_it_i\)</span>，原方程组成立。</p><p><strong>证毕。</strong></p><p>按照中国剩余定理，我们可以计算线性同余方程组的一个通解（最小解）。另外，我们可以用扩展欧几里得算法求解逆元。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,a[MAXN],m[MAXN];</span><br><span class="line">ll M,ans,summ[MAXN];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line">    ll w=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) w=w*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exgcd</span>(b,a%b,y,x);</span><br><span class="line">    y-=a/b*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">    M=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;m[i]&gt;&gt;a[i];</span><br><span class="line">        M*=m[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) summ[i]=M/m[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ll x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">exgcd</span>(summ[i],m[i],x,y);</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>) x+=m[i];</span><br><span class="line">        ans+=a[i]*summ[i]*x;</span><br><span class="line">        ans%=M;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="quad扩展中国剩余定理">4.2<spanclass="math inline">\(\quad\)</span>扩展中国剩余定理</h2><p>中国剩余定理只能处理模数两两互质的情况，无法处理普遍情况。我们可以使用扩展中国剩余定理进行推算。</p><p>对于每两个线性同余方程组 <span class="math inline">\(x\equiv a_1\pmod{m_1}\;,\;x\equiv a_2\pmod{m_2}\)</span>，将其转化为不定方程 <spanclass="math inline">\(x=pm_1+a_1=qm_2+a_2\)</span>，移项有</p><p><span class="math display">\[pm_1-qm_2=a_2-a_1\]</span></p><p>有裴蜀定理得，方程组有整数解当且仅当 <spanclass="math inline">\(\gcd(m_1,m_2)|(a_2-a_1)\)</span>。这时我们就可以用扩展欧几里得算法得到一组可行解<spanclass="math inline">\((p,q)\)</span>，则原来的两个方程可以合并为</p><p><span class="math display">\[x\equiv m_1p+a_1\pmod{\text{lcm}(m_1,m_2)}\]</span></p><p>我们逐一进行合并即可求解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> __int128 ll;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    ll a,m;</span><br><span class="line">&#125;;</span><br><span class="line">queue&lt;node&gt; qu;</span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll&amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    ll d=<span class="built_in">exgcd</span>(b,a%b,x,y);</span><br><span class="line">    ll temp=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=temp-a/b*y;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">lcm</span><span class="params">(ll x,ll y,ll d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x/d*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        qu.<span class="built_in">push</span>(node&#123;b,a&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        node a,b;</span><br><span class="line">        a=qu.<span class="built_in">front</span>();qu.<span class="built_in">pop</span>();</span><br><span class="line">        b=qu.<span class="built_in">front</span>();qu.<span class="built_in">pop</span>();</span><br><span class="line">        ll k1,k2;</span><br><span class="line">        <span class="keyword">if</span>(a.a&gt;b.a) <span class="built_in">swap</span>(a,b);</span><br><span class="line">        ll c=b.a-a.a;</span><br><span class="line">        ll d=<span class="built_in">exgcd</span>(a.m,b.m,k1,k2);</span><br><span class="line">        k1*=c/d;</span><br><span class="line">        k2*=c/d;</span><br><span class="line">        ll q=b.m/d,p=a.m/d;</span><br><span class="line">        <span class="keyword">if</span>(k1&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            ll k=<span class="built_in">ceil</span>((<span class="number">1.0</span>-k1)/q);</span><br><span class="line">            k1+=k*q;</span><br><span class="line">            k2-=k*p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ll k=(k1<span class="number">-1</span>)/q;</span><br><span class="line">            k1-=k*q;</span><br><span class="line">            k2+=k*p;</span><br><span class="line">        &#125;</span><br><span class="line">        node now;</span><br><span class="line">        now.a=k1*a.m+a.a;</span><br><span class="line">        now.m=q*a.m;</span><br><span class="line">        now.a%=now.m;</span><br><span class="line">        qu.<span class="built_in">push</span>(now);</span><br><span class="line">    &#125;</span><br><span class="line">    node ans=qu.<span class="built_in">front</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,(<span class="type">long</span> <span class="type">long</span>)(ans.a%ans.m));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五高次同余方程与bsgs算法">五、高次同余方程与BSGS算法</h1><h2 id="quadbsgs算法">5.1<spanclass="math inline">\(\quad\)</span>BSGS算法</h2><p>给定 <span class="math inline">\(a,b,p\)</span>，已知 <spanclass="math inline">\(a\perp p\)</span>，求解 <spanclass="math inline">\(x\)</span> 满足</p><p><span class="math display">\[a^x\equiv b\pmod p\]</span></p><p>令 <span class="math inline">\(x=A\left\lceil\sqrtp\right\rceil-B\)</span>，其中， <span class="math inline">\(0\leqA,B\leq \left\lceil\sqrt p\right\rceil\)</span>，有 <spanclass="math inline">\(a^{A\left\lceil\sqrt p\right\rceil-B}\equiv b\pmodp\)</span>，整理得</p><p><span class="math display">\[a^{A\left\lceil\sqrt p\right\rceil}\equiv ba^B\pmod p\]</span></p><p>我们逐一枚举 <span class="math inline">\(B\)</span> 即可知道所有<span class="math inline">\(ba^B\)</span>。然后建立 <code>hash</code>表，逐一计算 <span class="math inline">\(a^{A\left\lceil\sqrtp\right\rceil}\)</span>，找到与之相等的 <spanclass="math inline">\(ba^B\)</span> 即可求出 <spanclass="math inline">\(x=A\left\lceil\sqrt p\right\rceil-B\)</span>。</p><p>时间复杂度 <span class="math inline">\(O(\sqrt p)\)</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">BSGS</span><span class="params">()</span></span>&#123;</span><br><span class="line">    map&lt;ll,ll&gt; hash;</span><br><span class="line">    hash.<span class="built_in">clear</span>();</span><br><span class="line">    b%=p;</span><br><span class="line">    ll t=<span class="built_in">sqrt</span>(p)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">        ll val=b*<span class="built_in">qpow</span>(a,i,p)%p;</span><br><span class="line">        hash[val]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    a=<span class="built_in">qpow</span>(a,t,p);</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>) <span class="keyword">return</span> (b==<span class="number">0</span>?<span class="number">1</span>:<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=t;i++)&#123;</span><br><span class="line">        ll val=<span class="built_in">qpow</span>(a,i,p);</span><br><span class="line">        ll j=hash.<span class="built_in">find</span>(val)==hash.<span class="built_in">end</span>()?<span class="number">-1</span>:hash[val];</span><br><span class="line">        <span class="keyword">if</span>(j&gt;=<span class="number">0</span>&amp;&amp;i*t-j&gt;=<span class="number">0</span>) <span class="keyword">return</span> i*t-j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基环树</title>
      <link href="/post/e57ca2fa6cfe.html"/>
      <url>/post/e57ca2fa6cfe.html</url>
      
        <content type="html"><![CDATA[<p>基环树</p><h1 id="一基本概念">一、基本概念</h1><p>如果一张无向连通图包含恰好一个环，则称它是一棵<strong>基环树(Pseudotree)</strong>。</p><p>如果一张有向弱连通图每个点的入度都为 ，则称它是一棵<strong>基环外向树</strong>。</p><p>如果一张有向弱连通图每个点的出度都为 ，则称它是一棵<strong>基环内向树</strong>。</p><p>多棵树可以组成一个<strong>森林(Forest)</strong>，多棵基环树可以组成<strong>基环森林(Pseudoforest)</strong>，多棵基环外向树可以组成<strong>基环外向树森林</strong>，多棵基环内向树可以组成<strong>基环内向森林(Functionalgraph)</strong> 。</p><h1 id="二算法实现">二、算法实现</h1><p>在基环树中，有许多独一无二的性质，这也就成为<del>良心</del>出题人增加题目难度的一种措施。通常会结合<strong>树的直径</strong>进行考察。</p><p>下面就一些例题进行分析</p><p>下面以 <a href="https://www.luogu.com.cn/problem/P4381">[IOI2008]Island</a> 举例。</p><pre><code>题目大意：现有一个基环森林，求出森林中每颗基环树的直径的和。</code></pre><p>基环树直径，就是图中最长链的长度。因为基环树的一些特性，这也成为常考点。显然，基环树的最长链可能有两种情况：</p><ul><li><p>在去掉“环”的某棵子树中。</p></li><li><p>经过“环”，其两端分别在去掉“环”上所有边之后的两颗不同子树中。</p></li></ul><p>我们可以先用一次dfs找出基环树中的“环”，把“环”上的节点做标记，并用数组<code>ring[]</code> 记录。设环上的节点为 <spanclass="math inline">\(s_1,s_2,\cdots,s_t\)</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> last)</span></span>&#123;<span class="comment">//用bool数组进行记录：true表示在环上；false表示不在环上</span></span><br><span class="line">    <span class="keyword">if</span>(temp[x]==<span class="number">1</span>)&#123;<span class="comment">//如果这个点被访问过，说明是环的衔接点，记录，停止深入搜索</span></span><br><span class="line">        temp[x]=<span class="number">2</span>;</span><br><span class="line">        ring[++cnt]=x;</span><br><span class="line">        c[x]=<span class="number">1</span>;<span class="comment">//标记这个点已访问</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp[x]=<span class="number">1</span>;<span class="comment">//标记这个点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=nxt[i])&#123;</span><br><span class="line">        <span class="type">int</span> y=to[i];</span><br><span class="line">        <span class="keyword">if</span>(i!=(last^<span class="number">1</span>)&amp;&amp;<span class="built_in">dfs</span>(y,i))&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp[x]!=<span class="number">2</span>)&#123;<span class="comment">//如果这个点不是环的衔接点</span></span><br><span class="line">                c[x]=<span class="number">1</span>;</span><br><span class="line">                ring[++cnt]=x;</span><br><span class="line">                s[cnt]=s[cnt<span class="number">-1</span>]+edge[i];<span class="comment">//前缀和记录（后面会提到）</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;<span class="comment">//如果这个点是环的衔接点</span></span><br><span class="line">                s[start<span class="number">-1</span>]=s[start]-edge[i];</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从每个 <span class="math inline">\(s_i\)</span>出发，在不经过环上其他节点的前提下，再次执行dfs，即可访问去掉“环”之后以<span class="math inline">\(s_i\)</span>为根的子树。在这样的每棵子树中，按照求树的直径的方法进行树形DP并更新答案，即可处理第一种情况。同时，还可以计算出<span class="math inline">\(d[s_i]\)</span>，表示从节点 <spanclass="math inline">\(s_i\)</span> 出发走向以 <spanclass="math inline">\(s_i\)</span>为根的子树，能够到达的最远节点距离。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tree_dp</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="comment">//树形DP</span></span><br><span class="line">    c[x]=<span class="number">1</span>;<span class="comment">//标记这个点已访问</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];i;i=nxt[i])&#123;</span><br><span class="line">        <span class="type">int</span> y=to[i];</span><br><span class="line">        <span class="keyword">if</span>(c[y]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">tree_dp</span>(y);</span><br><span class="line">        treeans=<span class="built_in">max</span>(treeans,d[x]+d[y]+edge[i]);</span><br><span class="line">        d[x]=<span class="built_in">max</span>(d[x],d[y]+edge[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，考虑第二种情况。这相当于找到环上两个不同的节点 <spanclass="math inline">\(s_i,s_j\)</span>，使得 <spanclass="math inline">\(d[s_i]+d[s_j]+dist(s_i,s_j)\)</span>最大。其中，<span class="math inline">\(dist(s_i,s_j)\)</span> 表示<span class="math inline">\(s_i,s_j\)</span>在环上的距离，有顺时针、逆时针两种走法，取较长的一种。可以将环断开成链再复制一倍，再用单调队列解决。（还可以用前缀和的方法快速求出，下面会提及）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">slove</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    start=cnt+<span class="number">1</span>;<span class="comment">//因为这是一张基环森林，所以要记录入点下标</span></span><br><span class="line">    ll ans_1=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(x,<span class="number">0</span>);<span class="comment">//找环上的点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;=cnt;i++)&#123;</span><br><span class="line">        treeans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">tree_dp</span>(ring[i]);<span class="comment">//对每一个树进行树形DP，找到树上直径</span></span><br><span class="line">        ans_1=<span class="built_in">max</span>(ans_1,treeans);<span class="comment">//记录最大直径</span></span><br><span class="line">    &#125;</span><br><span class="line">    ll ans_2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;=cnt;i++)&#123;<span class="comment">//复制环</span></span><br><span class="line">        dp[i+cnt-start+<span class="number">1</span>]=dp[i]=d[ring[i]];</span><br><span class="line">        s[i+cnt-start+<span class="number">1</span>]=s[i+cnt-start]+s[i]-s[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;=<span class="number">2</span>*cnt-start+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>()&amp;&amp;q.<span class="built_in">front</span>()&lt;=i-cnt+start<span class="number">-1</span>)&#123;<span class="comment">//优先队列，先清除不在区域范围内的点</span></span><br><span class="line">            q.<span class="built_in">pop_front</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q.<span class="built_in">size</span>())&#123;<span class="comment">//如果队列里还有点，进行记录</span></span><br><span class="line">            ans_2=<span class="built_in">max</span>(ans_2,dp[i]+dp[q.<span class="built_in">front</span>()]+s[i]-s[q.<span class="built_in">front</span>()]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>()&amp;&amp;dp[q.<span class="built_in">back</span>()]-s[q.<span class="built_in">back</span>()]&lt;=dp[i]-s[i])&#123;<span class="comment">//清除比这个点小的点</span></span><br><span class="line">            q.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        q.<span class="built_in">push_back</span>(i);<span class="comment">//插入</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(ans_1,ans_2);<span class="comment">//取最大值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要，可以打开<ahref="https://www.luogu.com.cn/paste/867bnw9o">完整的代码</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧拉回路</title>
      <link href="/post/9b4a4404d6ab.html"/>
      <url>/post/9b4a4404d6ab.html</url>
      
        <content type="html"><![CDATA[<p>欧拉回路</p><blockquote><p>2023.09 updated</p></blockquote><h1 id="一基本概念">一、基本概念</h1><p><strong>欧拉路径</strong>：从图中一个结点出发走出一条道路，每条边恰好经过一次的路径。</p><p><strong>欧拉回路</strong>：从图中任意一个顶点出发走出一条道路，每条边恰好经过一次，并最终回到起点。这样的路径称为“欧拉回路”。（类似于一笔画问题）</p><p><strong>欧拉图</strong>：具有欧拉回路的图。</p><p><strong>半欧拉图</strong>：具有欧拉路径但不具有欧拉回路的图</p><h1 id="二算法实现">二、算法实现</h1><p>对于求欧拉回路，我们可以分为两种情况解决：</p><p><imgsrc="https://cdn.luogu.com.cn/upload/image_hosting/bv9xrrv9.png" /></p><ul><li><p><strong>无向图</strong>的欧拉回路(图a、b)：对于无向图，只要是一个<strong>连通图</strong>并且每个点的度是<strong>偶数</strong>，那么这个图就能构成欧拉回路。</p></li><li><p><strong>有向图</strong>的欧拉回路(图c、d)：对于有向图，只要是一个<strong>连通图</strong>并且每个点的<strong>入度等于出度</strong>，那么这个图就能构成欧拉回路。</p></li></ul><p>对于求欧拉路径，我们也可以分为两种情况解决：</p><ul><li><p><strong>无向图</strong>的欧拉路径：对于无向图，只有是一个<strong>连通图</strong>，并且<strong>两个点的度为奇数</strong>，剩余为偶数是，那么这个图就能有欧拉路径。</p></li><li><p><strong>有向图</strong>的欧拉路径：对于有向图，只要是一个<strong>连通图</strong>，并且一<strong>个点的入度等于出度加一，一个点的入度等于出度减一</strong>，其余点入度等于出度时，这个图就有欧拉路径。</p></li></ul><p><strong>一个欧拉图一定有欧拉路径。</strong></p><h2 id="quad-无向图的欧拉路径">2.1 <spanclass="math inline">\(\quad\)</span> 无向图的欧拉路径</h2><p>我们首先判断存在性：</p><ul><li>连通；</li><li>奇点个数为 <span class="math inline">\(0\)</span> 或 <spanclass="math inline">\(2\)</span>。</li></ul><p>通常使用<strong>并查集</strong>判断连通性，或者走完所有边，判断是否走到了所有的边（这一步在算法流程中进行，否则会破坏时间复杂度）。</p><p>考虑如果存在奇点，则路径只能从奇点走若干边（顺序是随意的，不妨自己证明一下）再次到达另一个奇点。</p><p>我们找到奇点（或者不存在），然后按边进行dfs，注意，每条边在欧拉路径中存在且仅存在一次，且顺序随意，所以我们必须标记使用过的边，以避免反复遍历所造成的时间复杂度破坏。我们使用栈记录走过的点，输出时从栈顶以此弹出。</p><p>时间复杂度 <span class="math inline">\(O(m)\)</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> &amp;i=head[u];i;i=nxt[i])&#123;<span class="comment">//使用链式前向星存图，注意i变量要取地址，以标记使用过的边，不会再次遍历。</span></span><br><span class="line"><span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> v=to[i];</span><br><span class="line">vis[i]=vis[i^<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">s[++top]=u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="quad-无向图的欧拉回路">2.2 <spanclass="math inline">\(\quad\)</span> 无向图的欧拉回路</h2><p>和上面类似地，判断存在性：</p><ul><li>连通图；</li><li>均为偶点。</li></ul><p>随意找一个点开始遍历。注意：因为找的是欧拉回路，<strong>不必要访问或判断没有边相连的点的连通性</strong>。所以，严格地说，找一个有边相连的点开始遍历。</p><p>遍历的注意事项和 2.1大致相同，注意避免重复遍历。唯一不同的是，因为是欧拉回路，会构成一个环，所以，不必要使用栈记录走过的点。当然，这样记录也没有问题。</p><p>时间复杂度 <span class="math inline">\(O(m)\)</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 1000005</span></span><br><span class="line"><span class="type">int</span> n,m,tot=<span class="number">1</span>,s[MAXN],top,du[MAXN];</span><br><span class="line"><span class="type">int</span> head[MAXN],nxt[MAXN&lt;&lt;<span class="number">1</span>],to[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">bool</span> vis[MAXN&lt;&lt;<span class="number">1</span>],viss[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> &amp;i=head[u];i;i=nxt[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> v=to[i];</span><br><span class="line">vis[i]=vis[i^<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">s[++top]=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">to[++tot]=y,nxt[tot]=head[x],head[x]=tot;</span><br><span class="line">to[++tot]=x,nxt[tot]=head[y],head[y]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="built_in">add</span>(x,y);</span><br><span class="line">du[x]++,du[y]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(du[i])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(top&lt;=m)&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(top) cout&lt;&lt;s[top--]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="quad-有向图的欧拉路径">2.3 <spanclass="math inline">\(\quad\)</span> 有向图的欧拉路径</h2><p>我们首先判断存在性：</p><ul><li>连通；</li><li>如下两个条件满足其一：<ul><li>所有点入度等于出度；</li><li>“有且仅有一个点出度比入度大一”、“与有且仅有一个点出度比入度小一”两个条件同时成立。</li></ul></li></ul><p>如果满足条件1，随意找点开始遍历（同样抛弃孤立点）；如果满足条件2，找到“出度比入度大一”的点开始遍历，最后一定会回到“出度比入度小一”的点。</p><p>按边进行 dfs，详细内容与 2.1类似，可以用邻接表存图。</p><p>时间复杂度 <span class="math inline">\(O(m)\)</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=now[u];i&lt;g[u].<span class="built_in">size</span>();i=now[u])&#123;</span><br><span class="line"><span class="type">int</span> v=g[u][i];</span><br><span class="line">now[u]++;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">s[++top]=u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="quad-有向图的欧拉回路">2.4 <spanclass="math inline">\(\quad\)</span> 有向图的欧拉回路</h2><p>首先判断存在性：</p><ul><li>连通；</li><li>每个点的入度等于出度。</li></ul><p>随便找一个非孤立点开始遍历，内容同上。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 1000005</span></span><br><span class="line"><span class="type">int</span> n,m,in[MAXN],out[MAXN],now[MAXN];</span><br><span class="line"><span class="type">int</span> s[MAXN],top;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=now[u];i&lt;g[u].<span class="built_in">size</span>();i=now[u])&#123;</span><br><span class="line"><span class="type">int</span> v=g[u][i];</span><br><span class="line">now[u]++;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">s[++top]=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">g[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">in[y]++;</span><br><span class="line">out[x]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> st=<span class="number">0</span>,numin=<span class="number">0</span>,numout=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(in[i]!=out[i])&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(numin&gt;<span class="number">1</span>||numout&gt;<span class="number">1</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(out[i])&#123;</span><br><span class="line">st=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(st);</span><br><span class="line"><span class="keyword">if</span>(top!=m+<span class="number">1</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(top)&#123;</span><br><span class="line">cout&lt;&lt;s[top--]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三样例练习">三、样例练习</h1><ul><li><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1878">hdu 1878欧拉回路</a>：</li></ul><p>一道模板题。主要知识点是欧拉回路，只需要求出是否含有欧拉回路，不需要求路径。<ahref="https://www.luogu.com.cn/paste/pvhqvc2s">模板代码</a></p><ul><li><a href="https://www.luogu.com.cn/problem/UVA10054">UVA10054 TheNecklace</a>：</li></ul><p>题解见<ahref="https://www.luogu.com.cn/blog/liyunchen/solution-uva10054">我的博客</a></p><ul><li><a href="https://www.luogu.com.cn/problem/UVA10129">UVA10129 单词Play on Words</a>（<ahref="http://acm.hdu.edu.cn/showproblem.php?pid=1116">hdu 1116 Play onWords</a>）：</li></ul><p>题解见<ahref="https://www.luogu.com.cn/blog/liyunchen/solution-uva10129">我的博客</a></p><ul><li><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5883">hdu 5883The Best Path</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P1341">P1341无序字母对</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P3520">P3520[POI2011]SMI-Garbage</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P2731">P2731[USACO3.3]骑马修栅栏 Riding the Fences</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有向图的连通性</title>
      <link href="/post/f22be4884efb.html"/>
      <url>/post/f22be4884efb.html</url>
      
        <content type="html"><![CDATA[<p>有向图的连通性</p><h1 id="一基本概念">一、基本概念</h1><p><strong>强连通</strong>：在有向图 <spanclass="math inline">\(G\)</span> 中，如果两点 <spanclass="math inline">\(u\)</span> , <spanclass="math inline">\(v\)</span> 是互相可达的，则称 <spanclass="math inline">\(u\)</span> 和 <spanclass="math inline">\(v\)</span> 是<strong>强连通</strong>的。如果 <spanclass="math inline">\(G\)</span> 中的任意两个点都是互相可达的，那么<span class="math inline">\(G\)</span>就是<strong>强连通图</strong>。</p><p><strong>强连通分量</strong>：如果一个有向图 <spanclass="math inline">\(G\)</span>不是强连通图，那么可以把它分成多个子图，其中每个子图的内部是强连通的，而且这些子图已经扩展到最大，不能与子图外的任一点强连通，像这样的一个“极大强连通”子图是<spanclass="math inline">\(G\)</span>的一个<strong>强连通分量</strong>( <spanclass="math inline">\(\text{Strongly ConnectedComponent}\)</span>，<span class="math inline">\(\text{SCC}\)</span>).</p><p><spanclass="math inline">\(Tarjan\)</span>算法能在一次DFS中吧所有点都按 <spanclass="math inline">\(\text{SCC}\)</span>分开。这并不是不可思议的，它利用了 <spanclass="math inline">\(\text{SCC}\)</span> 的特点。</p><p><strong>定理：一个 <spanclass="math inline">\(\text{SCC}\)</span>，从其中任何一个点出发。都至少有一条路径能绕回到自己。</strong></p><h1 id="二算法实现">二、算法实现</h1><p>在讲解之前，先了解<span class="math inline">\(low\)</span>和<spanclass="math inline">\(num\)</span>操作。</p><p>下面是一个例子，下图有三个 <spanclass="math inline">\(\text{SCC}\)</span>，也就是<spanclass="math inline">\(\{a,b,d,c\}\)</span>、<spanclass="math inline">\(\{e\}\)</span>、<spanclass="math inline">\(\{f\}\)</span>.</p><p><imgsrc="https://cdn.luogu.com.cn/upload/image_hosting/9nl2pcnf.png" /></p><p>图1.a是原图。图1.b是对它做<spanclass="math inline">\(DFS\)</span>，每个点左边的数字标记了<spanclass="math inline">\(DFS\)</span>访问它的顺序，也就是<spanclass="math inline">\(num[]\)</span>值，右边的划线数字是<spanclass="math inline">\(low[]\)</span>值，即能返回到的最远的祖先。每个点的<spanclass="math inline">\(low[]\)</span>初始值等于<spanclass="math inline">\(num[]\)</span>，即连到自己。观察<spanclass="math inline">\(c\)</span>的<spanclass="math inline">\(low[]\)</span>值是如何更新的：它的初始值是<spanclass="math inline">\(6\)</span>，然后有一个回退到<spanclass="math inline">\(a\)</span>，所以更新为<spanclass="math inline">\(1\)</span>；它的递归祖先<spanclass="math inline">\(d\)</span>、<spanclass="math inline">\(b\)</span>的<spanclass="math inline">\(low[]\)</span>值也跟着更新为<spanclass="math inline">\(1\)</span>。<spanclass="math inline">\(e\)</span>和<spanclass="math inline">\(f\)</span>的<spanclass="math inline">\(low[]\)</span>值不能更新。</p><p>图1.b是从<span class="math inline">\(a\)</span>开始<spanclass="math inline">\(DFS\)</span>的，<spanclass="math inline">\(a\)</span>成为{<spanclass="math inline">\(a,b,d,c\)</span>}这个<spanclass="math inline">\(SCC\)</span>的祖先.其实，从{<spanclass="math inline">\(a,b,d,c\)</span>}中<strong>任意</strong>一个点开始<spanclass="math inline">\(DFS\)</span>，这个点都会成为这个<spanclass="math inline">\(SCC\)</span>的祖先。认识到这些，可以帮助我们理解后面的解释：可以用栈分离不同的<spanclass="math inline">\(SCC\)</span>。</p><p>图1.b中的<span class="math inline">\(low[]\)</span>值有<spanclass="math inline">\(3\)</span>部分，即等于<spanclass="math inline">\(1\)</span>的{<spanclass="math inline">\(a,b,d,c\)</span>}、等于<spanclass="math inline">\(4\)</span>的{<spanclass="math inline">\(f\)</span>}、等于<spanclass="math inline">\(5\)</span>的{<spanclass="math inline">\(e\)</span>}。这就是<spanclass="math inline">\(3\)</span>个<spanclass="math inline">\(SCC\)</span>。</p><p>完成以上步骤，似乎已经就解决了问题。每个点都有了自己的<spanclass="math inline">\(low[]\)</span>值，相同<spanclass="math inline">\(low[]\)</span>值的点属于一个<spanclass="math inline">\(SCC\)</span>。那么只要再对所有点做一个查询，按<spanclass="math inline">\(low[]\)</span>值分开就行了，其复杂度是<spanclass="math inline">\(O(V)\)</span>。</p><p>其实有更好的办法，即在<spanclass="math inline">\(DFS\)</span>的同时把点按<spanclass="math inline">\(SCC\)</span>（有相同的<spanclass="math inline">\(low[]\)</span>值）分开。</p><p>以图2为例，其中有3个<span class="math inline">\(SCC\)</span>，即<spanclass="math inline">\(A\)</span>、<spanclass="math inline">\(E\)</span>、<spanclass="math inline">\(F\)</span>。假设从F中的一个点开始<spanclass="math inline">\(DFS\)</span>，<spanclass="math inline">\(DFS\)</span>过程可能会中途跳出<spanclass="math inline">\(F\)</span>，转入<spanclass="math inline">\(A\)</span>或者<spanclass="math inline">\(E\)</span>，总之，最后会进入一个<spanclass="math inline">\(SCC\)</span>。</p><ol type="1"><li><p>假设DFS过程是<span class="math inline">\(F\)</span>-&gt;<spanclass="math inline">\(E\)</span>-&gt;<spanclass="math inline">\(A\)</span>，最后进入<spanclass="math inline">\(A\)</span>。</p></li><li><p>在<span class="math inline">\(A\)</span>这个<spanclass="math inline">\(SCC\)</span>中将完成<spanclass="math inline">\(A\)</span>内所有点的<spanclass="math inline">\(DFS\)</span>过程，也就是说，最后的几步<spanclass="math inline">\(DFS\)</span>会集中在A中的点<spanclass="math inline">\(a\)</span>、<spanclass="math inline">\(b\)</span>、<spanclass="math inline">\(c\)</span>、<spanclass="math inline">\(d\)</span>。这几个点会计算得到相同的<spanclass="math inline">\(low[]\)</span>值，标记为一个<spanclass="math inline">\(SCC\)</span>，这样就好了。</p></li><li><p><span class="math inline">\(DFS\)</span>递归从<spanclass="math inline">\(A\)</span>回到<spanclass="math inline">\(E\)</span>。并在E中完成<spanclass="math inline">\(E\)</span>内部的<spanclass="math inline">\(DFS\)</span>过程。</p></li><li><p>回到<span class="math inline">\(F\)</span>，在<spanclass="math inline">\(F\)</span>内完成递归过程。</p></li></ol><p>以上过程如何编程？那你可能想起来，<spanclass="math inline">\(DFS\)</span>搜索是用递归实现的，而递归和栈这种数据结构在本质上是一致的。<strong>所以，可以用栈来帮助处理。</strong></p><ol type="1"><li><p>从<spanclass="math inline">\(F\)</span>开始递归搜索，访问到的某些点进入栈；</p></li><li><p><span class="math inline">\(E\)</span>中的某些点进入栈；</p></li><li><p>在<spanclass="math inline">\(DFS\)</span>的最底层，A的所有点将被访问到并进入栈，当前栈顶的几个元素就是<spanclass="math inline">\(A\)</span>的点，标记为同一个<spanclass="math inline">\(SCC\)</span>，并弹出栈；</p></li><li><p><span class="math inline">\(DFS\)</span>回到<spanclass="math inline">\(E\)</span>，在<spanclass="math inline">\(E\)</span>中完成所有点的搜索并且入栈，当前栈顶的元素就是<spanclass="math inline">\(F\)</span>的点，标记为同一个<spanclass="math inline">\(SCC\)</span>，并弹出栈；</p></li><li><p>回到<span class="math inline">\(F\)</span>，完成<spanclass="math inline">\(F\)</span>的所有点的搜索并且入栈，当前栈顶的几个元素就是<spanclass="math inline">\(F\)</span>的点，标记为同一个<spanclass="math inline">\(SCC\)</span>，并弹出栈、结束。</p></li></ol><p>为加深对上述过程中栈的理解，我们可以思考最先进入栈的点。每进入一个新的<spanclass="math inline">\(SCC\)</span>，访问并进入栈的第一个点都是这个<spanclass="math inline">\(SCC\)</span>的祖先，它的<spanclass="math inline">\(num[]\)</span>值等于<spanclass="math inline">\(low[]\)</span>值，这个<spanclass="math inline">\(SCC\)</span>中所有点的<spanclass="math inline">\(low[]\)</span>值都等于它。</p><h1 id="三样例练习">三、样例练习</h1><ul><li><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1269">hdu 1269迷宫城堡</a>：</li></ul><p>一道模板题。<ahref="https://www.luogu.com.cn/paste/6u1aax1d">代码</a></p><ul><li><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1827">hdu 1827Summer Holiday</a>: Tarjan 缩点模板题。</p></li><li><p><a href="https://www.luogu.com.cn/problem/P3387">P3387【模板】缩点</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P2341">P2341[USACO03FALL][HAOI2006]受欢迎的牛 G</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P2863">P2863[USACO06JAN]The Cow Prom S</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P2746">P2746[USACO5.3]校园网Network of Schools</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P1407">P1407[国家集训队]稳定婚姻</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P2194">P2194HXY烧情侣</a></p></li><li><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3072">hdu 3072Intelligence System</a>: Tarjan+贪心。</p></li><li><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3836">hdu 3836Equivalent Sets</a></p></li><li><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3639">hdu 3639Hawk-and-Chicken</a>: 强连通分量+缩点。</p></li><li><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3861">hdu 3861The King’s Problem</a>： 最小路径覆盖。</p></li><li><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1530">hdu 1530Maximum Clique</a>: 最大团简单题目。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/post/e5fab92033d0.html"/>
      <url>/post/e5fab92033d0.html</url>
      
        <content type="html"><![CDATA[<p>线段树</p><p>线段树，OI中重要的数据结构，用于维护区间信息，也可以辅助维护。线段树的性能比树状数组强（但是码量大），普遍复杂度在<span class="math inline">\(O(\log n)\)</span> 左右。</p><h1 id="一基本概念">一、基本概念</h1><p>线段树是一种二叉树，也就是对于一个线段，我们会用一个二叉树来表示。比如说一个长度为4的线段，我们可以表示成这样：<imgsrc="https://cdn.luogu.com.cn/upload/image_hosting/dvvdl05x.png" /></p><p>这是什么意思呢？如果你要表示线段的和，那么最上面的根节点的权值表示的是这个线段 <spanclass="math inline">\(1\sim 4\)</span>的和。根的两个儿子分别表示这个线段中 <span class="math inline">\(1\sim2\)</span> 的和，与 <span class="math inline">\(3\sim 4\)</span>的和。以此类推。</p><p>然后我们还可以的到一个性质：节点i的权值=她的左儿子权值+她的右儿子权值。因为<span class="math inline">\(1\sim 4\)</span> 的和就是等于 <spanclass="math inline">\(1\sim 2\)</span> 的和加上 <spanclass="math inline">\(3\sim 4\)</span> 的和。</p><p>根据这个思路，我们就可以建树了，我们设一个结构体<code>tree</code>，<code>tree[i].l</code> 和 <code>tree[i].r</code>分别表示这个点代表的线段的左右下标， <code>tree[i].sum</code>表示这个节点表示的线段和。</p><p>我们知道，一颗二叉树，她的左儿子和右儿子编号分别是 <spanclass="math inline">\(p\times2\)</span> 和 <spanclass="math inline">\(p\times2+1\)</span>。</p><p>再根据刚才的性质，得到式子：<code>tree[i].sum=tree[i*2].sum+tree[i*2+1].sum</code>就可以建一颗线段树了！</p><p>代码如下： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="comment">//递归建树</span></span><br><span class="line">    tree[i].l=l;tree[i].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;<span class="comment">//如果这个节点是叶子节点</span></span><br><span class="line">        tree[i].sum=input[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(i*<span class="number">2</span>,l,mid);<span class="comment">//分别构造左子树和右子树</span></span><br><span class="line">    <span class="built_in">build</span>(i*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    tree[i].sum=tree[i*<span class="number">2</span>].sum+tree[i*<span class="number">2</span>+<span class="number">1</span>].sum;<span class="comment">//刚才我们发现的性质return ;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>嗯，这就是线段树的构建，你可能会问为什么要开好几倍的内存去储存一条线段。这是因为我们还没有让这个过大的数组干一些实事，那么什么是实事呢？让我们进入下一部（在你看懂这一部的情况下）</p><h1 id="二简单的线段树">二、简单的线段树</h1><h2 id="quad单点修改区间查询">2.1<spanclass="math inline">\(\quad\)</span>单点修改，区间查询</h2><p>其实这一章开始才是真正的线段树，我们要用线段树干什么？答案是维护一个线段（或者区间），比如你想求出一个<span class="math inline">\(1\sim 100\)</span> 区间中， <spanclass="math inline">\(4\sim 67\)</span>这些元素的和，你会怎么做？朴素的做法是<code>for(i=4;i&lt;=67;i++) sum+=a[i]</code>，这样固然好，但是算得太慢了。</p><p>我们想一种新的方法，先想一个比较好画图的数据，比如一个长度为4的区间，分别是1、2、3、4,我们想求出第<span class="math inline">\(1\sim 3\)</span>项的和。按照上一部说的，我们要建出一颗线段树，其中点权（也就是红色）表示和：<imgsrc="https://cdn.luogu.com.cn/upload/image_hosting/vf6zzggf.png" /></p><p>然后我们要求 <span class="math inline">\(1\sim 3\)</span>的和，我们先从根节点开始查询，发现她的左儿子 <spanclass="math inline">\(1\sim 2\)</span> 这个区间和答案区间 <spanclass="math inline">\(1\sim 3\)</span>有交集，那么我们跑到左儿子这个区间。</p><p>然后，我们发现这个区间 <span class="math inline">\(1\sim 2\)</span>被完全包括在答案区间 <span class="math inline">\(1\sim 3\)</span>这个区间里面，那就把她的值3返回。</p><p>我们回到了 <span class="math inline">\(1\sim 4\)</span>区间，发现她的右儿子 <span class="math inline">\(3\sim 4\)</span>区间和答案区间 <span class="math inline">\(1\sim 3\)</span>有交集，那么我们走到 <span class="math inline">\(3\sim 4\)</span>区间</p><p>到了 <span class="math inline">\(3\sim 4\)</span>区间，我们发现她并没有完全包含在答案区间 <spanclass="math inline">\(1\sim 3\)</span> 里面，但发现她的左儿子 <spanclass="math inline">\(3\sim 3\)</span> 区间和 <spanclass="math inline">\(1\sim 3\)</span> 区间又交集，那么久走到 <spanclass="math inline">\(3\sim 3\)</span> 区间</p><p>到了 <span class="math inline">\(3\sim 3\)</span>区间，发现其被答案区间完全包含，就返回她的值3一直到最开始</p><p><span class="math inline">\(3\sim 32\)</span> 区间的 <spanclass="math inline">\(3+1\sim 2\)</span> 区间的3=6，我们知道了 <spanclass="math inline">\(1\sim 3\)</span> 区间和为6。</p><p>我们总结一下，线段树的查询方法：</p><ol type="1"><li>如果这个区间被完全包括在目标区间里面，直接返回这个区间的值</li><li>如果这个区间的左儿子和目标区间有交集，那么搜索左儿子</li><li>如果这个区间的右儿子和目标区间有交集，那么搜索右儿子</li></ol><p>写成代码，就会变成这样： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">search</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].l&gt;=l &amp;&amp; tree[i].r&lt;=r)<span class="comment">//如果这个区间被完全包括在目标区间里面，直接返回这个区间的值</span></span><br><span class="line">        <span class="keyword">return</span> tree[i].sum;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].r&lt;l || tree[i].l&gt;r)  <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//如果这个区间和目标区间毫不相干，返回0</span></span><br><span class="line">    <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>].r&gt;=l)  s+=<span class="built_in">search</span>(i*<span class="number">2</span>,l,r);<span class="comment">//如果这个区间的左儿子和目标区间又交集，那么搜索左儿子</span></span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>+<span class="number">1</span>].l&lt;=r)  s+=<span class="built_in">search</span>(i*<span class="number">2</span>+<span class="number">1</span>,l,r);<span class="comment">//如果这个区间的右儿子和目标区间又交集，那么搜索右儿子</span></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>关于那几个if的条件一定要看清楚，最好背下来，以防考场上脑抽推错。</p><p>然后,我们怎么修改这个区间的单点，其实这个相对简单很多，你要把区间的第<code>dis</code> 位加上 <span class="math inline">\(k\)</span>。</p><p>那么你从根节点开始，看这个 <code>dis</code>是在左儿子还是在右儿子，在哪往哪跑，</p><p>然后返回的时候，还是按照<code>tree[i].sum=tree[i*2].sum+tree[i*2+1].sum</code>的原则，更新所有路过的点。</p><p>如果不理解，我还是画个图吧，其中紫色是去的路径，粉色是返回的路径，回来时候红色的+标记就是把这个点加上这个值。</p><p><imgsrc="https://cdn.luogu.com.cn/upload/image_hosting/n4ptxjmh.png" /></p><p>把这个过程变成代码，就是这个样子： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> dis,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].l==tree[i].r)&#123;<span class="comment">//如果是叶子节点，那么说明找到了</span></span><br><span class="line">        tree[i].sum+=k;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dis&lt;=tree[i*<span class="number">2</span>].r)  <span class="built_in">add</span>(i*<span class="number">2</span>,dis,k);<span class="comment">//在哪往哪跑</span></span><br><span class="line">    <span class="keyword">else</span>  <span class="built_in">add</span>(i*<span class="number">2</span>+<span class="number">1</span>,dis,k);</span><br><span class="line">    tree[i].sum=tree[i*<span class="number">2</span>].sum+tree[i*<span class="number">2</span>+<span class="number">1</span>].sum;<span class="comment">//返回更新</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ## 2.2<spanclass="math inline">\(\quad\)</span>区间修改，单点查询</p><p>区间修改和单点查询，我们的思路就变为：如果把这个区间加上 <spanclass="math inline">\(k\)</span>，相当于把这个区间涂上一个 <spanclass="math inline">\(k\)</span>的标记，然后单点查询的时候，就从上跑道下，把沿路的标记加起来就好。</p><p>这里面给区间贴标记的方式与上面的区间查找类似，原则还是那三条，只不过第一条：如果这个区间被完全包括在目标区间里面，直接返回这个区间的值变为了如果这个区间如果这个区间被完全包括在目标区间里面，讲这个区间标记<span class="math inline">\(k\)</span>。</p><p>具体做法很像，这里贴上代码： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].l&gt;=l &amp;&amp; tree[i].r&lt;=r)&#123;<span class="comment">//如果这个区间被完全包括在目标区间里面，讲这个区间标记k</span></span><br><span class="line">        tree[i].sum+=k;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>].r&gt;=l)</span><br><span class="line">        <span class="built_in">add</span>(i*<span class="number">2</span>,l,r,k);</span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>+<span class="number">1</span>].l&lt;=r)</span><br><span class="line">        <span class="built_in">add</span>(i*<span class="number">2</span>+<span class="number">1</span>,l,r,k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>然后就是单点查询了，这个更好理解了，就是 <code>dis</code>在哪往哪跑，把路径上所有的标价加上就好了： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> dis)</span></span>&#123;</span><br><span class="line">    ans+=tree[i].num;<span class="comment">//一路加起来</span></span><br><span class="line">    <span class="keyword">if</span>(tree[i].l==tree[i].r)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(dis&lt;=tree[i*<span class="number">2</span>].r)</span><br><span class="line">        <span class="built_in">search</span>(i*<span class="number">2</span>,dis);</span><br><span class="line">    <span class="keyword">if</span>(dis&gt;=tree[i*<span class="number">2</span>+<span class="number">1</span>].l)</span><br><span class="line">        <span class="built_in">search</span>(i*<span class="number">2</span>+<span class="number">1</span>,dis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>不知不觉，这第二章已经结束。这样的简单（原谅我用这个词）线段树，还可除了求和，还可以求区间最小最大值，还可以区间染色。</p><p>但是！这样的线段树展现不出来她的魅力，因为区间求和，树状数组比她少了一个很大的常熟。二区间最值，ST的那神乎其技的<spanclass="math inline">\(O(n)\)</span>查询也能完爆她。这是为什么？因为线段树的魅力还没有展现出来，她最美丽的地方：<spanclass="math inline">\(\text{pushdown}\)</span>还未展现于世，如果你已经对这一章充足的了解，并且能不看博客把洛谷上树状数组模板1、2都能写出来，那么请你进入下一部。</p><h1 id="三进阶线段树">三、进阶线段树</h1><p>区间修改、区间查询，你可能会认为，把上一章里面的这两个模块加在一起就好了，然后你就会发现你大错特错。</p><p>因为如果对于1~4这个区间，你把1<sub>3区间+1，相当于把节点1</sub>2和3标记，但是如果你查询2<sub>4时，你会发现你加的时没有标记的2节点和没有标记的3</sub>4节点加上去，结果当然是错的。</p><p>那么我们应该怎么办？这时候 <spanclass="math inline">\(\text{pushdown}\)</span> 的作用就显现出来了。</p><p>你会想到，我们只需要在查询的时候，如果我们要查的2节点在1<sub>2区间的里面，那我们就可以把1</sub>2区间标记的那个+1给推下去这样就能顺利地加上了。怎么记录这个标记呢？我们需要记录一个“懒标记” <spanclass="math inline">\(\text{lazytage}\)</span>，来记录这个区间</p><p>区间修改的时候，我们按照如下原则：</p><ol type="1"><li>如果当前区间被完全覆盖在目标区间里，讲这个区间的<code>sum+k*(tree[i].r-tree[i].l+1)</code></li><li>如果没有完全覆盖，则先下传懒标记</li><li>如果这个区间的左儿子和目标区间有交集，那么搜索左儿子</li><li>如果这个区间的右儿子和目标区间有交集，那么搜索右儿子</li></ol><p>然后查询的时候，将这个懒标记下传就好了，下面图解一下：</p><p>如图，区间1<sub>4分别是1、2、3、4，我们要把1</sub>3区间+1。因为1~2区间被完全覆盖，所以将其+2，并将紫色的<span class="math inline">\(\text{lazytage}+1\)</span>，3区间同理 <imgsrc="https://cdn.luogu.com.cn/upload/image_hosting/xcs9o21v.png" /></p><p>注意我们处理完这些以后，还是要按照<code>tree[i].sum=tree[i*2].sum+tree[i*2+1].sum</code>的原则返回，代码如下： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].r&lt;=r &amp;&amp; tree[i].l&gt;=l)<span class="comment">//如果当前区间被完全覆盖在目标区间里，讲这个区间的sum+k*(tree[i].r-tree[i].l+1)</span></span><br><span class="line">    &#123;</span><br><span class="line">        tree[i].sum+=k*(tree[i].r-tree[i].l+<span class="number">1</span>);</span><br><span class="line">        tree[i].lz+=k;<span class="comment">//记录lazytage</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_down</span>(i);<span class="comment">//向下传递</span></span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>].r&gt;=l)</span><br><span class="line">        <span class="built_in">add</span>(i*<span class="number">2</span>,l,r,k);</span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>+<span class="number">1</span>].l&lt;=r)</span><br><span class="line">        <span class="built_in">add</span>(i*<span class="number">2</span>+<span class="number">1</span>,l,r,k);</span><br><span class="line">    tree[i].sum=tree[i*<span class="number">2</span>].sum+tree[i*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中的 <spanclass="math inline">\(\text{pushdown}\)</span>，就是把自己的 <spanclass="math inline">\(\text{lazytage}\)</span>归零，并给自己的儿子加上，并让自己的儿子加上 <spanclass="math inline">\(k\times(r-l+1)\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].lz!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[i*<span class="number">2</span>].lz+=tree[i].lz;<span class="comment">//左右儿子分别加上父亲的lz</span></span><br><span class="line">        tree[i*<span class="number">2</span>+<span class="number">1</span>].lz+=tree[i].lz;</span><br><span class="line">        init mid=(tree[i].l+tree[i].r)/<span class="number">2</span>;</span><br><span class="line">        tree[i*<span class="number">2</span>].data+=tree[i].lz*(mid-tree[i*<span class="number">2</span>].l+<span class="number">1</span>);<span class="comment">//左右分别求和加起来</span></span><br><span class="line">        tree[i*<span class="number">2</span>+<span class="number">1</span>].data+=tree[i].lz*(tree[i*<span class="number">2</span>+<span class="number">1</span>].r-mid);</span><br><span class="line">        tree[i].lz=<span class="number">0</span>;<span class="comment">//父亲lz归零</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询的时候，和上一章的几乎一样，就是也要像修改一样加入 <spanclass="math inline">\(\text{pushdown}\)</span>，这里用图模拟一下。我们要查询2~4区间的和，这是查询前的情况，所有紫色的代表<span class="math inline">\(\text{lazytage}\)</span> <imgsrc="https://cdn.luogu.com.cn/upload/image_hosting/ky84qvuc.png" /></p><p>然后，我们查到区间1~2时，发现这个区间并没有被完全包括在目标区间里，于是我们就<span class="math inline">\(\text{pushdown}\)</span>，<spanclass="math inline">\(\text{lazytage}\)</span> 下传，并让每个区间<code>sum</code> 加上 <spanclass="math inline">\((r-l)\text{lazytage}\)</span>。 <imgsrc="https://cdn.luogu.com.cn/upload/image_hosting/rbaq35e6.png" /></p><p>然后查到2<sub>2区间，发现被完全包含，所以就返3，再搜索到3</sub>4区间，发现被完全包含，那么直接返回8，最后3+8=11就是答案</p><p>这里是代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">search</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].l&gt;=l &amp;&amp; tree[i].r&lt;=r)</span><br><span class="line">        <span class="keyword">return</span> tree[i].sum;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].r&lt;l || tree[i].l&gt;r)  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">push_down</span>(i);</span><br><span class="line">    <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>].r&gt;=l)  s+=<span class="built_in">search</span>(i*<span class="number">2</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>+<span class="number">1</span>].l&lt;=r)  s+=<span class="built_in">search</span>(i*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，到了这里，我们就学会了用线段树进行区间加减操作，大家可以完成洛谷的线段树模板1</p><h1 id="四乘法根号线段树">四、乘法（根号）线段树</h1><h2 id="quad乘法线段树">4.1<spanclass="math inline">\(\quad\)</span>乘法线段树</h2><p>如果这个线段树只有乘法，那么直接加入 <spanclass="math inline">\(\text{lazytage}\)</span> 变成乘，然后<code>tree[i].sum*=k</code>就好了。但是，如果我们是又加又乘，那就不一样了。</p><p>当 <span class="math inline">\(\text{lazytage}\)</span>下标传递的时候，我们需要考虑，是先加再乘还是先乘再加。我们只需要对 <spanclass="math inline">\(\text{lazytage}\)</span> 做这样一个处理。</p><p><spanclass="math inline">\(\text{lazytage}\)</span>分为两种，分别是加法的<code>plz</code> 和乘法的 <code>mlz</code>。</p><p><span class="math inline">\(mlz\)</span>很简单处理，<spanclass="math inline">\(pushdown\)</span>时直接<spanclass="math inline">\(\times\)</span>父亲的就可以了，那么加法呢？</p><p>我们需要把原先的 <code>plz</code> 乘上父亲的 <code>mlz</code>再加上父亲的 <code>plz</code>。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">long</span> <span class="type">long</span> i)</span></span>&#123;<span class="comment">//注意这种级别的数据一定要开long long</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> k1=tree[i].mlz,k2=tree[i].plz;</span><br><span class="line">    tree[i&lt;&lt;<span class="number">1</span>].sum=(tree[i&lt;&lt;<span class="number">1</span>].sum*k1+k2*(tree[i&lt;&lt;<span class="number">1</span>].r-tree[i&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>))%p;<span class="comment">//</span></span><br><span class="line">    tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum=(tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum*k1+k2*(tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>))%p;</span><br><span class="line">    tree[i&lt;&lt;<span class="number">1</span>].mlz=(tree[i&lt;&lt;<span class="number">1</span>].mlz*k1)%p;</span><br><span class="line">    tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mlz=(tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mlz*k1)%p;</span><br><span class="line">    tree[i&lt;&lt;<span class="number">1</span>].plz=(tree[i&lt;&lt;<span class="number">1</span>].plz*k1+k2)%p;</span><br><span class="line">    tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].plz=(tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].plz*k1+k2)%p;</span><br><span class="line">    tree[i].plz=<span class="number">0</span>;</span><br><span class="line">    tree[i].mlz=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>然后加法和减法的函数同理，维护 <spanclass="math inline">\(\text{lazytage}\)</span>的时候加法标记一定要记得现乘再加。</p><p>值得一提的是，计算$$2时一定要改成 <spanclass="math inline">\(i&lt;&lt;1\)</span> 这样能解决很多时间。</p><h2 id="quad根号线段树">4.2<spanclass="math inline">\(\quad\)</span>根号线段树</h2><p>其实，根号线段树和除法线段树一样。她们乍眼一看感觉直接用<code>lazytage</code> 标记除了多少，但是实际上，会出现精度问题。</p><p>C++的除法是向下取整，很明显，<spanclass="math inline">\(\dfrac{a+b}{k}!=\dfrac{a}{k}+\dfrac{b}{k}\)</span>（在向下取整的情况下），而根号，很明显<spanclass="math inline">\(\sqrt{a}+\sqrt{b}!=\sqrt{a+b}\)</span>那么怎么办？</p><p>第一个想法就是暴力，对于每个要改动的区间l~r,把里面的每个点都单独除，但这样就会把时间复杂度卡得比大暴力都慢（因为多个常数），所以怎么优化？</p><p>我们对于每个区间，维护她的最大值和最小值，然后每次修改时，如果这个区间的最大值根号和最小值的根号一样，说明这个区间整体根号不会产生误差，就直接修改（除法同理）</p><p>其中， <code>lazytage</code>把除法当成减法，记录的是这个区间里每个元素减去的值。</p><p>下面是根号线段树的修改过程： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Sqrt</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].l&gt;=l &amp;&amp; tree[i].r&lt;=r &amp;&amp; (tree[i].minn-(<span class="type">long</span> <span class="type">long</span>)<span class="built_in">sqrt</span>(tree[i].minn))==(tree[i].maxx-(<span class="type">long</span> <span class="type">long</span>)<span class="built_in">sqrt</span>(tree[i].maxx)))&#123;<span class="comment">//如果这个区间的最大值最小值一样</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> u=tree[i].minn-(<span class="type">long</span> <span class="type">long</span>)<span class="built_in">sqrt</span>(tree[i].minn);<span class="comment">//计算区间中每个元素需要减去的</span></span><br><span class="line">        tree[i].lz+=u;</span><br><span class="line">        tree[i].sum-=(tree[i].r-tree[i].l+<span class="number">1</span>)*u;</span><br><span class="line">        tree[i].minn-=u;</span><br><span class="line">        tree[i].maxx-=u;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].r&lt;l || tree[i].l&gt;r)  <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">push_down</span>(i);</span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>].r&gt;=l)  <span class="built_in">Sqrt</span>(i*<span class="number">2</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(tree[i*<span class="number">2</span>+<span class="number">1</span>].l&lt;=r)  <span class="built_in">Sqrt</span>(i*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">    tree[i].sum=tree[i*<span class="number">2</span>].sum+tree[i*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">    tree[i].minn=<span class="built_in">min</span>(tree[i*<span class="number">2</span>].minn,tree[i*<span class="number">2</span>+<span class="number">1</span>].minn);<span class="comment">//维护最大值和最小值</span></span><br><span class="line">    tree[i].maxx=<span class="built_in">max</span>(tree[i*<span class="number">2</span>].maxx,tree[i*<span class="number">2</span>+<span class="number">1</span>].maxx);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;&quot;i&quot;&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;tree[i].sum&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 然后 <code>pushdown</code>没什么变化，就是要记得 <code>tree[i].minn$、$tree[i].maxx</code>也要记得 <code>-lazytage</code>。</p><h1 id="五样例练习">五、样例练习</h1><ul><li><p><a href="https://www.luogu.com.cn/problem/P3374">P3374树状数组模板1</a>：单点修改，区间查询</p></li><li><p><a href="https://www.luogu.com.cn/problem/P3368">P3368树状数组模板2</a>：区间修改，单点查询</p></li><li><p><a href="https://www.luogu.com.cn/problem/P3372">P3372线段树模板1</a>区间加法：</p></li><li><p><a href="https://www.luogu.com.cn/problem/P3373">P3373线段树模板2</a>区间乘法：</p></li><li><p><a href="https://www.luogu.com.cn/problem/P4588">P4588[TJOI2018]数学计算</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P1502">P1502窗口的星星</a>：离散化</p></li><li><p><a href="https://www.luogu.com.cn/problem/P2471">P2471[SCOI2007]降雨量</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P3722">P3722[AH2017/HNOI2017]影魔</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P4198">P4198楼房重建</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P4513">P4513小白逛公园</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P4145">P4145上帝造题的七分钟 2 / 花神游历各国</a></p></li><li><p><a href="https://www.luogu.com.cn/problem/P2023">P2023 [AHOI2009]维护序列</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
